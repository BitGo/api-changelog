openapi: 3.0.3
info:
  title: Platform Temp
  version: 1.0.0
servers:
  - url: ''
tags:
  - name: Compliance Transaction Monitoring
  - name: CryptoCompare
    description: CryptoCompare is a partner API from CryptoCompare that you can use to compare prices of cryptocurrency, tokens, and fiat.
  - name: DAS
  - name: MetaMask Institutional
    description: Returns MetaMask Institutional (MMI) related data for a specific wallet's address.
  - name: Fiat
  - name: Market data
    description: Market data is an internal REST API that you can use to compare the prices of cryptocurrency, tokens, and fiat.
  - name: Address
  - name: Admin
  - name: Audit log
  - name: Bank account
    description: Manage links to external bank accounts
  - name: Circuit breaker
    description: |
      An internal limit placed on transfers out of a wallet.  Circuit breakers can
      be defined at 3 levels:

      * Global
      * Enterprise
      * Wallet

      A lower-level circuit breaker overrides all higher-level circuit breakers.
      Global circuit breakers apply by default.  An enterprise circuit breaker
      overrides all global circuit breakers.  A wallet circuit breaker overrides
      all enterprise and global circuit breakers.
  - name: Config
  - name: Enterprise
  - name: Deposit Information
  - name: Express
  - name: Federation
    description: |
      Implementation of the [Stellar Federation protocol.](https://www.stellar.org/developers/guides/concepts/federation.html)

      The Stellar Federation protocol maps Stellar addresses to more information about a given user. It’s a way for Stellar client software to resolve email-like addresses such as test*bitgo.com into account IDs like: GCTTCPH4IIDK7P72FFAEJ3ZFN6WDHJH6GGMRPHPM56ZWGIQ7B3XTIJAM.
  - name: Key
  - name: LegacyReports
  - name: Lightning
    description: |
      (Experimental) Lightning network related endpoints.
  - name: Password reset
  - name: Pending approval
  - name: Policy
  - name: Reports
  - name: Send label
  - name: Transfer
  - name: Transaction request
  - name: TSS wallets
  - name: User
  - name: User Management
  - name: Wallet
  - name: Wallet events
    description: |
      A Wallet Event models any and all types of state-changes that pertain
      to a single wallet.

      Such events tie into the Data Team's proposed Event-Driven Architecture.

      By modeling state-changes in our services as events, it affords us the ability
      to bill users for all state-changes. This ensures that our billing service will
      scale to support new types of products.
  - name: Wallet share
    description: |
      Sharing a wallet involves giving another user permission to use the wallet.

      In order for the receiver to use the wallet, we also need to share the
      private key with them. Each user on BitGo creates
      a public-private keypair for this purpose during their signup process.

      The BitGo SDK does the following client-side to create a new wallet share:

      * Get the receiving user’s sharing key (a derived path of the receiver’s public key)
      * Decrypt the wallet to be shared locally
      * Re-encrypt the wallet against the public key above, so that only the receiver may decrypt it
      * Upload the encrypted keys to the BitGo service, which informs the receiver they have a pending share
  - name: Webhook
    description: |
      Webhooks may be setup to programmatically receive callbacks from BitGo. These may be attached to wallets (in the case of transfers), or to a block (for block notifications). Webhook notifications are triggered when the specified event occurs, such as an incoming transaction.

      BitGo servers will make a POST http request to the URL defined with a JSON payload, and expect a HTTP 200 OK. If a successful response is not received, BitGo will attempt to retry the webhook with an increasing delay between each retry.

      Since anyone on the Internet can send HTTP requests to the Webhook URL, the request body payload should not be trusted. Please verify any information sent in the webhook by fetching the transfer/block data from BitGo before processing the notification.

      Developers should take care to ensure that their application succeeds even in the cases of transient network error, or if receive the same webhook twice due to an improper acknowledgement.
  - name: Trade REST API
    description: |-
      ## Rate-Limiting
      All REST endpoints are rate-limited to 10 requests/second. Once the limit is reached, requests will be rejected with `429 Too Many Requests`

      The following headers are returned on every request <table> <tr> <td>Header</td><td>Description</td> </tr> <tr> <td>X-Ratelimit-Limit</td><td>Request limit per second</td> </tr> <tr> <td>X-Ratelimit-Remaining</td><td>Remaining number of requests allowed in interval</td> </tr> <tr> <td>X-Ratelimit-Reset</td><td>Duration in milliseconds until the total quota resets</td> </tr> </table>
      The following header is also returned if the response is `429 Too Many Requests` <table> <tr> <td>Header</td><td>Description</td> </tr> <tr> <td>Retry-After</td><td>Duration in seconds of how long to wait before making a new request</td> </tr> </table>
  - name: Trade WebSocket
    description: |-
      Trade WebSocket API to get real-time status updates for market data and trigger messages for:
      - Order books - Subscribe to a live feed of all outstanding buy and sell orders on the market for specific coins and tokens. Send messages when specific market conditions occur.
      - Trade orders - Subscribe to live status updates for your trade orders, including individual fills for an order. Send messages when statuses update.
  - name: Trade Falcon
    description: Service for our trading platform
paths:
  /api/v2/{coin}/pendingapprovals/{approvalId}:
    put:
      tags:
        - Express
      summary: Resolve pending approval
      operationId: express.pendingapprovals
      description: Accept or reject a pending approval
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathApprovalId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressResolvePendingApprovalRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPendingApproval'
  /api/v2/{coin}/wallet/{walletId}:
    put:
      tags:
        - Wallet
      summary: Update wallet
      operationId: v2.wallet.update
      description: Update a wallet by its `coin` and `walletId`.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWallet'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformWallet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformPlatformError'
                  - $ref: '#/components/schemas/PlatformInvalidWalletId'
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - Wallet
      summary: Delete wallet
      description: Delete one wallet by its `coin` and `walletId`. Once removed, you can no longer view or access this wallet, but it does remain accessible to other wallet users. If you are the only user on this wallet, you can only delete it if it has a 0 balance.
      operationId: v2.wallet.remove
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformWallet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformPlatformError'
                  - $ref: '#/components/schemas/PlatformInvalidWalletId'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
    get:
      summary: Get wallet by coin and ID
      description: Returns wallet and balance details for a wallet.
      operationId: v2.wallet.get
      tags:
        - Wallet
      parameters:
        - name: allTokens
          description: Include data for all subtokens (i.e. ERC20 Tokens, Stellar Tokens)
          in: query
          schema:
            type: boolean
        - name: unspentCount
          description: True, if including unspent count for UTXO-based coins.
          in: query
          schema:
            type: boolean
        - name: includeRbf
          description: True, if including Replace-By-Fee (RBF) transactions in the total balance amount.
          in: query
          schema:
            type: boolean
        - name: expandAdvancedWhitelist
          description: True, if including the advanced whitelist wallet address in the response. The address is annotated as part of the whitelist entry metadata
          in: query
          schema:
            type: boolean
        - name: includeStakingBalances
          description: Includes the staked balance and reward balance of the wallet
          in: query
          schema:
            type: boolean
        - name: includeBalance
          description: Omit trying to fetch the wallet balance
          in: query
          schema:
            type: boolean
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/webhooks:
    get:
      tags:
        - Webhook
      summary: List wallet webhooks
      description: |
        List webhooks set up on the wallet. Currently, the types of
        webhooks that can be attached to a wallet are `transfer`,
        `pendingapproval`, and `address_confirmation` notifications.
      operationId: v2.wallet.listwebhooks
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhooks:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/PlatformWebhook'
                        - type: object
                          properties:
                            walletId:
                              $ref: '#/components/schemas/Id'
                            allToken:
                              type: boolean
                              example: false
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformPlatformError'
                  - $ref: '#/components/schemas/PlatformInvalidWalletId'
    delete:
      tags:
        - Webhook
      summary: Remove wallet webhook
      description: |
        Removing a webhook will cause new events of the specified type to no
        longer trigger HTTP callbacks to your URLs
      operationId: v2.wallet.removewebhook
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/WebhookTypeWallet'
                url:
                  type: string
                  format: uri
                  example: https://your.server.com/user_webhook
                id:
                  $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  removed:
                    type: integer
                    example: 1
                    description: Number of wallet webhooks removed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformPlatformError'
                  - $ref: '#/components/schemas/PlatformInvalidWalletId'
    post:
      summary: Add wallet webhook
      description: |-
        Add a webhook to a wallet that sends an HTTP callback from BitGo to a specified
        URL when specific conditions occur. A wallet can have up to 10 webhooks of each
        wallet-webhook `type`. Learn more about webhooks on the
        [Developer Portal](https://developers.bitgo.com/guides/wallets/webhooks).

        **Note:** Before you process webhook notifications, BitGo strongly recommends that
        you verify response details by fetching the transfer or block data from BitGo. For
        example, if you create a transfer webhook and you receive a transfer ID, pass that
        ID to the [Get Transfer](/api/v2.wallet.gettransfer) endpoint to verify the transfer
        details.
      operationId: v2.wallet.addwebhook
      tags:
        - Webhook
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  allOf:
                    - $ref: '#/components/schemas/WalletWebhookType'
                  description: Event type to listen to.
                url:
                  type: string
                  description: URL to fire the webhook to.
                  example: https://your.server.com/webhook
                  minLength: 1
                  format: uri
                label:
                  type: string
                  description: Label of the new webhook.
                numConfirmations:
                  type: number
                  description: Number of confirmations before triggering the webhook. If 0 or unspecified, requests will be sent to the callback endpoint when the transfer is first seen and when it is confirmed.
                  example: 6
                allToken:
                  type: boolean
                  default: false
                  description: Triggers on coin transfers and token transfers for ETH and Stellar. Must be set to true to receive webhooks for Trade accounts.
                listenToFailureStates:
                  type: boolean
                  description: Whether or not to listen to failed transactions on chain.
                txRequestStates:
                  type: array
                  items:
                    type: string
                    enum:
                      - pendingApproval
                      - canceled
                      - rejected
                      - initialized
                      - pendingDelivery
                      - delivered
                      - pendingUserSignature
                      - pendingUserCommitment
                      - pendingUserRShare
                      - pendingUserGShare
                      - readyToSend
                      - signed
                      - failed
                    description: If supplied, only transaction request state changes from the provided list will trigger notifications. If not provided, all transaction request state changes will trigger notifications.
                txRequestTransactionStates:
                  type: array
                  items:
                    type: string
                    enum:
                      - initialized
                      - pendingSignature
                      - eddsaPendingCommitment
                      - eddsaPendingRShare
                      - eddsaPendingGShare
                      - ecdsaMPCv2Round1
                      - ecdsaMPCv2Round2
                      - ecdsaMPCv2Round3
                      - readyToCombineShares
                      - signed
                      - held
                      - delivered
                      - invalidSignature
                      - rejected
                    description: If supplied, only transaction request transaction state changes from the provided list will trigger notifications. If not provided, all transaction request transaction state changes will trigger notifications.
                customHttpHeaders:
                  type: object
                  additionalProperties:
                    type: string
                  description: Custom HTTP header key/values to be included with every notification for the webhook.
              required:
                - type
                - url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/walletshare/{shareId}:
    get:
      tags:
        - Wallet share
      summary: Get wallet share
      description: Returns a wallet share, requires unlock if the wallet share includes a keychain.
      operationId: v2.wallet.sharing.getshare
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathShareId'
        - name: skipUnlock
          in: query
          description: True, if skipping unlock. Excludes keychain in response.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletShare'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
    post:
      tags:
        - Wallet share
      summary: Update a wallet share
      operationId: v2.wallet.sharing.updateshare
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathShareId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: '#/components/schemas/PlatformWalletShareState'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformUpdateWalletShareResponse'
    delete:
      summary: Cancel a wallet share
      description: |-
        Cancels a pending outgoing wallet share, or rejects an incoming share.
        The share must not have been accepted yet.
      operationId: v2.wallet.sharing.cancelshare
      tags:
        - Wallet
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: shareId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateWalletShareResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise:
    get:
      summary: List enterprises
      operationId: enterprise.list
      tags:
        - Enterprise
      parameters:
        - name: expandTotalWalletCounts
          description: True, if returning the total number of wallets for each enterprise.
          in: query
          schema:
            type: boolean
        - name: excludeWalletMemberships
          description: True, if excluding enterprises that the user joined only through wallet memberships.
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterprisesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}:
    put:
      tags:
        - Enterprise
      summary: Update enterprise
      operationId: enterprise.update
      parameters:
        - $ref: '#/components/parameters/pathEnterpriseId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEnterprise'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformEnterprise'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
    get:
      summary: Get enterprise
      operationId: enterprise.getById
      tags:
        - Enterprise
      parameters:
        - name: excludeV1Wallets
          description: True, if excluding "wallets" field containing v1 wallet addresses from the enterprise
          in: query
          schema:
            type: boolean
        - name: expandTotalWalletsCount
          description: True, if returning the total number of wallets for this enterprise
          in: query
          schema:
            type: boolean
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEnterpriseResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/user:
    delete:
      tags:
        - Enterprise
      summary: Remove user from enterprise
      operationId: v2.enterprise.user.remove
      parameters:
        - $ref: '#/components/parameters/pathEnterpriseId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEnterpriseUser'
      responses:
        '200':
          description: OK
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  pendingApprovals:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlatformPendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformPlatformError'
                  - $ref: '#/components/schemas/PlatformInvalidEnterpriseId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
    post:
      summary: Add user to enterprise
      operationId: v2.enterprise.user.add
      tags:
        - User
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    permission:
                      oneOf:
                        - $ref: '#/components/schemas/EnterpriseUserPermission'
                        - type: array
                          items:
                            type: string
                            enum:
                              - admin
                              - auditor
                            description: 'This type represents the permissions that can be assigned to a user when adding them to an enterprise 1. ''admin'': Add/remove users, Create wallets, Manage enterprise policies, Add Bank Accounts, Receive invitations to wallets 2. ''auditor'': View audit logs across the enterprise, Receive invitations to wallets'
                    videoIdUser:
                      type: boolean
                    invite:
                      type: boolean
                - oneOf:
                    - type: object
                      properties:
                        username:
                          type: string
                          description: The username of a user that should be added to the enteprrise
                          format: email
                        videoIdUser:
                          type: boolean
                      required:
                        - username
                    - type: object
                      properties:
                        usernames:
                          type: array
                          items:
                            type: string
                            description: Thes Username of a User that should be added to the Enterprise
                        videoIdUser:
                          type: boolean
                      required:
                        - usernames
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidEnterpriseId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    put:
      summary: Update users role in an enterprise
      description: Update a users role in an enterprise. Must be an enterprise manager to perform this action.
      operationId: v2.enterprise.user.update
      tags:
        - User Management
      parameters:
        - name: userId
          description: ''
          in: query
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: role
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseUserRole'
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidOrganizationId'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/pendingapprovals/{approvalId}:
    put:
      tags:
        - Pending approval
      summary: Update pending approval
      description: |
        Updates the state of a pending approval to `approved` or `rejected`.
        You can manage pending approvals programmatically by API or with the
        BigGo web UI. Ensure your authentication token has the proper scope.
        When creating an access token in the web UI, check the permission,
        "Update Pending Approvals" (under "Account Settings" &gt; "Developer
        Options" &gt; "Access Tokens").

        BitGo recommends that you create a webhook policy so that you can
        automate approving and rejecting transactions.
      operationId: v2.approval.update
      parameters:
        - $ref: '#/components/parameters/pathApprovalId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                state:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPendingApproval'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPendingApproval'
    get:
      summary: Get pending approval
      operationId: v2.approval.get
      tags:
        - Pending approval
      parameters:
        - name: expandAddressLabels
          description: If true, adds "addressLabels" to each returned pending approval associated with recipient's addresses
          in: query
          schema:
            type: boolean
        - name: approvalId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/user/accesstoken:
    get:
      tags:
        - User
      summary: List access tokens
      description: List all access tokens for a user
      operationId: user.listaccesstokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessTokens:
                    $ref: '#/components/schemas/Session'
    post:
      summary: Create access token
      description: Create an access token to use BitGo APIs. BitGo restricts access tokens in the production environment to specific IP addresses. However, access tokens in the test environment don't require an IP address restriction. If you omit a spending limit, you must unlock the token using the [Unlock session](https://developers.bitgo.com/api/user.unlock) endpoint on a regular basis to permit operations such as withdrawals. Therefore, BitGo recommends including a spending limit.
      operationId: v2.accesstoken.add
      tags:
        - User
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  oneOf:
                    - type: array
                      items:
                        type: string
                        enum:
                          - openid
                          - profile
                          - user_manage
                          - enterprise_view_all
                          - enterprise_manage_all
                          - wallet_view
                          - wallet_view_enterprise
                          - wallet_view_all
                          - wallet_create
                          - wallet_freeze
                          - wallet_freeze_all
                          - wallet_manage
                          - wallet_manage_all
                          - wallet_approve
                          - wallet_approve_all
                          - wallet_spend
                          - wallet_spend_all
                          - wallet_edit
                          - wallet_edit_all
                          - wallet_stake
                          - wallet_stake_all
                          - wallet_edit_enterprise
                          - wallet_spend_enterprise
                          - wallet_approve_enterprise
                          - wallet_manage_enterprise
                          - settlement_network_read
                          - settlement_network_write
                          - portfolio_view
                          - trade_view
                          - trade_trade
                          - pending_approval_update
                          - metamask_institutional
                          - crypto_compare
                          - all
                    - type: array
                      items:
                        type: string
                  description: The permissions granted by this access token. - `all` - Access all actions in the test environment. - `crypto_compare` - Call CryptoCompare API. - `enterprise_manage_all` - Manage users and settings for any enterprise to which the user belongs. - `enterprise_view_all` - View any enterprise to which the user belongs. - `metamask_institutional` - Enables using BitGo wallets in the MetaMask Institutional extension. - `openid` - Verify your BitGo user ID using OpenID Connect. - `pending_approval_update` - Approve or reject pending actions that require approval to proceed. - `portfolio_view` - Call the Portfolio API (deprecated). - `profile` - View your BitGo Profile. - `settlement_network_read` - View your client's Go Network data, enabling allocations to and from your platform. Only for Go Network partners. - `settlement_network_write` - Update your client's Go Network data, enabling allocations to and from your platform. Only for Go Network partners. - `trade_trade` - Initiate trades. - `trade_view` - View trades. - `wallet_approve` - Approve policies and transactions for a wallet where the user is a wallet admin. - `wallet_approve_all` - Approve transactions for any wallet where the user is a wallet admin within any enterprise to which the user belongs. - `wallet_approve_enterprise` - Approve transactions for any wallet where the user is a wallet admin within a single enterprise. - `wallet_create` - Create wallets. - `wallet_edit` - Edit comments on a transfer. - `wallet_edit_all` - Edit comments on all transfers within multiple enterprises. - `wallet_edit_enterprise` - Edit comments on all transfers within a single enterprise (deprecated). - `wallet_freeze` - Freeze a wallet. - `wallet_freeze_all` - Freeze any wallet within any enterprises to which the user belongs. - `wallet_manage` - Manage settings for a wallet where the user is a wallet admin. - `wallet_manage_all` - Manage settings for any wallet where the user is a wallet admin within any enterprise to which the user belongs. - `wallet_manage_enterprise` - Manage settings for any wallet where the user is a wallet admin within a single enterprise. - `wallet_spend` - Initiate transactions from a wallet. - `wallet_spend_all` - Initiate transactions from any wallet within any enterprise to which the user belongs. - `wallet_spend_enterprise` - Initiate transactions from any wallet within a single enterprise. - `wallet_stake` - Initiate staking transactions from a wallet. - `wallet_stake_all` - Initiate staking transactions from any wallet within any enterprise to which the user belongs. - `wallet_view` - View a wallet. - `wallet_view_all` - View any wallet within any enterprise to which the user belongs. - `wallet_view_enterprise` - View any wallet within a single enterprise.
                duration:
                  type: number
                  description: The duration of the access token in seconds.
                label:
                  type: string
                  description: A label for the access token.
                admin:
                  type: boolean
                  description: True, if this access token has admin permissions.
                ipRestrict:
                  nullable: true
                  type: array
                  items:
                    type: string
                  description: Restricts the access token to use only from the provided IP addresses. Required for access tokens in the production environment. Not required for access tokens in the test environment.
                enterprise:
                  type: string
                  description: The enterprise ID that the user belongs to.
                spendingLimits:
                  type: array
                  items:
                    type: object
                    properties:
                      coin:
                        $ref: '#/components/schemas/CoinString'
                      maxLimit:
                        type: boolean
                      txValueLimit:
                        oneOf:
                          - type: string
                          - type: number
                    required:
                      - coin
                      - txValueLimit
                allErc20TokensLimit:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    maxLimit:
                      type: boolean
                    txValueLimit:
                      oneOf:
                        - type: string
                        - type: number
              required:
                - label
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/user/session:
    get:
      summary: Get session
      description: Returns the session associated with access token passed via the `Authorization` header.
      operationId: user.getsession
      tags:
        - User
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    $ref: '#/components/schemas/OAuthAccessToken'
                required:
                  - session
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests:
    post:
      tags:
        - Transaction request
      summary: Create transaction request
      description: Allows users to create a transaction request given they have spender permissions on the wallet. Use only with MPC wallets. For multisignature wallets, use [Build a transaction](/api/v2.wallet.tx.build).
      operationId: v2.wallet.txrequest.create
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformTransactionRequest'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformTransactionRequest'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformPlatformError'
                  - $ref: '#/components/schemas/DuplicateSequenceId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPlatformError'
    get:
      summary: Get transaction requests by wallet
      description: Get a paginated list of transaction requests filtered by wallet. Use only with MPC wallets.
      operationId: v2.wallet.txrequest.get
      tags:
        - Transaction request
      parameters:
        - name: txRequestIds
          description: If provided, only the specified transaction requests will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              description: If provided, only the specified transaction requests will be returned.
        - name: idempotencyKeys
          description: If provided, only transaction requests with the matching idempotencyKeys will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              description: If provided, only transaction requests with the matching idempotencyKeys will be returned.
        - name: sequenceIds
          description: A "sequenceId" is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a "sequenceId" you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per "sequenceId" (and fails all subsequent attempts), you can retry sending without the risk of double spending. The "sequenceId" is only visible to users on the wallet and is not shared publicly.
          in: query
          schema:
            type: array
            items:
              type: string
              description: A "sequenceId" is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a "sequenceId" you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per "sequenceId" (and fails all subsequent attempts), you can retry sending without the risk of double spending. The "sequenceId" is only visible to users on the wallet and is not shared publicly.
        - name: states
          description: 'If provided, only transaction requests of the specified state will be returned. - `canceled`: Canceled by a wallet spender before approval or sending. - `delivered`: Inserted into the send queue (or rejected by BitGo through circuit breakers). This state is only used with apiVersion "full". - `failed` : Catch-all state indicating an unrecoverable failure (such as a duplicate key error when creating a transfer). - `initialized`: First state when a transaction request is created (before any policy evaluation occurs). - `pendingApproval`: Triggered a policy that requires approval to proceed. - `pendingDelivery`: Requires further action to proceed (such as pending signature, or accepting/rejecting due to triggering a circuit breaker). This state is only used with apiVersion "full". - `pendingUserCommitment`: Ready to receive your user commitments. This state is only used with apiVersion "lite" and EdDSA assets with commitment signing states. - `pendingUserGShare`: Ready to receive your gShare. - `pendingUserRShare`: Ready to receive your rShare. - `pendingUserSignature`: Ready to receive your user signature (get the unsigned transaction from BitGo and sign it). This state is only used with apiVersion "lite" and EdDSA assets without commitment signing states. - `readyToSend`: Ready send (share combination is complete). - `rejected`: Rejected by an approver. - `signed`: All transactions in the transaction request were signed. All future updates will be in the transfer document.'
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - pendingApproval
                - canceled
                - rejected
                - initialized
                - pendingDelivery
                - delivered
                - pendingUserSignature
                - pendingUserCommitment
                - pendingUserRShare
                - pendingUserGShare
                - readyToSend
                - signed
                - failed
              description: 'If provided, only transaction requests of the specified state will be returned. - `canceled`: Canceled by a wallet spender before approval or sending. - `delivered`: Inserted into the send queue (or rejected by BitGo through circuit breakers). This state is only used with apiVersion "full". - `failed` : Catch-all state indicating an unrecoverable failure (such as a duplicate key error when creating a transfer). - `initialized`: First state when a transaction request is created (before any policy evaluation occurs). - `pendingApproval`: Triggered a policy that requires approval to proceed. - `pendingDelivery`: Requires further action to proceed (such as pending signature, or accepting/rejecting due to triggering a circuit breaker). This state is only used with apiVersion "full". - `pendingUserCommitment`: Ready to receive your user commitments. This state is only used with apiVersion "lite" and EdDSA assets with commitment signing states. - `pendingUserGShare`: Ready to receive your gShare. - `pendingUserRShare`: Ready to receive your rShare. - `pendingUserSignature`: Ready to receive your user signature (get the unsigned transaction from BitGo and sign it). This state is only used with apiVersion "lite" and EdDSA assets without commitment signing states. - `readyToSend`: Ready send (share combination is complete). - `rejected`: Rejected by an approver. - `signed`: All transactions in the transaction request were signed. All future updates will be in the transfer document.'
        - name: latest
          description: If provided, only the latest transaction request version will be returned.
          in: query
          schema:
            type: boolean
        - name: limit
          description: Maximum number of results to return. If the result set is truncated, use the "nextBatchPrevId" value to get the next batch.
          in: query
          schema:
            type: string
            default: '25'
            minimum: 1
            maximum: 500
            format: number
        - name: prevId
          description: Return the next batch of results, based on the "nextBatchPrevId" value from the previous batch.
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: version
          in: query
          schema:
            type: string
            format: number
        - name: sortBy
          description: Sorts by specified field, default sorting by id.
          in: query
          schema:
            type: string
            enum:
              - id
              - createdDate
        - name: sortDirection
          description: Sorts order by field in specified sort direction, default ascending.
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionRequestsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/address-book/v1/block-list:
    get:
      summary: Get Block Lists
      operationId: V1GetBlockListsRoute
      tags:
        - Counterparties
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 50
        - name: offset
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 0
        - name: orderBy
          in: query
          required: true
          schema:
            type: string
            enum:
              - id
              - ownerListingId
              - blockedListingId
              - blockedGlobalListingId
              - createdAt
        - name: orderDirection
          in: query
          required: true
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BlockListWithListingArrayResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
    post:
      summary: Add Block List Entry
      operationId: V1PostBlockListRoute
      tags:
        - Counterparties
      parameters:
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                blockedListingId:
                  type: string
                  title: uuid
              required:
                - blockedListingId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BlockListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/block-list/{blockListId}:
    delete:
      summary: Delete Block List Entry
      operationId: V1DeleteBlockListRoute
      tags:
        - Counterparties
      parameters:
        - name: blockListId
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BlockListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/connections:
    get:
      summary: List Go Account connections
      description: Lists connections from your Go Account to other Go Accounts.
      operationId: V1GetConnectionsRoute
      tags:
        - Counterparties
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 50
        - name: offset
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 0
        - name: id
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - PENDING_DEACTIVATION
                - PENDING_ACTIVATION
                - ACTIVE
                - INACTIVE
                - UNDER_REVIEW
                - REQUESTED
              description: codec for valid connection statuses
        - name: connectionType
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - DVP
                - WHITELIST
              description: codec for valid connection statuses
        - name: orderBy
          in: query
          required: true
          schema:
            type: string
            enum:
              - description
              - connectionType
              - createdAt
              - updatedAt
        - name: orderDirection
          in: query
          required: true
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: name
          in: query
          schema:
            type: string
            minLength: 1
        - name: ownerWalletId
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: targetWalletId
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: hiddenConnections
          in: query
          schema:
            type: string
            enum:
              - include
              - exclude
              - show-only-hidden
        - name: includeTotalCount
          in: query
          schema:
            type: string
            enum:
              - include
              - exclude
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionWithOwnerAndTargetListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
    post:
      summary: Add Go Account connection
      description: |-
        Add a connection for your Go Account to another Go Account.
        To connect to a Go Account that's not listed in the public directory, pass a `walletId`.
        To connect to a Go Account that is listed in the public directory, pass a value for the `targetListingEntryId`.
      operationId: V1PostConnectionRoute
      tags:
        - Counterparties
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    listingEntryId:
                      type: string
                      title: uuid
                    localListingEntryDescription:
                      type: string
                      minLength: 1
                    targetListingEntryId:
                      type: string
                      title: uuid
                  required:
                    - listingEntryId
                    - targetListingEntryId
                - type: object
                  properties:
                    listingEntryId:
                      type: string
                      title: uuid
                    localListingDescription:
                      type: string
                      minLength: 1
                    localListingEntryDescription:
                      type: string
                      minLength: 1
                    localListingName:
                      type: string
                      minLength: 1
                    walletId:
                      type: string
                      minLength: 1
                  required:
                    - listingEntryId
                    - localListingName
                    - walletId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionWithOwnerAndTargetListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
    put:
      summary: Update connection status
      description: Update connections to `PENDING_DEACTIVATION`.
      operationId: V1PutConnectionsRoute
      tags:
        - Counterparties
      parameters:
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                connectionIds:
                  type: array
                  items:
                    type: string
                    title: uuid
                status:
                  type: string
                  enum:
                    - PENDING_DEACTIVATION
                hidden:
                  type: boolean
              required:
                - connectionIds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/connections/counterparties:
    get:
      summary: List counterparties
      description: Lists connections others have made from their Go Account to your Go Account.
      operationId: V1GetCounterpartyConnectionsRoute
      tags:
        - Counterparties
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 50
        - name: offset
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 0
        - name: id
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - PENDING_DEACTIVATION
                - PENDING_ACTIVATION
                - ACTIVE
                - INACTIVE
                - UNDER_REVIEW
                - REQUESTED
              description: codec for valid connection statuses
        - name: orderBy
          in: query
          required: true
          schema:
            type: string
            enum:
              - description
              - connectionType
              - createdAt
              - updatedAt
        - name: orderDirection
          in: query
          required: true
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: name
          in: query
          schema:
            type: string
            minLength: 1
        - name: ownerWalletId
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionWithOwnerAndTargetListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/listing/{listingId}:
    put:
      summary: Update enterprise listing
      description: |-
        You can update the following:
        * Description of your enterprise listing.
        * Description of the target listing on connections you added from the directory.
        * Description and or name of the target listing name from connections you directly added by wallet ID.
      operationId: V1PutListingRoute
      tags:
        - Counterparties
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Description is always updatable
                  minLength: 1
                name:
                  type: string
                  description: The name of your listing that displays in the global directory. `editable` must be `true`
                  minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListingUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/listing/entry/{listingEntryId}:
    put:
      summary: Update Go Account entry
      description: Update your Go Account entry and `targetListingEntries` for your connections.
      operationId: V1PutListingEntryRoute
      tags:
        - Counterparties
      parameters:
        - name: listingEntryId
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                public:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListingEntryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/listing/entry/contacts:
    get:
      summary: List entry contacts
      description: List all your listing entries within your connections, grouped by listing entry.
      operationId: V1GetListingEntryContactsRoute
      tags:
        - Counterparties
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 50
        - name: offset
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 0
        - name: id
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: coin
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: entryType
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - GO_ACCOUNT
              description: codec for entry type
        - name: orderBy
          in: query
          required: true
          schema:
            type: string
            enum:
              - description
              - coin
              - entryType
              - createdAt
              - updatedAt
              - listing.name
        - name: orderDirection
          in: query
          required: true
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: name
          in: query
          schema:
            type: string
            minLength: 1
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListingEntryWithConnectionsListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/listing/entry/directory:
    get:
      summary: List entries available for connection
      description: List all entries in the public directory, including all your connections.
      operationId: V1GetListingEntryDirectoryRoute
      tags:
        - Counterparties
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 50
        - name: offset
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: number
                enum:
                  - 0
        - name: coin
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: entryType
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - GO_ACCOUNT
              description: codec for entry type
        - name: orderBy
          in: query
          required: true
          schema:
            type: string
            enum:
              - description
              - coin
              - entryType
              - createdAt
              - updatedAt
              - listing.name
        - name: orderDirection
          in: query
          required: true
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: featured
          in: query
          schema:
            type: boolean
        - name: savedContactsNotInDirectory
          in: query
          required: true
          schema:
            type: string
            enum:
              - only-included
              - included
              - excluded
        - name: name
          in: query
          schema:
            type: string
            minLength: 1
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DirectoryListingEntryWithConnectionsListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/listing/entry/global:
    post:
      summary: Create enterprise listing entry
      description: Create a listing entry for your enterprises Go Account.
      operationId: V1PostListingEntryRoute
      tags:
        - Counterparties
      parameters:
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                walletId:
                  type: string
                  minLength: 1
                description:
                  type: string
                  minLength: 1
                public:
                  type: boolean
              required:
                - walletId
                - public
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListingEntryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/address-book/v1/listing/global:
    get:
      summary: Get enterprise listing
      description: Get the enterprise listing and list all entries in the enterprise listing.
      operationId: V1GetListingRoute
      tags:
        - Counterparties
      parameters:
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GlobalListingWithListingEntries'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
    post:
      summary: Create enterprise listing
      description: |-
        Create a listing for your enterprise in the Go network.
        Once you create a listing for your enterprise, you can list your Go Account in the public directory.
      operationId: V1PostListingRoute
      tags:
        - Counterparties
      parameters:
        - name: enterprise-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
        - name: user-id
          in: header
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GlobalListingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/network/v1/enterprises/{enterpriseId}/clients:
    post:
      summary: Create client
      description: |-
        Create a new OES client for the specified enterprise. This endpoint allows enterprise users 
        to create a new client within the OES system, establishing the foundation for future trading 
        activities. The client will be automatically associated with the enterprise specified in the path 
        parameter.


        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or incomplete/
        - Examples: Empty string supplied for enterpriseId.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the user does not have permission to create a client for this enterprise.
        - Examples: Enterprise does not have OES license.

        - 500: Internal Server Error
        - Occurs when there's an unexpected error processing the request.
        - Examples: Database connection failure, transient network error.
      operationId: v1ClientsPostRoute
      tags:
        - Client Activation
      parameters:
        - name: enterpriseId
          description: Enterprise ID that this client will be associated with. The client will be created under this enterprise's context.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientsPostOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/allocations:
    get:
      summary: List client allocations and deallocations
      description: |-
        This API call allows clients to get a list of allocations and deallocations for any connected network account.
        or "deallocation" to view deallocations.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Empty string provided for enterpriseId, invalid UUID format for allocationId.
        invalid date format for createdOnOrAfter/createdBefore, invalid pagination parameters.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise..

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have access to the requested allocation.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified enterprise cannot be found.
        - Examples: Enterprise ID doesn't exist or doesn't belong to the client.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, error retrieving allocations data,
        error transforming allocation data for response.
      operationId: v1ClientAllocationsGetRoute
      tags:
        - Client Allocations & Deallocations
      parameters:
        - name: allocationIds
          description: Optional array of allocationIds. If provided will only return allocations/deallocations with those ids. allocationIds are unique identifiers (UUIDs) for allocations. UUIDs must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of allocationIds. If provided will only return allocations/deallocations with those ids. allocationIds are unique identifiers (UUIDs) for allocations. UUIDs must be submitted as a comma-separated string.
        - name: types
          description: Optional array of types. If provided will only return allocations/deallocations with those types. Types must be submitted as a comma-separated string. allocation = records for allocations to connections. deallocation = records for deallocations from connections.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - allocation
                - deallocation
              description: Optional array of types. If provided will only return allocations/deallocations with those types. Types must be submitted as a comma-separated string. allocation = records for allocations to connections. deallocation = records for deallocations from connections.
        - name: statuses
          description: Optional array of statuses. If provided will only return allocations/deallocations with those statuses. Statuses must be submitted as a comma-separated string. cleared = records for allocations that have been cleared. released = records for allocations that have been released. reserved = records for allocations that are still reserved.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - cleared
                - released
                - reserved
              description: Optional array of statuses. If provided will only return allocations/deallocations with those statuses. Statuses must be submitted as a comma-separated string. cleared = records for allocations that have been cleared. released = records for allocations that have been released. reserved = records for allocations that are still reserved.
        - name: currencies
          description: Optional array of currencies. If provided will only return allocations/deallocations with those currencies. Currencies must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              description: Optional array of currencies. If provided will only return allocations/deallocations with those currencies. Currencies must be submitted as a comma-separated string.
        - name: connectionIds
          description: Optional array of connectionIds. If provided will only return allocations/deallocations for those connectionIds. ConnectionIds must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of connectionIds. If provided will only return allocations/deallocations for those connectionIds. ConnectionIds must be submitted as a comma-separated string.
        - name: partnerIds
          description: Optional array of partnerIds. If provided will only return allocations/deallocations for those partnerIds. PartnerIds must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of partnerIds. If provided will only return allocations/deallocations for those partnerIds. PartnerIds must be submitted as a comma-separated string.
        - name: createdOnOrAfter
          description: Optional date start range filter for createdAt (ISO Date). If provided will only return allocations/deallocations created on or after this date. This date should be in ISO 8601 format (e.g., "2023-01-01T00:00:00Z").
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: createdBefore
          description: Optional date end range filter for createdAt (ISO Date). If provided will only return allocations/deallocations created on or before this date. This date should be in ISO 8601 format (e.g., "2023-01-01T00:00:00Z").
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: sortField
          description: 'The field to sort results on. Possible values: - id: Sort by allocation ID. - updatedAt: Sort by the last updated timestamp. - quantity: Sort by the allocation amount quantity. - currency: Sort by the allocation currency code. Note: A finals sort is always applied on createdAt ascending and id ascending, regardless of the specified sortField. This ensures consistent ordering for items with the same primary sort value.'
          in: query
          schema:
            type: string
            enum:
              - id
              - updatedAt
              - quantity
              - currency
        - name: sortDirection
          description: 'The direction to sort results. Possible values: - ASC: Ascending order (lowest to highest, A to Z, oldest to newest). - DESC: Descending order (highest to lowest, Z to A, newest to oldest). If not specified, defaults to ASC (ascending).'
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AllocationsGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/allocations/{allocationId}:
    get:
      summary: Get client allocation or deallocation
      description: |-
        Returns an allocation or deallocation. For use only by OES clients.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or incomplete.
        - Examples: Invalid UUID format for allocationId, invalid enterpriseId format.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have access to the requested allocation
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the requested allocation does not exist for this client
        - Examples: Allocation with specified ID doesn't exist, allocation exists but belongs to different client

        - 500: Internal Server Error
        - Occurs when there's an unexpected error processing the request
        - Examples: Database connection failure, currency mapping error,
        error transforming allocation data for response
      operationId: v1ClientAllocationGetRoute
      tags:
        - Client Allocations & Deallocations
      parameters:
        - name: allocationId
          description: The unique identifier of the allocation to retrieve. This is a UUID that uniquely identifies the allocation record.
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the allocation.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AllocationGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/balances:
    get:
      summary: List client balances
      description: |-
        This API call allows clients to get trading and allocated balances at BitGo for any connected trading partner.
        The trading balances are live data. The data under networkBalances are not the live balances at the partner,
        the live balances should be viewed on the partner's platform.
        networkBalances will only update as a result of allocations, deallocations, and settlement.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed
        - Examples: Invalid UUID format for enterpriseId, invalid filter parameters,
        invalid pagination parameters, invalid connection or partner IDs

        - 401: Authentication Error
        - Occurs when the request is not authorized
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions
        - Examples: Client doesn't have permission to view balances. Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified enterprise or resources cannot be found
        - Examples: Enterprise doesn't exist.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request
        - Examples: Database connection issues, transient network errors,
      operationId: v1ClientBalancesGetRoute
      tags:
        - Client Balances
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: connectionIds
          description: 'Optional array of connection IDs to filter by. If provided: - Only balances for connections with these specific IDs will be returned. - Useful for monitoring specific trading relationships or connections. - Can be used to focus on particular allocation targets. If omitted, results will include data for all your connections subject to other filters.'
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: 'Optional array of connection IDs to filter by. If provided: - Only balances for connections with these specific IDs will be returned. - Useful for monitoring specific trading relationships or connections. - Can be used to focus on particular allocation targets. If omitted, results will include data for all your connections subject to other filters.'
        - name: partnerIds
          description: 'Optional array of partner IDs to filter by. If provided: - Only balances for connections to partners with these IDs will be returned. - Useful for focusing on balances with specific partner organizations. - Can be used to monitor exposure to particular partners. If omitted, results will include data for connections to all partners.'
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: 'Optional array of partner IDs to filter by. If provided: - Only balances for connections to partners with these IDs will be returned. - Useful for focusing on balances with specific partner organizations. - Can be used to monitor exposure to particular partners. If omitted, results will include data for connections to all partners.'
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the allocation.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientBalancesGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/connections:
    get:
      summary: List client connections
      description: |-
        List all your Go network connections. For use only by OES clients.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for enterpriseId, invalid filter parameters,
        invalid pagination parameters, invalid partner IDs.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Missing or invalid auth token, expired credentials.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Client not authorized for this enterprise, client doesn't have
        permission to view connections.

        - 404: Not Found Error
        - Occurs when the specified enterprise cannot be found.
        - Examples: Enterprise ID doesn't exist or doesn't belong to the client.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, error retrieving connection data.
      operationId: v1ClientConnectionsGetRoute
      tags:
        - Client Activation
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: active
          in: query
          schema:
            type: boolean
        - name: connectionIds
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: names
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: partnerIds
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionsGetOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
    post:
      summary: Connect to partner
      description: |-
        Connect your OES client account to an OES partner account, enabling you to
        trade funds that you have custodied with BitGo. You must have an account on the partner's site.
        Clients can have multiple connections to the same partner.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for enterpriseId or partnerId, missing required fields,
        invalid payload format, invalid signature, payload doesn't match request data.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise. Payload/Signature are not valid.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified resources cannot be found.
        - Examples: Enterprise ID doesn't exist, specified partner ID doesn't exist.

        - 422: Unprocessable Content Error
        - Occurs when the request is valid but cannot be processed due to business rules.
        - Examples: Invalid connection key schema for partner, unsupported key schema,
        partner is inactive, client and partner belong to different trust organizations.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues. Transient network errors,
      operationId: v1ClientConnectionsPostRoute
      tags:
        - Client Activation
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                partnerId:
                  type: string
                  title: uuid
                name:
                  type: string
                  minLength: 1
                connectionKey:
                  $ref: '#/components/schemas/ConnectionKey'
                nonce:
                  type: string
                  minLength: 1
                payload:
                  type: string
                  minLength: 1
                signature:
                  type: string
                  minLength: 1
              required:
                - partnerId
                - name
                - connectionKey
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/connections/{connectionId}:
    get:
      summary: Get Client Connection
      description: |-
        Returns an OES connection by its connection ID. For use only by OES clients.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed
        - Examples: Invalid UUID format for connectionId, invalid enterpriseId format

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified connection cannot be found.
        - Examples: Connection ID doesn't exist, connection doesn't belong to this client.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, transient network errors.
      operationId: v1ClientConnectionGetRoute
      tags:
        - Client Activation
      parameters:
        - name: connectionId
          description: The unique identifier of the connection to retrieve. This UUID uniquely identifies the connection between a client and partner.
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the connection.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
    put:
      summary: Update Client Connection
      description: |-
        Update a OES connection by its connection ID. For use only by OES clients.
        Allows clients to modify connection properties such as name or active status.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for connectionId, invalid enterpriseId format,
        malformed request body.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified connection cannot be found.
        - Examples: Connection ID doesn't exist, connection doesn't belong to this client.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, transient network errors.
      operationId: v1ClientConnectionPutRoute
      tags:
        - Client Activation
      parameters:
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the connection.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: connectionId
          description: The unique identifier of the connection to update. This UUID uniquely identifies the connection between a client and a partner.
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                active:
                  type: boolean
                  description: Whether the connection is active. When set to false, the connection is deactivated and cannot be allocated to until it is activated again (deallocations can still occur). When set to true, the connection is activated can be allocated to again.
                name:
                  type: string
                  description: A user-friendly name for the connection. Allows clients to provide a descriptive label for this particular connection.
                  minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/connections/{connectionId}/allocations:
    post:
      summary: Allocate funds to partner connection
      description: |-
        This API call allows clients to allocate funds to a connected partner for trade.
        A successful allocation indicates that funds are locked at BitGo and available for spend on the connected partner.
        Note: Allocations will happen synchronously and allocated amounts can be viewed in the
        BitGo application or via a balances endpoint.
      operationId: V1ClientAllocationsPostRoute
      tags:
        - Client Allocations & Deallocations
      parameters:
        - name: connectionId
          description: 'The unique identifier of the connection you want to allocate funds to. This connection: - Must be a valid, established connection between your enterprise and a partner. - Determines where the allocated funds will be available for use. - Should be pre-established before attempting to allocate funds.'
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterpriseId
          description: 'The unique identifier of your enterprise. This identifier: - Represents your organization within the BitGo system. - Is used to validate you have permission to perform this action. - Must match the enterprise associated with your API credentials.'
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  allOf:
                    - $ref: '#/components/schemas/PositiveBNCurrencyAmount'
                  description: The amount to allocate in base units. Contains both the currency identifier and the quantity in the currency's base units. The exact base units depend on the currency (e.g., satoshis for BTC, wei for ETH).
                clientExternalId:
                  type: string
                  description: 'A unique external identifier for the allocation. This identifier: - Must be unique for each distinct allocation request. - Is used for idempotence to prevent duplicate allocations. - Allows clients to correlate allocations with their own systems. - Should be stored by the client for tracking and reconciliation.'
                  minLength: 1
                nonce:
                  type: string
                  description: 'Unique nonce to prevent replay attacks. This value: - Must be unique for each request requiring a nonce. - Should be a cryptographically strong random value. - Is used as part of the request signing process. - Helps ensure the signature can only be used once.'
                  minLength: 1
                notes:
                  type: string
                  description: 'Optional notes to attach to the allocation. These notes: - Can provide additional context about the purpose of the allocation. - Are stored with the allocation record. - May be useful for auditing, record-keeping, or operational purposes. - Are visible to both client and partner.'
                  minLength: 1
                payload:
                  type: string
                  description: 'Payload formed by stringifying the object containing all other request properties. This includes: - amount: The amount to allocate. - clientExternalId: Your unique identifier for this allocation. - nonce: A unique value to prevent replay attacks. - notes: Optional notes about the allocation. - connectionId: The connection to allocate funds to. - enterpriseId: Your enterprise ID. The payload must be signed using your BitGo account''s private key to create the signature parameter.'
                  minLength: 1
                signature:
                  type: string
                  description: 'Digital signature of the payload parameter. This signature: - Must be created using your BitGo account''s private key. - Verifies that the request is authentic and hasn''t been tampered with. - Provides non-repudiation for the allocation request.'
                  minLength: 1
              required:
                - amount
                - clientExternalId
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/V1AllocationsClearedPostPayload'
                  - $ref: '#/components/schemas/V1ReservedNonRetriableAllocationsPostPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AllocationsReleasedWithErrorPostPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ReservedAllocationOrErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/connections/{connectionId}/allocations/signing:
    get:
      summary: Get Signing Payload for Client Allocations
      description: This API call allows clients to get the client allocations payload for signing.
      operationId: v1ClientAllocationsSigningGetRoute
      tags:
        - Client Allocations & Deallocations
      parameters:
        - name: connectionId
          description: 'The unique identifier of the connection you want to allocate funds to. This connection: - Must be a valid, established connection between your enterprise and a partner. - Determines where the allocated funds will be available for use. - Should be pre-established before attempting to allocate funds.'
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterpriseId
          description: 'The unique identifier of your enterprise. This identifier: - Represents your organization within the BitGo system. - Is used to validate you have permission to perform this action. - Must match the enterprise associated with your API credentials.'
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  allOf:
                    - $ref: '#/components/schemas/PositiveBNCurrencyAmount'
                  description: The amount to allocate in base units. Contains both the currency identifier and the quantity in the currency's base units. The exact base units depend on the currency (e.g., satoshis for BTC, wei for ETH).
                clientExternalId:
                  type: string
                  description: 'A unique external identifier for the allocation. This identifier: - Must be unique for each distinct allocation request. - Is used for idempotence to prevent duplicate allocations. - Allows clients to correlate allocations with their own systems. - Should be stored by the client for tracking and reconciliation.'
                  minLength: 1
                nonce:
                  type: string
                  description: 'Unique nonce to prevent replay attacks. This value: - Must be unique for each request requiring a nonce. - Should be a cryptographically strong random value. - Is used as part of the request signing process. - Helps ensure the signature can only be used once.'
                  minLength: 1
                notes:
                  type: string
                  description: 'Optional notes to attach to the allocation. These notes: - Can provide additional context about the purpose of the allocation. - Are stored with the allocation record. - May be useful for auditing, record-keeping, or operational purposes. - Are visible to both client and partner.'
                  minLength: 1
              required:
                - amount
                - clientExternalId
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientAllocationsSigningGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/connections/{connectionId}/deallocations:
    post:
      summary: Deallocate Funds from Connection
      description: |-
        This API call allows clients to deallocate funds from a connected partner.
        A successful deallocation will unlock funds and ensure that they are available
        for actions (withdrawal/rebalancing) at BitGo.
        Note: Deallocations will happen synchronously and deallocated amounts can be viewed in the
        BitGo Application or via a balance endpoint.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for connectionId, invalid enterpriseId format,
        malformed request body, invalid signature format.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified connection cannot be found.
        - Examples: Connection ID doesn't exist, connection doesn't belong to this client.

        - 422: Deallocation Error with Released Status
        - Occurs when the deallocation cannot be processed due to business rules.
        - Examples: Insufficient funds available for deallocation, connection is inactive,
        deallocation amount exceeds available balance.

        - 500: Internal Server Error or Reserved Deallocation
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, transient network errors.
      operationId: V1ClientDeallocationsPostRoute
      tags:
        - Client Allocations & Deallocations
      parameters:
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the connection.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: connectionId
          description: The unique identifier of the connection to deallocate from. This UUID uniquely identifies the connection between a client and a partner.
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  allOf:
                    - $ref: '#/components/schemas/PositiveBNCurrencyAmount'
                  description: The amount to deallocate from the connection. Contains both the currency identifier and the quantity in base units.
                clientExternalId:
                  type: string
                  description: External identifier provided by the client. Used for idempotence and correlation with client systems.
                  minLength: 1
                nonce:
                  type: string
                  description: A unique nonce value used for cryptographic operations. This provides additional security for deallocation operations.
                  minLength: 1
                notes:
                  type: string
                  description: Optional notes provided by the client when creating the deallocation. Can contain additional context or information about the purpose of the deallocation.
                  minLength: 1
                payload:
                  type: string
                  description: 'Payload formed by stringifying the object containing all other request properties. This includes: - amount: The amount to deallocate. - clientExternalId: Your unique identifier for this deallocation. - nonce: A unique value to prevent replay attacks. - notes: Optional notes about the deallocation. - connectionId: The connection to deallocate funds from. - enterpriseId: Your enterprise ID. The payload must be signed using your BitGo account''s private key to create the signature parameter.'
                  minLength: 1
                signature:
                  type: string
                  description: 'Digital signature of the payload parameter. This signature: - Must be created using your BitGo account''s private key - Verifies that the request is authentic and hasn''t been tampered with - Provides non-repudiation for the deallocation request'
                  minLength: 1
              required:
                - amount
                - clientExternalId
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/V1DeallocationClearedPostPayload'
                  - $ref: '#/components/schemas/V1ReservedDeallocationsPostPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DeallocationReleasedWithErrorPostPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ReservedDeallocationOrErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/connections/{connectionId}/deallocations/signing:
    get:
      summary: Get Signing Payload for Client Deallocations
      description: |-
        This API call allows clients to get the client deallocations payload for signing.
        The returned payload should be cryptographically signed by the client and included
        in the subsequent deallocation request.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for connectionId, malformed request body.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified connection cannot be found.
        - Examples: Connection ID doesn't exist, connection doesn't belong to this client.

        - 422: Unprocessable Entity Error
        - Occurs when the request is valid but cannot be processed due to business rules.
        - Examples: Connection is inactive, requested currency not supported.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues.
      operationId: V1ClientDeallocationsSigningGetRoute
      tags:
        - Client Allocations & Deallocations
      parameters:
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the connection.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: connectionId
          description: The unique identifier of the connection to deallocate from. This UUID uniquely identifies the connection between a client and a partner.
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  allOf:
                    - $ref: '#/components/schemas/PositiveBNCurrencyAmount'
                  description: The amount to deallocate from the connection. Contains both the currency identifier and the quantity in base units.
                clientExternalId:
                  type: string
                  description: External identifier provided by the client. Used for idempotence and correlation with client systems.
                  minLength: 1
                nonce:
                  type: string
                  description: A unique nonce value used for cryptographic operations. This provides additional security for deallocation operations.
                  minLength: 1
                notes:
                  type: string
                  description: Optional notes provided by the client when creating the deallocation. Can contain additional context or information about the purpose of the deallocation.
                  minLength: 1
              required:
                - amount
                - clientExternalId
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientDeallocationsSigningGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/connections/signing:
    get:
      summary: Get Signing Payload for Client Connections
      description: |-
        This API call allows clients to get the client connections payload for signing.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed
        - Examples: Empty string provided for entepriseId, missing required fields in request body.

        - 401: Authentication Error
        - Occurs when the request is not authorized
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified resources cannot be found.
        - Examples: Enterprise ID doesn't exist, specified partner ID doesn't exist.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues. Transient network errors.
      operationId: V1ClientConnectionsSigningGetRoute
      tags:
        - Client Activation
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                partnerId:
                  type: string
                  title: uuid
                name:
                  type: string
                  minLength: 1
                connectionKey:
                  $ref: '#/components/schemas/ConnectionKey'
                nonce:
                  type: string
                  minLength: 1
              required:
                - partnerId
                - name
                - connectionKey
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientConnectionsSigningGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/settlement/disputes:
    get:
      summary: List Settlement Disputes for a Client
      description: This API call allows clients to list disputes associated with their settlements.
      operationId: listClientSettlementDisputes
      tags:
        - Settlement Disputes
      parameters:
        - name: settlementIds
          description: Optional array of settlement ids. If provided will only return disputes with a disputedSettlementId matching one of the provided settlementIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of settlement ids. If provided will only return disputes with a disputedSettlementId matching one of the provided settlementIds.
        - name: settledInSettlementIds
          description: Optional array of settlement ids. If provided will only return disputes with a settledInSettlementId matching one of the provided settlementIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of settlement ids. If provided will only return disputes with a settledInSettlementId matching one of the provided settlementIds.
        - name: connectionIds
          description: Optional array of connection ids. If provided will only return disputes with a connectionId matching one of the provided connectionIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of connection ids. If provided will only return disputes with a connectionId matching one of the provided connectionIds.
        - name: partnerIds
          description: Optional array of partner ids. If provided will only return disputes for settlements initiated by a partner with an id matching one of the provided partnerIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of partner ids. If provided will only return disputes for settlements initiated by a partner with an id matching one of the provided partnerIds.
        - name: closed
          description: Optional boolean value indicating whether to include only closed/open disputes in the response. If true is provided, only closed disputes will be returned. If false is provided, only open disputes will be returned. If not provided, all disputes will be returned.
          in: query
          schema:
            type: boolean
        - name: disputeIds
          description: Optional array of disputeIds. If provided will only return disputes with an id matching one of the provided disputeIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of disputeIds. If provided will only return disputes with an id matching one of the provided disputeIds.
        - name: disputeClosureIds
          description: Optional array of disputeClosureIds. If provided will only return disputes with a disputeClosureId matching one of the provided disputeClosureIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of disputeClosureIds. If provided will only return disputes with a disputeClosureId matching one of the provided disputeClosureIds.
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the allocation.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DisputesWithClosureWithTransfersOutput'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/settlements:
    get:
      summary: List Client Settlements
      description: |-
        This API call allows clients to get a list of settlements that involve their accounts and their metadata.
        Results can be filtered by various parameters and are paginated.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format, invalid pagination parameters.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified enterprise cannot be found.
        - Examples: Enterprise ID doesn't exist.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, query errors.
      operationId: v1ClientSettlementsGetRoute
      tags:
        - Client Settlements & Transfers
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: settlementIds
          description: Filter by specific settlement IDs. When provided, only settlements matching these IDs will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific settlement IDs. When provided, only settlements matching these IDs will be returned.
        - name: onlyShowDisputed
          description: Filter to show only disputed settlements. When set to true, only settlements that have disputes will be returned. Setting to false will have no effect.
          in: query
          schema:
            type: boolean
        - name: partnerIds
          description: Filter by specific partner IDs. When provided, only settlements involving these partners will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific partner IDs. When provided, only settlements involving these partners will be returned.
        - name: partyConnectionIds
          description: Filter by specific party connection IDs. When provided, only settlements involving these connections as parties will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific party connection IDs. When provided, only settlements involving these connections as parties will be returned.
        - name: counterpartyConnectionIds
          description: Filter by specific counterparty connection IDs. When provided, only settlements involving these connections as counterparties will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific counterparty connection IDs. When provided, only settlements involving these connections as counterparties will be returned.
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListSettlementsOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/settlements/{settlementId}:
    get:
      summary: Get Client Settlement
      description: |-
        This API call allows clients to get a list of settlement transactions for any connected network account,
        for a specific settlement. The settlement and its metadata will be returned along with all
        related settlement transfers in and out of the clients’ network accounts.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for settlementId, invalid enterpriseId format.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated client doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified settlement cannot be found.
        - Examples: Settlement ID doesn't exist or the calling client isn't involved in the settlement.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues.
      operationId: v1ClientSettlementGetRoute
      tags:
        - Client Settlements & Transfers
      parameters:
        - name: currencies
          description: Filter by specific currencies. When provided, only settlement transfers involving these currencies will be included.
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by specific currencies. When provided, only settlement transfers involving these currencies will be included.
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: settlementId
          description: The unique identifier of the settlement to retrieve. This is a UUID that uniquely identifies the settlement record.
          in: path
          required: true
          schema:
            type: string
            title: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientGetSettlementOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/settlements/{settlementId}/disputes:
    post:
      summary: Dispute a Settlement
      description: This API call allows clients to dispute a settlement (if within the dispute window).
      operationId: createClientSettlementDispute
      tags:
        - Settlement Disputes
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: settlementId
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                connectionId:
                  type: string
                  title: uuid
                reason:
                  type: string
                expectedTransfers:
                  $ref: '#/components/schemas/ExpectedTransfersRequest'
                payload:
                  type: string
                  minLength: 1
                signature:
                  type: string
                  minLength: 1
                nonce:
                  type: string
                  minLength: 1
              required:
                - connectionId
                - expectedTransfers
                - payload
                - signature
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DisputePayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/settlements/disputes/{disputeId}:
    put:
      summary: Update a Settlement Dispute
      description: This API call allows clients to retract or un-retract a dispute (if within the dispute window).
      operationId: updateClientSettlementDispute
      tags:
        - Settlement Disputes
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: disputeId
          description: The unique identifier of the dispute you want to update.
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                connectionId:
                  type: string
                  description: The unique identifier of the connection under which the dispute was created.
                  title: uuid
                retracted:
                  type: boolean
                  description: Retraction state you wish to update to. - if true is supplied, your dispute will transition to a retracted state and the settlement transfers will be executed at the time of settlement provided it remains in a retracted state. - if false is supplied, your dispute will transition to a non-retracted state and the settlement transfers will not be executed at the time of settlement provided it remains in an non-retracted state.
                reason:
                  type: string
                  description: The optional reason for retracting/un-retracting. If retracting, the reason will be persisted and returned in the retractionReason field on the disptue object. If un-retracting, the reason will be persisted and returned in the reason field on the dispute object.
                  minLength: 1
                expectedTransfers:
                  type: object
                  additionalProperties:
                    type: string
                  description: Optional object representing the transfers you expected to be included in the settlement that this dispute is assiciated with. If provided, the expectedTransfers property on the dispute will be updated based on the provided value. The object is represented as a record where the keys are currency identifiers and the values are the amounts you expected to be transacted for the associated currency represented in base units of the currency (i.e. sats for BTC, wei for ETH. A positive amount indicates that you expected to receive that amount of the associated currency, where a negative amount indicates that you expected to send that amount of the associated currencies. Zero values are not accepted; if you didn't expect to send or recieve a given currency, simply omit that currency from the expectedTransfers object.
                payload:
                  type: string
                  description: Payload formed by stringifying the object containing all request body properties and the disputeId & settlementId parameters. The payload must be signed using your BitGo account's private key to create the signature parameter.
                  minLength: 1
                signature:
                  type: string
                  description: 'Digital signature of the payload parameter. This signature: - Must be created using your BitGo account''s private key. - Verifies that the request is authentic and hasn''t been tampered with. - Provides non-repudiation for the allocation request.'
                  minLength: 1
                nonce:
                  type: string
                  description: 'Unique nonce to prevent replay attacks. This value: - Must be unique for each request requiring a nonce. - Should be a cryptographically strong random value. - Is used as part of the request signing process. - Helps ensure the signature can only be used once.'
                  minLength: 1
              required:
                - connectionId
                - retracted
                - payload
                - signature
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DisputePayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/settlements/disputes/{disputeId}/close:
    post:
      summary: Close a dispute
      description: |-
        Close a dispute for cases when their dispute is invalid. 
        If the dispute was valid and instructions need to be adjusted then a bitgo admin will need to close it.
      operationId: V1ClientSettlementDisputeClosurePostRoute
      tags:
        - Settlement Disputes
      parameters:
        - name: enterpriseId
          description: The enterprise identifier of the client. This identifies the client enterprise that owns the allocation.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: disputeId
          description: The unique identifier of the dispute to be closed. This is a UUID that uniquely identifies the dispute record.
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: string
                  description: 'Payload formed by stringifying the object containing all other request properties. This includes: - enterpriseId - disputeId - notes - nonce The payload must be signed using your BitGo account''s private key to create the signature parameter.'
                  minLength: 1
                signature:
                  type: string
                  description: 'Digital signature of the payload parameter. This signature: - Must be created using your BitGo account''s private key. - Verifies that the request is authentic and hasn''t been tampered with. - Provides non-repudiation for the allocation request.'
                  minLength: 1
                notes:
                  type: string
                  description: Notes for why the dispute is being closed with the original settlement transfers
                  minLength: 1
                nonce:
                  type: string
                  description: 'Unique nonce to prevent replay attacks. This value: - Must be unique for each request requiring a nonce. - Should be a cryptographically strong random value. - Is used as part of the request signing process. - Helps ensure the signature can only be used once.'
                  minLength: 1
              required:
                - payload
                - signature
                - notes
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientDisputeClosurePayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/clients/settlementTransfers:
    get:
      summary: List client settlement transfers
      description: Lists all settlement transfers for your OES client account.
      operationId: v1ClientSettlementTransfersGetRoute
      tags:
        - Client Settlements & Transfers
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: currencies
          description: Optional array of currencies. If provided will only return settlement transfers with those currencies.
          in: query
          schema:
            type: array
            items:
              type: string
              description: Optional array of currencies. If provided will only return settlement transfers with those currencies.
        - name: initiatedBy
          description: Optional array of user ids. If provided will only return settlement transfers for settlements initiated by those users.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Optional array of user ids. If provided will only return settlement transfers for settlements initiated by those users.
        - name: partnerIds
          description: Optional array of partner ids. If provided will only return settlement transfers for settlements initiated by those partners.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of partner ids. If provided will only return settlement transfers for settlements initiated by those partners.
        - name: settlementIds
          description: Optional array of settlement ids. If provided will only return settlement transfers for settlements with those ids.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of settlement ids. If provided will only return settlement transfers for settlements with those ids.
        - name: settlementStatuses
          description: Optional array of settlement statuses. If provided will only return settlement transfers for settlements in those statuses.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - failed
                - completed
                - pending
                - rejected
              description: Optional array of settlement statuses. If provided will only return settlement transfers for settlements in those statuses.
        - name: settlementUpdatedBefore
          description: optional date start range filter for updatedAt (ISO 8601 Date). If provided will only return settlement transfers for settlements updated before the provided date.
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: settlementUpdatedOnOrAfter
          description: optional date start range filter for updatedAt (ISO 8601 Date). If provided will only return settlement transfers for settlements updated on or after the provided date.
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: sortField
          in: query
          schema:
            type: string
            enum:
              - updatedAt
        - name: sortDirection
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ClientGetSettlementTransfersOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners:
    get:
      summary: List Partners
      description: |-
        Lists all OES Partners associated with the specified enterprise. 
        Returns a collection of partners with information required to connect to them.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or incomplete.
        - Examples: Empty string supplied for enterpriseId.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have access to create a partner.
        - Examples: Enterprise does not have OES license.

        - 500: Internal Server Error
        - Occurs when there's an unexpected error processing the request
        - Examples: Database connection failure, transient network error.
      operationId: v1PartnersGetRoute
      tags:
        - Client Activation
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: ids
          description: Filter by specific partner IDs. When provided, only partners with these IDs will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific partner IDs. When provided, only partners with these IDs will be returned.
        - name: names
          description: Filter by partner names. When provided, only partners with these names will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Filter by partner names. When provided, only partners with these names will be returned.
        - name: institutionIds
          description: Filter by institution IDs. When provided, only partners linked to these institutions will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by institution IDs. When provided, only partners linked to these institutions will be returned.
        - name: institutionIdentifiers
          description: Filter by institution identifiers. When provided, only partners with these institution identifiers will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Filter by institution identifiers. When provided, only partners with these institution identifiers will be returned.
        - name: active
          description: Filter by active status. When true, only active partners will be returned. When false, only inactive partners will be returned. When not provided, partners of any status will be returned.
          in: query
          schema:
            type: boolean
        - name: filterByTrustOrg
          description: Filter by trust organization. When provided, only partners belonging to this trust organization will be returned.
          in: query
          schema:
            type: boolean
        - name: enterpriseId
          description: The enterprise ID of the client making the request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnersGetOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
    post:
      summary: Create Partner
      description: |-
        Create a new OES Partner. This endpoint allows enterprise users to add themselves as a partner in OES for 
        clients to connect to.


        Before calling this endpoint, a configuration for the partner must exist.

        If a config is not present for the partner, the request will fail with a 422 error.

        To initiate the creation of a partner config, please reach out to the
        Go Network Engineering team at: go-network-eng@bitgo.com.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or incomplete.
        - Examples: Empty string supplied for enterpriseId, invalid connection key schema.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have access to create a partner.
        - Examples: Enterprise does not have OES license.

        - 422: Unprocessable Entity Error
        - Returned when a required partner configuration is missing.
        - Examples: Partner configuration is missing.

        - 500: Internal Server Error
        - Occurs when there's an unexpected error processing the request
        - Examples: Database connection failure, transient network error.
      operationId: v1PartnersPostRoute
      tags:
        - Onboarding
      parameters:
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the partner. This identifies the partner in the BitGo system and will be displayed in the UI.
                  minLength: 1
                broker:
                  type: boolean
                  description: Indicates whether the partner is a broker. If true, the partner can facilitate trading between clients. If false, the partner acts as an exchange with its own trading accounts.
                institutionId:
                  type: string
                  description: Optional UUID for the partner's institution record. Links the partner to an institution in the BitGo system.
                  title: uuid
                institutionIdentifier:
                  type: string
                  description: Optional external identifier for the partner's institution. Provides an alternative way to identify the institution.
                  minLength: 1
                connectionKeySchema:
                  allOf:
                    - $ref: '#/components/schemas/PartnerConnectionKeySchema'
                  description: The key schema used for partner connections. Defines the structure and validation rules for connection keys.
                clientDisputeWindowMinutes:
                  type: number
                  description: Optional window (in minutes) for clients to dispute settlements. Defines how long after a settlement clients have to raise disputes. Null means no dispute window is configured.
                topUpWindowMinutes:
                  type: number
                  description: Optional window (in minutes) for topping up settlements. Defines the period during which a settlement can be topped up. Null means no top-up window is configured.
              required:
                - name
                - broker
                - connectionKeySchema
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnersPostOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/allocations:
    get:
      summary: List partner allocations and deallocations
      description: Lists all allocations and deallocations. For use only by OES partners.
      operationId: v1PartnerAllocationsGetRoute
      tags:
        - Partner Allocations & Deallocations
      parameters:
        - name: allocationIds
          description: Optional array of allocationIds. allocationIds are unique identifiers (UUIDs) for allocations. If UUIDs are provided, only allocations/deallocations with those UUIDs are returned. UUIDs must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of allocationIds. allocationIds are unique identifiers (UUIDs) for allocations. If UUIDs are provided, only allocations/deallocations with those UUIDs are returned. UUIDs must be submitted as a comma-separated string.
        - name: types
          description: Optional array of types. If types are provided, only allocations/deallocations with those types are returned. Types must be submitted as a comma-separated string. allocation = records for allocations to connections. deallocation = records for deallocations from connections.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - allocation
                - deallocation
              description: Optional array of types. If types are provided, only allocations/deallocations with those types are returned. Types must be submitted as a comma-separated string. allocation = records for allocations to connections. deallocation = records for deallocations from connections.
        - name: statuses
          description: Optional array of statuses. If statuses are provided, only allocations/deallocations with those statuses are returned. Statuses must be submitted as a comma-separated string. cleared = records for allocations that have been cleared. released = records for allocations that have been released. reserved = records for allocations that are still reserved.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - cleared
                - released
                - reserved
              description: Optional array of statuses. If statuses are provided, only allocations/deallocations with those statuses are returned. Statuses must be submitted as a comma-separated string. cleared = records for allocations that have been cleared. released = records for allocations that have been released. reserved = records for allocations that are still reserved.
        - name: currencies
          description: Optional array of partner mapped currencies. If currencies are provided, only allocations/deallocations with those currencies are returned. Currencies must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Optional array of partner mapped currencies. If currencies are provided, only allocations/deallocations with those currencies are returned. Currencies must be submitted as a comma-separated string.
        - name: connectionIds
          description: Optional array of connectionIds. If connectionIds are provided, only allocations/deallocations for those connectionIds are returned. ConnectionIds must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of connectionIds. If connectionIds are provided, only allocations/deallocations for those connectionIds are returned. ConnectionIds must be submitted as a comma-separated string.
        - name: partnerIds
          description: Optional array of partnerIds. If partnerIds are provided, only allocations/deallocations for those partnerIds are returned. PartnerIds must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of partnerIds. If partnerIds are provided, only allocations/deallocations for those partnerIds are returned. PartnerIds must be submitted as a comma-separated string.
        - name: clientIds
          description: Optional array of clientIds. If clientIds are provided, only allocations/deallocations for those clientIds are returned. ClientIds must be submitted as a comma-separated string.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of clientIds. If clientIds are provided, only allocations/deallocations for those clientIds are returned. ClientIds must be submitted as a comma-separated string.
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: sortField
          description: 'The field to sort results on. Possible values: - id: Sort by allocation ID. - updatedAt: Sort by the last updated timestamp. - quantity: Sort by the allocation amount quantity. Note: A final sort is always applied on createdAt ascending and id ascending, regardless of the specified sortField. This ensures consistent ordering for items with the same primary sort value.'
          in: query
          schema:
            type: string
            enum:
              - id
              - updatedAt
              - quantity
        - name: sortDirection
          description: 'The direction to sort results. Possible values: - ASC: Ascending order (lowest to highest, A to Z, oldest to newest) - DESC: Descending order (highest to lowest, Z to A, newest to oldest) If not specified, defaults to ASC (ascending).'
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AllocationsGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
    put:
      summary: Update Partner Allocations
      description: |-
        This API call allows partners to inform the OES system about an update to an allocation made to one of 
        their connections. This endpoint is only relevant to OES partners that have async allocations enabled.

        A successful response indicates that the allocation was successfully updated in the OES system and the funds 
        are cleared (if cleared is passed for status) or released (if released is passed for status).
      operationId: v1PartnerAllocationsPutRoute
      tags:
        - Partner Allocations & Deallocations
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                allocationId:
                  type: string
                  description: The unique identifier of the allocation to update. This UUID uniquely identifies the allocation record.
                  title: uuid
                amount:
                  allOf:
                    - $ref: '#/components/schemas/PositivePartnerCurrencyAmount'
                  description: The currency/quantity the allocation was made in. This is a base unit amount. The exact base units depend on the currency (e.g., satoshis for BTC, wei for ETH).
                clientId:
                  type: string
                  description: The unique identifier of the client associated with the allocation. This UUID uniquely identifies the client within the BitGo system.
                  title: uuid
                connectionId:
                  type: string
                  description: The unique identifier of the connection associated with the allocation. This UUID uniquely identifies the connection between a client and a partner.
                  title: uuid
                partnersClientId:
                  type: string
                  description: The unique identifier of the client in the partner system. This value uniquely identifies the client within the partner's system.
                  minLength: 1
                partnersConnectionId:
                  type: string
                  description: The unique identifier of the connection in the partner system. This value uniquely identifies the connection between a client and a partner in the partner's system.
                  minLength: 1
                partnersAllocationId:
                  type: string
                  description: The unique identifier of the allocation in the partner system. This value uniquely identifies the allocation record within the partner's system.
                  minLength: 1
                status:
                  allOf:
                    - $ref: '#/components/schemas/PartnerAllocationStatusUpdate'
                  description: The status to update the allocation to. The status can be either 'cleared' or 'released'. If the status is 'released', a reason for the release must be provided in the form of a non-empty string.
                nonce:
                  type: string
                  description: 'Unique nonce to prevent replay attacks. This value: - Must be unique for each request requiring a nonce. - Should be a cryptographically strong random value. - Is used as part of the request signing process. - Helps ensure the signature can only be used once.'
                  minLength: 1
                rejectReason:
                  type: string
                  description: The reason for releasing the allocation.
                  minLength: 1
                payload:
                  type: string
                  description: 'Payload formed by stringifying the object containing all other request properties. This includes: - status - rejectReason (only if status is ''released'') - allocationId - amount - clientId - connectionId - partnersClientId - partnersConnectionId - partnersAllocationId - nonce The payload must be signed using your BitGo account''s private key to create the signature parameter.'
                  minLength: 1
                signature:
                  type: string
                  description: 'Digital signature of the payload parameter. This signature: - Must be created using your BitGo account''s private key. - Verifies that the request is authentic and hasn''t been tampered with. - Provides non-repudiation for the allocation request.'
                  minLength: 1
              required:
                - allocationId
                - amount
                - clientId
                - connectionId
                - partnersClientId
                - partnersConnectionId
                - partnersAllocationId
                - status
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerUpdateAllocationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/allocations/{allocationId}:
    get:
      summary: Get partner allocation or deallocation
      operationId: v1PartnerAllocationGetRoute
      tags:
        - Partner Allocations & Deallocations
      parameters:
        - name: allocationId
          description: The unique identifier of the allocation to retrieve. This is a UUID that uniquely identifies the allocation record.
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AllocationGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/balances:
    get:
      summary: List partner balances
      description: |-
        Lists all your OES balances. For use only by OES partners.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed
        - Examples: Invalid UUID format for enterpriseId, invalid filter parameters,
        invalid pagination parameters

        - 401: Authentication Error
        - Occurs when the request is not authorized
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions
        - Examples: Partner doesn't have permission to view balances. Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified enterprise cannot be found
        - Examples: Enterprise ID doesn't exist or doesn't belong to the partner

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request
        - Examples: Database connection issues, transient network errors.
      operationId: v1PartnerBalancesGetRoute
      tags:
        - Partner Balances
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: partnerIds
          description: 'Optional array of partner IDs to filter by. If provided: - Only balances for partners with these IDs will be returned. - Only connections to these partners will be included. - Useful when a partner has multiple partner entities and wants to filter results. If omitted, results will include data for all partners the requester has access to.'
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: 'Optional array of partner IDs to filter by. If provided: - Only balances for partners with these IDs will be returned. - Only connections to these partners will be included. - Useful when a partner has multiple partner entities and wants to filter results. If omitted, results will include data for all partners the requester has access to.'
        - name: clientIds
          description: 'Optional array of client IDs to filter by. If provided: - Only balances for clients with these IDs will be returned. - Useful for filtering results to specific client relationships. If omitted, results will include data for all clients connected to the partner.'
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: 'Optional array of client IDs to filter by. If provided: - Only balances for clients with these IDs will be returned. - Useful for filtering results to specific client relationships. If omitted, results will include data for all clients connected to the partner.'
        - name: connectionIds
          description: 'Optional array of connection IDs to filter by. If provided: - Only balances for connections with these specific IDs will be returned. - Useful for querying balances for specific connections. If omitted, results will include data for all connections subject to other filters.'
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: 'Optional array of connection IDs to filter by. If provided: - Only balances for connections with these specific IDs will be returned. - Useful for querying balances for specific connections. If omitted, results will include data for all connections subject to other filters.'
        - name: partnersConnectionIds
          description: 'Optional array of partner connection IDs to filter by. If provided: - Only balances for connections with these partner-specific IDs will be returned. - These are the IDs that partners use in their own systems to identify connections. - Useful when partners want to look up balances using their own identifiers. If omitted, results will include data for all connections subject to other filters.'
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: 'Optional array of partner connection IDs to filter by. If provided: - Only balances for connections with these partner-specific IDs will be returned. - These are the IDs that partners use in their own systems to identify connections. - Useful when partners want to look up balances using their own identifiers. If omitted, results will include data for all connections subject to other filters.'
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerBalancesGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/connections:
    get:
      summary: List Partner Connections
      description: |-
        Returns all your OES connections. For use only by OES partners.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Empty string provided for enterpriseId. Invalid query values.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified enterprise cannot be found.
        - Examples: Enterprise ID doesn't exist or doesn't belong to the partner.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, error retrieving connection data.
      operationId: v1PartnerConnectionsGetRoute
      tags:
        - Partner Activation
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: active
          in: query
          schema:
            type: boolean
        - name: clientIds
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: connectionIds
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: partnersClientIds
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: partnersConnectionIds
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: partnerIds
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionsGetOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/connections/{connectionId}:
    get:
      summary: Get Partner Connection
      description: |-
        Returns an OES connection by its connection ID. For use only by OES partners.
        This endpoint allows partners to view connection details and status.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for connectionId, invalid enterpriseId format.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified connection cannot be found.
        - Examples: Connection ID doesn't exist, connection doesn't belong to this partner.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, transient network errors.
      operationId: v1PartnerConnectionGetRoute
      tags:
        - Partner Activation
      parameters:
        - name: connectionId
          description: The unique identifier of the connection to retrieve. This UUID uniquely identifies the connection between a client and a partner.
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ConnectionPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/deallocations:
    put:
      summary: Update Partner Deallocations
      description: |-
        This API call allows partners to inform the OES system about an update to a deallocation made to one of 
        their connections. This endpoint is only relevant to OES partners that have async deallocations enabled.

        A successful response indicates that the allocation was successfully updated in the OES system and the funds 
        are cleared (if cleared is passed for status) or released (if released is passed for status).
      operationId: V1PartnerDeallocationsPutRoute
      tags:
        - Partner Allocations & Deallocations
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deallocationId:
                  type: string
                  description: The unique identifier of the deallocation to update. This UUID uniquely identifies the deallocation record.
                  title: uuid
                amount:
                  allOf:
                    - $ref: '#/components/schemas/PositivePartnerCurrencyAmount'
                  description: The currency/quantity that was submitted for deallocation. This is a base unit amount. The exact base units depend on the currency (e.g., satoshis for BTC, wei for ETH).
                clientId:
                  type: string
                  description: The unique identifier of the client which initiated the deallocation. This UUID uniquely identifies the client within the BitGo system.
                  title: uuid
                connectionId:
                  type: string
                  description: The unique identifier of the connection to deallocate from. This UUID uniquely identifies the connection between a client and a partner.
                  title: uuid
                partnersClientId:
                  type: string
                  description: The unique identifier of the client in the partner system. This value uniquely identifies the client within the partner's system.
                  minLength: 1
                partnersConnectionId:
                  type: string
                  description: The unique identifier of the connection in the partner system. This value uniquely identifies the connection between a client and a partner in the partner's system.
                  minLength: 1
                partnersDeallocationId:
                  type: string
                  description: The unique identifier of the deallocation in the partner system. This value uniquely identifies the deallocation record within the partner's system.
                  minLength: 1
                status:
                  allOf:
                    - $ref: '#/components/schemas/PartnerAllocationStatusUpdate'
                  description: The status to update the deallocation to. The status can be either 'cleared' or 'released'. If the status is 'released', a reason for the release must be provided in the form of a non-empty string.
                nonce:
                  type: string
                  description: 'Unique nonce to prevent replay attacks. This value: - Must be unique for each request requiring a nonce. - Should be a cryptographically strong random value. - Is used as part of the request signing process. - Helps ensure the signature can only be used once.'
                  minLength: 1
                rejectReason:
                  type: string
                  description: The reason for releasing the deallocation.
                  minLength: 1
                payload:
                  type: string
                  description: 'Payload formed by stringifying the object containing all other request properties. This includes: - status - rejectReason (only if status is ''released'') - deallocationId - amount - clientId - connectionId - partnersClientId - partnersConnectionId - partnersDeallocationId - nonce The payload must be signed using your BitGo account''s private key to create the signature parameter.'
                  minLength: 1
                signature:
                  type: string
                  description: 'Digital signature of the payload parameter. This signature: - Must be created using your BitGo account''s private key. - Verifies that the request is authentic and hasn''t been tampered with. - Provides non-repudiation for the allocation request.'
                  minLength: 1
              required:
                - deallocationId
                - amount
                - clientId
                - connectionId
                - partnersClientId
                - partnersConnectionId
                - partnersDeallocationId
                - status
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerUpdateDeallocationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlement/disputes:
    get:
      summary: List Settlement Disputes for a Partner
      description: This API call allows partners to list disputes associated with their settlements.
      operationId: listPartnerSettlementDisputes
      tags:
        - Settlement Disputes
      parameters:
        - name: settlementIds
          description: Optional array of settlement ids. If provided will only return disputes with a disputedSettlementId matching one of the provided settlementIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of settlement ids. If provided will only return disputes with a disputedSettlementId matching one of the provided settlementIds.
        - name: settledInSettlementIds
          description: Optional array of settlement ids. If provided will only return disputes with a settledInSettlementId matching one of the provided settlementIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of settlement ids. If provided will only return disputes with a settledInSettlementId matching one of the provided settlementIds.
        - name: connectionIds
          description: Optional array of connection ids. If provided will only return disputes with a connectionId matching one of the provided connectionIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of connection ids. If provided will only return disputes with a connectionId matching one of the provided connectionIds.
        - name: partnerIds
          description: Optional array of partner ids. If provided will only return disputes for settlements initiated by a partner with an id matching one of the provided partnerIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of partner ids. If provided will only return disputes for settlements initiated by a partner with an id matching one of the provided partnerIds.
        - name: closed
          description: Optional boolean value indicating whether to include only closed/open disputes in the response. If true is provided, only closed disputes will be returned. If false is provided, only open disputes will be returned. If not provided, all disputes will be returned.
          in: query
          schema:
            type: boolean
        - name: disputeIds
          description: Optional array of disputeIds. If provided will only return disputes with an id matching one of the provided disputeIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of disputeIds. If provided will only return disputes with an id matching one of the provided disputeIds.
        - name: disputeClosureIds
          description: Optional array of disputeClosureIds. If provided will only return disputes with a disputeClosureId matching one of the provided disputeClosureIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of disputeClosureIds. If provided will only return disputes with a disputeClosureId matching one of the provided disputeClosureIds.
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: settlementExternalIds
          description: Optional array of settlement externalIds. If provided will only return disputes with a disputedSettlementId of a settlement with an externalId matching one of the provided settlementExternalIds.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Optional array of settlement externalIds. If provided will only return disputes with a disputedSettlementId of a settlement with an externalId matching one of the provided settlementExternalIds.
        - name: settledInSettlementExternalIds
          description: Optional array of settlement externalIds. If provided will only return disputes with a settledInSettlementId of a settlement with an externalId matching one of the provided settlementExternalIds.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Optional array of settlement externalIds. If provided will only return disputes with a settledInSettlementId of a settlement with an externalId matching one of the provided settlementExternalIds.
        - name: showRetracted
          description: Optional boolean value indicating whether to include only retracted disputes in the response. If true is provided, retracted and non-retracted disputes will be returned. If false is provided or not provided, only non-retracted disputes will be returned.
          in: query
          schema:
            type: boolean
        - name: clientIds
          description: Optional array of clientIds. If provided will only return disputes for settlements initiated by a client with an id matching one of the provided clientIds.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Optional array of clientIds. If provided will only return disputes for settlements initiated by a client with an id matching one of the provided clientIds.
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DisputesWithClosureWithTransfersOutput'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlements:
    get:
      summary: List Partner Settlements
      description: |-
        Lists all settlements for your OES partner account with filtering options.
        Results can be filtered by various parameters and are paginated.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format, invalid pagination parameters.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, query errors.
      operationId: v1PartnerSettlementsGetRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: settlementIds
          description: Filter by specific settlement IDs. When provided, only settlements matching these IDs will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific settlement IDs. When provided, only settlements matching these IDs will be returned.
        - name: onlyShowDisputed
          description: Filter to show only disputed settlements. When set to true, only settlements that have disputes will be returned. Setting to false will have no effect.
          in: query
          schema:
            type: boolean
        - name: partnerIds
          description: Filter by specific partner IDs. When provided, only settlements involving these partners will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific partner IDs. When provided, only settlements involving these partners will be returned.
        - name: partyConnectionIds
          description: Filter by specific party connection IDs. When provided, only settlements involving these connections as parties will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific party connection IDs. When provided, only settlements involving these connections as parties will be returned.
        - name: counterpartyConnectionIds
          description: Filter by specific counterparty connection IDs. When provided, only settlements involving these connections as counterparties will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific counterparty connection IDs. When provided, only settlements involving these connections as counterparties will be returned.
        - name: externalIds
          description: Filter by specific external IDs. When provided, only settlements with these external IDs will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Filter by specific external IDs. When provided, only settlements with these external IDs will be returned.
        - name: createdOnOrAfter
          description: 'Filter for settlements created on or after this date. Format: ISO 8601 date string.'
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: createdBefore
          description: 'Filter for settlements created before this date. Format: ISO 8601 date string.'
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: updatedOnOrAfter
          description: 'Filter for settlements updated on or after this date. Format: ISO 8601 date string.'
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: updatedBefore
          description: 'Filter for settlements updated before this date. Format: ISO 8601 date string.'
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListSettlementsOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
    post:
      summary: Perform Partner Settlement
      description: |-
        Partner route to perform a settlement. This endpoint allows partners without disputes enabled to create
        new settlements between client accounts, transferring funds according to the specified amounts.

        Please note that this endpoint cannot be used by partners with disputes enabled, instead use the 
        V2 Settlement endpoint. This is because dispute enabled partners must have an asyncronous settlement 
        process to allow clients time to review the settlement and reconcile liabilities agains their trading 
        activity on your platform. In the event that you cal this endpoint and you have disputes enabled, you 
        will recieve a 403 response.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid format for settlement amounts, missing required fields,
        invalid signature.

        - 401: Authentication Error or Incomplete Settlement
        - Occurs when the request is not authorized or cannot be completed immediately.
        - Examples: Caller is not a member of the enterprise, signature verification failed.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license, partner is enabled for disputes.

        - 409: Conflict Error
        - Occurs when the request conflicts with current state.
        - Examples: Settlement already exists with the same externalId and different properties.

        - 500: Internal Server Error or Incomplete Settlement
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, settlement initiated but not completed due to transient errors.
      operationId: v1PartnerSettlementsPostRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalId:
                  type: string
                  description: External identifier for the settlement request. This should be unique for each settlement request and is used for idempotence and correlation with partner systems.
                  minLength: 1
                notes:
                  type: string
                  description: Optional notes about the settlement. Can contain additional context or information about the purpose of the settlement.
                  minLength: 1
                settlementAmounts:
                  $ref: '#/components/schemas/UnmappedSettlementAmountsRecord'
                nonce:
                  type: string
                  description: A unique nonce value used for cryptographic operations. This provides additional security for settlement operations.
                  minLength: 1
                payload:
                  type: string
                  minLength: 1
                signature:
                  type: string
                  minLength: 1
              required:
                - externalId
                - settlementAmounts
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerSettlementOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerIncompleteSettlementOrErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerIncompleteSettlementOrErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlements-signing:
    get:
      summary: Get Signing Payload for Partner Settlement
      description: |-
        This API call allows partners to get the partner settlement payload for signing.
        The returned payload should be cryptographically signed by the partner and included
        in the subsequent settlement creation request.
      operationId: v1PartnerSettlementSigningGetRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Common payload properties for settlement requests.
              properties:
                externalId:
                  type: string
                  description: External identifier for the settlement request. This should be unique for each settlement request and is used for idempotence and correlation with partner systems.
                  minLength: 1
                notes:
                  type: string
                  description: Optional notes about the settlement. Can contain additional context or information about the purpose of the settlement.
                  minLength: 1
                settlementAmounts:
                  allOf:
                    - $ref: '#/components/schemas/SettlementAmountsRecord'
                  description: 'Contains instructions for the settlement. There are two options for the settlementAmounts record: - Connection liabilities - Expresses amounts owed to connections and owed by connections. - Structured as a Record<ConnectionId, Record<Currency, Amount>>. - Amount is either base units integer string or full units decimal string depending on partners configuration. - (+ amount for connection gain, - amount for connection loss) - Can be used by broker partners or exchange partners, however for broker partners the amounts for each currency must net to 0 (spread not yet supported). - Connection to connection liabilities - Expresses amounts each connection owes to one another. - Structured as a Record<ConnectionId, Record<ConnectionId, Record<Currency, Amount>>> - Amount is either base units integer string or full units decimal string depending on partners configuration. - (+ amount for connection gain, - amount for connection loss) This allows the API to handle both settlement patterns with a single type.'
                nonce:
                  type: string
                  description: A unique nonce value used for cryptographic operations. This provides additional security for settlement operations.
                  minLength: 1
              required:
                - externalId
                - settlementAmounts
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerSettlementsSigningGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlements/{settlementId}:
    get:
      summary: Get Partner Settlement
      description: |-
        Returns a settlement for your OES partner account by its ID.
        This endpoint provides detailed information about a specific settlement, including its status,
        amounts, and related transfers.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid UUID format for settlementId, invalid enterpriseId format.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error
        - Occurs when the specified settlement cannot be found.
        - Examples: Settlement ID doesn't exist or doesn't belong to this partner.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues.
      operationId: v1PartnerSettlementGetRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: sourceNetworkAccountIds
          description: Filter by specific source network account IDs. When provided, only settlement transfers from these network accounts will be included.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific source network account IDs. When provided, only settlement transfers from these network accounts will be included.
        - name: sourceTradingAccountIds
          description: Filter by specific source trading account IDs. When provided, only settlement transfers from these trading accounts will be included.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific source trading account IDs. When provided, only settlement transfers from these trading accounts will be included.
        - name: destinationNetworkAccountIds
          description: Filter by specific destination network account IDs. When provided, only settlement transfers to these network accounts will be included.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific destination network account IDs. When provided, only settlement transfers to these network accounts will be included.
        - name: destinationTradingAccountIds
          description: Filter by specific destination trading account IDs. When provided, only settlement transfers to these trading accounts will be included.
          in: query
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Filter by specific destination trading account IDs. When provided, only settlement transfers to these trading accounts will be included.
        - name: currencies
          description: Filter by specific currencies. When provided, only settlement transfers involving these currencies will be included.
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by specific currencies. When provided, only settlement transfers involving these currencies will be included.
        - name: pageNumber
          description: The page number (integer) you wish to fetch. When provided, the API will skip pageSize * pageNumber records. Page numbers are zero-based, so the first page is 0. If not provided, defaults to 0.
          in: query
          schema:
            type: string
            format: integer
        - name: pageSize
          description: The page size (integer) you wish to fetch. When provided, the API will return at most pageSize records per page. If not provided, a default page size defined by the server will be used.
          in: query
          schema:
            type: string
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
        - name: settlementId
          description: The unique identifier of the settlement to retrieve. This is a UUID that uniquely identifies the settlement record.
          in: path
          required: true
          schema:
            type: string
            title: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetSettlementOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlements/nonReconciled:
    post:
      summary: '[DEPRECATED] Perform Partner Settlement'
      description: |-
        [DEPRECATED] Partner route to perform a settlement.

        NOTE: this route is being deprecated in favor
        of the POST /api/network/v1/enterprises/{enterpriseId}/partners/settlements route.
      operationId: v1PartnerSettlementsNonReconciledPostRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalId:
                  type: string
                  description: External identifier for the settlement request. This should be unique for each settlement request and is used for idempotence and correlation with partner systems.
                  minLength: 1
                notes:
                  type: string
                  description: Optional notes about the settlement. Can contain additional context or information about the purpose of the settlement.
                  minLength: 1
                settlementAmounts:
                  $ref: '#/components/schemas/UnmappedSettlementAmountsRecord'
                nonce:
                  type: string
                  description: A unique nonce value used for cryptographic operations. This provides additional security for settlement operations.
                  minLength: 1
                payload:
                  type: string
                  minLength: 1
                signature:
                  type: string
                  minLength: 1
              required:
                - externalId
                - settlementAmounts
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerSettlementOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerIncompleteSettlementOrErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerIncompleteSettlementOrErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlements/onchain:
    post:
      summary: Initiate On-Chain Settlement
      description: |-
        Partner route to initiate an on-chain settlement. This endpoint allows partners
        to create settlements that will be processed on a blockchain, with multi-phase settlement flow.

        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid format for settlement amounts, missing required fields,
        invalid signature.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise, signature verification failed.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license, on-chain settlements not enabled.

        - 409: Conflict Error
        - Occurs when the request conflicts with current state.
        - Examples: Settlement already exists with the same externalId and different properties.

        - 500: Internal Server Error
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues.
      operationId: v1PartnerOnChainSettlementPostRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalId:
                  type: string
                  description: External identifier for the settlement request. This should be unique for each settlement request and is used for idempotence and correlation with partner systems.
                  minLength: 1
                notes:
                  type: string
                  description: Optional notes about the settlement. Can contain additional context or information about the purpose of the settlement.
                  minLength: 1
                settlementAmounts:
                  allOf:
                    - $ref: '#/components/schemas/PartySettlementAmountsRecord'
                  description: The settlement amounts to be processed. Only exchange-style settlements (where the exchange is the source) are supported for on-chain settlements.
                nonce:
                  type: string
                  description: A unique nonce value used for cryptographic operations. This provides additional security for settlement operations.
                  minLength: 1
                payload:
                  type: string
                  description: The signed payload for the settlement request. This contains a stringified version of request body less the payload/signature.
                  minLength: 1
                signature:
                  type: string
                  description: 'Digital signature of the payload parameter. This signature: - Must be created using your BitGo account''s private key - Verifies that the request is authentic and hasn''t been tampered with - Provides non-repudiation for the allocation request'
                  minLength: 1
              required:
                - externalId
                - settlementAmounts
                - nonce
                - payload
                - signature
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1SettlementPayload'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PendingSettlementPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlements/onchain/deposits:
    post:
      summary: Post deposit info for an on-chain settlement
      description: |-
        Partner route for providing external deposit information tied to an on-chain settlement.
        This endpoint allows partners to submit information about on-chain deposits that are
        associated with a specific settlement. The deposits will be tracked and reconciled 
        with the settlement transaction.


        Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or incomplete.
        - Examples: Empty string supplied for enterpriseId.

        - 401: Authentication Error
        - Occurs when the request is not authorized.
        - Examples: Caller is not a member of the enterprise.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have access to the specified settlement.
        - Examples: Enterprise does not have OES license.

        - 404: Not Found Error 
        - Occurs when the referenced settlement was not found.
        - Examples: Settlement ID doesn't exist, settlement exists but for different partner.

        - 409: Conflict Error
        - Occurs when Deposit information is in conflict.
        - Examples: Depsit information has already been submitted for a different settlement.

        - 500: Internal Server Error
        - Occurs when there's an unexpected error processing the request
        - Examples: Database connection failure, transient network error.
      operationId: v1PartnerExtDepositsPostRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalSettlementId:
                  type: string
                  description: Partner's unique identifier for the settlement. Used for correlation between BitGo and partner systems.
                  minLength: 1
                settlementId:
                  type: string
                  description: Optional BitGo settlement ID associated with these deposits. May be omitted if the deposits are being submitted before the settlement is created.
                  title: uuid
                deposits:
                  type: array
                  items:
                    type: object
                    properties:
                      currency:
                        type: string
                        description: The currency code of the deposited asset. Identifies which cryptocurrency was deposited on-chain.
                        minLength: 1
                      onChainTxId:
                        type: string
                        description: The transaction ID of the on-chain deposit. This is the unique identifier for the blockchain transaction.
                        minLength: 1
                    required:
                      - currency
                      - onChainTxId
                    description: List of deposits associated with this settlement. Must contain at least one deposit.
                payload:
                  type: string
                  minLength: 1
                signature:
                  type: string
                  minLength: 1
              required:
                - externalSettlementId
                - deposits
                - payload
                - signature
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ExtDepositsPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/settlements/onchain/deposits/signing:
    get:
      summary: Get Signing Payload for Partner External Deposits
      description: |-
        This API call allows partners to get the partner external deposits payload for signing.
        Partners can use this endpoint to retrieve a formatted payload that should be signed
        using their private key before submitting deposit information. This ensures that
        deposit submissions are properly authenticated and attributed to the correct partner.
      operationId: v1PartnerExtDepositsSigningGetRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Common properties for external deposit requests. Used as the base for both signed and unsigned requests.
              properties:
                externalSettlementId:
                  type: string
                  description: Partner's unique identifier for the settlement. Used for correlation between BitGo and partner systems.
                  minLength: 1
                settlementId:
                  type: string
                  description: Optional BitGo settlement ID associated with these deposits. May be omitted if the deposits are being submitted before the settlement is created.
                  title: uuid
                deposits:
                  type: array
                  items:
                    type: object
                    properties:
                      currency:
                        type: string
                        description: The currency code of the deposited asset. Identifies which cryptocurrency was deposited on-chain.
                        minLength: 1
                      onChainTxId:
                        type: string
                        description: The transaction ID of the on-chain deposit. This is the unique identifier for the blockchain transaction.
                        minLength: 1
                    required:
                      - currency
                      - onChainTxId
                    description: List of deposits associated with this settlement. Must contain at least one deposit.
              required:
                - externalSettlementId
                - deposits
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerExtDepositsSigningPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/partners/trades/signing:
    get:
      summary: Get Signing Payload for Partner Trades
      description: This API call allows partners to get the partner trades payload for signing.
      operationId: v1PartnerTradesSigningGetRoute
      tags:
        - Partner Trades
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                trade:
                  $ref: '#/components/schemas/InboundTrade'
                tradeCorrection:
                  allOf:
                    - type: object
                      properties:
                        externalId:
                          type: string
                          minLength: 1
                    - $ref: '#/components/schemas/BaseTradeCorrectionMetadata'
                nonce:
                  type: string
                  minLength: 1
              required:
                - trade
                - nonce
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PartnerTradeSigningGetPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v1/enterprises/{enterpriseId}/supportedCurrencies:
    get:
      summary: List Partner-Supported Currencies
      description: |-
        List all the currencies a given OES Partner supports for allocation and deallocation.
        This endpoint returns a comprehensive list of currencies that can be used for allocations, 
        deallocations and settlements for each partner.
        with specific partners.
      operationId: v1EnterpriseSupportedCurrenciesRoute
      tags:
        - Client Allocations & Deallocations
      parameters:
        - name: partnerIds
          description: Comma-separated list of partner UUIDs to filter results by. Only returns supported currencies for the specified partners.
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              title: uuid
              description: Comma-separated list of partner UUIDs to filter results by. Only returns supported currencies for the specified partners.
        - name: enterpriseId
          description: Enterprise ID to check supported currencies for. The response will be filtered to partners accessible by this enterprise.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1EnterpriseSupportedCurrenciesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/network/v2/enterprises/{enterpriseId}/partners/settlements:
    post:
      summary: Initiate partner settlement
      description: |-
        Used by dispute enabled exchange partners to stage a settlement for connected clients. 

        This endpoint will:
        1. Authenticate the request by verifying the payload and signature provided.
        2. Create entities:
        a. Create the settlement entity
        b. Map provided settlement amounts to settlement transfer records for execution.
        3. Assign closed, unassigned disputes from prior settlements to this settlement
        a. Pull in any adjustedSettlementTransfers from said disputes. 
        b. Update the settledInSettlementId on said disputes.
        4. Verify the relevant connection balances against liabilities based on provided settlementAmounts 
        and assigned settlement transfers from disputes being assigned.
        5. Notify connection owners of a new settlement. 
        6. Queue an event to finalize the settlement once the dispute window ends.

        This endpoint is idempotent and can safely be called again with the same exact request body
        without worrying about creating multiple settlements.

        Please note that provided settlement amounts should be based solely on new trading activity 
        that was not included in the last settlement. Instructions from closed, unsettled disputes should
        not be included in the calculation of settlement instructions on the 
        Settlement will be processed asynchronously once initiated, after dispute / top up window have elapsed.

        * Error scenarios:
        - 400: Invalid Request Error
        - Occurs when the request parameters are invalid or malformed.
        - Examples: Invalid format for settlement amounts, missing required fields,
        invalid signature.

        - 401: Authentication Error or Incomplete Settlement
        - Occurs when the request is not authorized or cannot be completed immediately.
        - Examples: Caller is not a member of the enterprise, signature verification failed.

        - 403: Permission Denied Error
        - Occurs when the authenticated partner doesn't have necessary permissions.
        - Examples: Enterprise does not have OES license

        - 409: Conflict Error
        - Occurs when the request conflicts with current state.
        - Examples: Settlement already exists with the same externalId and different properties.

        - 422: Unprocessable Content
        - Occurs when the request is authenticated and permitted but is unable to be processed.
        - Examples: the liabilities for one or more connection exceed their allocated balance.

        - 500: Internal Server Error or Incomplete Settlement
        - Occurs when there's an unexpected server error processing the request.
        - Examples: Database connection issues, settlement initiated but not completed due to transient errors.
      operationId: v2PartnerSettlementsPostRoute
      tags:
        - Partner Settlements & Transfers
      parameters:
        - name: enterpriseId
          description: The enterprise identifier of the partner. This identifies the partner enterprise making the API request.
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalId:
                  type: string
                  description: External identifier for the settlement request. This should be unique for each settlement request and is used for idempotence and correlation with partner systems.
                  minLength: 1
                notes:
                  type: string
                  description: Optional notes about the settlement. Can contain additional context or information about the purpose of the settlement.
                  minLength: 1
                settlementAmounts:
                  $ref: '#/components/schemas/UnmappedSettlementAmountsRecord'
                nonce:
                  type: string
                  description: A unique nonce value used for cryptographic operations. This provides additional security for settlement operations.
                  minLength: 1
                payload:
                  type: string
                  minLength: 1
                signature:
                  type: string
                  minLength: 1
                cutoffAt:
                  type: string
                  description: The date and time of the most recent trade being settled, represented in ISO 8601 format
                  format: date-time
                  title: ISO Date String
              required:
                - externalId
                - settlementAmounts
                - nonce
                - payload
                - signature
                - cutoffAt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2PartnerSettlementOkPayload'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorPayload'
  /api/clearing/v1/enterprise/{enterpriseId}/account-settings/{accountId}:
    get:
      summary: Get settlement Go Account settings
      operationId: V1AccountSettingsGetRoute
      tags:
        - Settlement Onboarding
      description: Get settlement settings for a Go Account.
      parameters:
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: TradingAccountSettingsResponse
                type: object
                required:
                  - accountId
                  - affirmationExpirationTime
                  - referralCode
                properties:
                  accountId:
                    type: string
                  affirmationExpirationTime:
                    type: number
                  feeRates:
                    title: FeeRate
                    type: object
                    required:
                      - settlement
                    properties:
                      settlement:
                        title: PositiveIntConfig
                        oneOf:
                          - title: string
                            type: string
                          - title: number
                            type: number
                  referralCode:
                    type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
  /api/clearing/v1/enterprise/{enterpriseId}/account/{accountId}/approval-requests/{approvalRequestId}:
    put:
      summary: Update settlement approval request
      operationId: V1ApprovalRequestPutRoute
      tags:
        - Approval Requests
      description: Update an approval request for a settlement.
      parameters:
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: approvalRequestId
          schema:
            title: UUID
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: ApprovalRequestResponse
                type: object
                required:
                  - settlementId
                  - createdAt
                  - updatedAt
                  - id
                  - accountId
                  - status
                  - payload
                properties:
                  settlementId:
                    title: NonEmptyString
                    type: string
                  approvedAt:
                    type: string
                    format: date
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
                  id:
                    title: NonEmptyString
                    type: string
                  accountId:
                    title: NonEmptyString
                    type: string
                  status:
                    title: ApprovalRequestStatus
                    type: string
                    enum:
                      - acknowledged
                      - canceled
                      - rejected
                      - approved
                      - pending
                      - failed
                      - overdue
                      - expired
                  payload:
                    title: NonEmptyString
                    type: string
                  signature:
                    title: NonEmptyString
                    type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  title: ApprovalRequestUpdateStatus
                  type: string
                  enum:
                    - acknowledged
                    - canceled
                    - rejected
        required: true
  /api/clearing/v1/enterprise/{enterpriseId}/account/{accountId}/settlement:
    post:
      summary: Create settlement
      operationId: V1EnterpriseAccountSettlementPostRoute
      tags:
        - Settlements
      description: Creates a settlement.
      parameters:
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: SettlementResponse
                type: object
                required:
                  - approvalRequests
                  - settlementTransfers
                  - requesterAccountName
                  - createdAt
                  - updatedAt
                  - id
                  - externalId
                  - requesterAccountId
                  - status
                  - type
                properties:
                  approvalRequests:
                    type: array
                    items:
                      title: ApprovalRequestResponseForSettlement
                      type: object
                      required:
                        - createdAt
                        - updatedAt
                        - id
                        - accountId
                        - status
                        - payload
                      properties:
                        approvedAt:
                          type: string
                          format: date
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        id:
                          title: NonEmptyString
                          type: string
                        accountId:
                          title: NonEmptyString
                          type: string
                        status:
                          title: ApprovalRequestStatus
                          type: string
                          enum:
                            - acknowledged
                            - canceled
                            - rejected
                            - approved
                            - pending
                            - failed
                            - overdue
                            - expired
                        payload:
                          title: NonEmptyString
                          type: string
                        signature:
                          title: NonEmptyString
                          type: string
                  settlementTransfers:
                    type: array
                    items:
                      title: SettlementTransferResponse
                      type: object
                      required:
                        - createdAt
                        - updatedAt
                        - id
                        - sourceTradingAccountId
                        - destinationTradingAccountId
                        - currency
                        - quantity
                      properties:
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        id:
                          title: UUID
                          type: string
                        sourceTradingAccountId:
                          title: NonEmptyString
                          type: string
                        destinationTradingAccountId:
                          title: NonEmptyString
                          type: string
                        currency:
                          title: SupportedCurrency
                          type: string
                        quantity:
                          title: PositiveBigIntFromString
                          type: string
                        txIds:
                          type: array
                          items:
                            title: NonEmptyString
                            type: string
                  requesterAccountName:
                    title: NonEmptyString
                    type: string
                  finalizedAt:
                    type: string
                    format: date
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
                  id:
                    title: NonEmptyString
                    type: string
                  externalId:
                    title: NonEmptyString
                    type: string
                  notation:
                    type: string
                  requesterAccountId:
                    title: NonEmptyString
                    type: string
                  status:
                    title: SettlementStatus
                    type: string
                    enum:
                      - canceled
                      - rejected
                      - pending
                      - failed
                      - expired
                      - settled
                  type:
                    type: string
                    enum:
                      - direct
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '409':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - externalId
                - counterpartyAccountId
                - assetTransfers
              properties:
                externalId:
                  title: NonEmptyString
                  type: string
                counterpartyAccountId:
                  title: NonEmptyString
                  type: string
                assetTransfers:
                  title: NonEmptyArray
                  type: array
                  items:
                    title: AssetTransfer
                    type: object
                    required:
                      - currency
                      - quantity
                    properties:
                      currency:
                        title: SupportedCurrency
                        type: string
                      quantity:
                        title: BigIntFromString
                        type: string
                notation:
                  type: string
        required: true
  /api/clearing/v1/enterprise/{enterpriseId}/account/{accountId}/settlement/{settlementId}:
    get:
      summary: Get settlement by ID.
      operationId: V1GetSettlementByIdRoute
      tags:
        - Settlements
      description: Get settlement by ID.
      parameters:
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: settlementId
          schema:
            title: UUID
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: SettlementResponse
                type: object
                required:
                  - approvalRequests
                  - settlementTransfers
                  - requesterAccountName
                  - createdAt
                  - updatedAt
                  - id
                  - externalId
                  - requesterAccountId
                  - status
                  - type
                properties:
                  approvalRequests:
                    type: array
                    items:
                      title: ApprovalRequestResponseForSettlement
                      type: object
                      required:
                        - createdAt
                        - updatedAt
                        - id
                        - accountId
                        - status
                        - payload
                      properties:
                        approvedAt:
                          type: string
                          format: date
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        id:
                          title: NonEmptyString
                          type: string
                        accountId:
                          title: NonEmptyString
                          type: string
                        status:
                          title: ApprovalRequestStatus
                          type: string
                          enum:
                            - acknowledged
                            - canceled
                            - rejected
                            - approved
                            - pending
                            - failed
                            - overdue
                            - expired
                        payload:
                          title: NonEmptyString
                          type: string
                        signature:
                          title: NonEmptyString
                          type: string
                  settlementTransfers:
                    type: array
                    items:
                      title: SettlementTransferResponse
                      type: object
                      required:
                        - createdAt
                        - updatedAt
                        - id
                        - sourceTradingAccountId
                        - destinationTradingAccountId
                        - currency
                        - quantity
                      properties:
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        id:
                          title: UUID
                          type: string
                        sourceTradingAccountId:
                          title: NonEmptyString
                          type: string
                        destinationTradingAccountId:
                          title: NonEmptyString
                          type: string
                        currency:
                          title: SupportedCurrency
                          type: string
                        quantity:
                          title: PositiveBigIntFromString
                          type: string
                        txIds:
                          type: array
                          items:
                            title: NonEmptyString
                            type: string
                  requesterAccountName:
                    title: NonEmptyString
                    type: string
                  finalizedAt:
                    type: string
                    format: date
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
                  id:
                    title: NonEmptyString
                    type: string
                  externalId:
                    title: NonEmptyString
                    type: string
                  notation:
                    type: string
                  requesterAccountId:
                    title: NonEmptyString
                    type: string
                  status:
                    title: SettlementStatus
                    type: string
                    enum:
                      - canceled
                      - rejected
                      - pending
                      - failed
                      - expired
                      - settled
                  type:
                    type: string
                    enum:
                      - direct
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
  /api/clearing/v1/enterprise/{enterpriseId}/account/{accountId}/settlement/{settlementId}/signing:
    get:
      summary: Get settlement signing
      operationId: V1GetSettlementSigningRoute
      tags:
        - Settlement Signing
      description: Get settlement signing.
      parameters:
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: settlementId
          schema:
            title: UUID
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: TradePayloadResponse
                type: object
                required:
                  - payload
                properties:
                  payload:
                    type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
    post:
      summary: Sign settlement
      operationId: V1PostSettlementSigningRoute
      tags:
        - Settlement Signing
      description: Signs a Settlement.
      parameters:
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: settlementId
          schema:
            title: UUID
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: ApprovalRequestResponse
                type: object
                required:
                  - settlementId
                  - createdAt
                  - updatedAt
                  - id
                  - accountId
                  - status
                  - payload
                properties:
                  settlementId:
                    title: NonEmptyString
                    type: string
                  approvedAt:
                    type: string
                    format: date
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
                  id:
                    title: NonEmptyString
                    type: string
                  accountId:
                    title: NonEmptyString
                    type: string
                  status:
                    title: ApprovalRequestStatus
                    type: string
                    enum:
                      - acknowledged
                      - canceled
                      - rejected
                      - approved
                      - pending
                      - failed
                      - overdue
                      - expired
                  payload:
                    title: NonEmptyString
                    type: string
                  signature:
                    title: NonEmptyString
                    type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - payload
                - signature
              properties:
                payload:
                  title: NonEmptyString
                  type: string
                signature:
                  title: NonEmptyString
                  type: string
        required: true
  /api/clearing/v1/enterprise/{enterpriseId}/account/{accountId}/settlements:
    get:
      summary: List settlements by account
      operationId: V1ListSettlementsByAccountRoute
      tags:
        - Settlements
      description: List settlements by Go Account.
      parameters:
        - name: limit
          schema:
            type: string
          required: true
          in: query
        - name: offset
          schema:
            type: string
          required: true
          in: query
        - name: status
          schema:
            title: SettlementStatus
            type: string
            enum:
              - canceled
              - rejected
              - pending
              - failed
              - expired
              - settled
          required: false
          in: query
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: SettlementListResponse
                type: object
                required:
                  - settlementList
                properties:
                  settlementList:
                    type: array
                    items:
                      title: SettlementResponse
                      type: object
                      required:
                        - approvalRequests
                        - settlementTransfers
                        - requesterAccountName
                        - createdAt
                        - updatedAt
                        - id
                        - externalId
                        - requesterAccountId
                        - status
                        - type
                      properties:
                        approvalRequests:
                          type: array
                          items:
                            title: ApprovalRequestResponseForSettlement
                            type: object
                            required:
                              - createdAt
                              - updatedAt
                              - id
                              - accountId
                              - status
                              - payload
                            properties:
                              approvedAt:
                                type: string
                                format: date
                              createdAt:
                                type: string
                                format: date
                              updatedAt:
                                type: string
                                format: date
                              id:
                                title: NonEmptyString
                                type: string
                              accountId:
                                title: NonEmptyString
                                type: string
                              status:
                                title: ApprovalRequestStatus
                                type: string
                                enum:
                                  - acknowledged
                                  - canceled
                                  - rejected
                                  - approved
                                  - pending
                                  - failed
                                  - overdue
                                  - expired
                              payload:
                                title: NonEmptyString
                                type: string
                              signature:
                                title: NonEmptyString
                                type: string
                        settlementTransfers:
                          type: array
                          items:
                            title: SettlementTransferResponse
                            type: object
                            required:
                              - createdAt
                              - updatedAt
                              - id
                              - sourceTradingAccountId
                              - destinationTradingAccountId
                              - currency
                              - quantity
                            properties:
                              createdAt:
                                type: string
                                format: date
                              updatedAt:
                                type: string
                                format: date
                              id:
                                title: UUID
                                type: string
                              sourceTradingAccountId:
                                title: NonEmptyString
                                type: string
                              destinationTradingAccountId:
                                title: NonEmptyString
                                type: string
                              currency:
                                title: SupportedCurrency
                                type: string
                              quantity:
                                title: PositiveBigIntFromString
                                type: string
                              txIds:
                                type: array
                                items:
                                  title: NonEmptyString
                                  type: string
                        requesterAccountName:
                          title: NonEmptyString
                          type: string
                        finalizedAt:
                          type: string
                          format: date
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        id:
                          title: NonEmptyString
                          type: string
                        externalId:
                          title: NonEmptyString
                          type: string
                        notation:
                          type: string
                        requesterAccountId:
                          title: NonEmptyString
                          type: string
                        status:
                          title: SettlementStatus
                          type: string
                          enum:
                            - canceled
                            - rejected
                            - pending
                            - failed
                            - expired
                            - settled
                        type:
                          type: string
                          enum:
                            - direct
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '404':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
  /api/clearing/v1/enterprise/{enterpriseId}/account/{accountId}/trading-partner:
    post:
      summary: List settlement trading partners
      operationId: V1TradingPartnerPostRoute
      tags:
        - Settlement Onboarding
      description: Creates a trading partner (counterparty) for a Go Account.
      parameters:
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: TradingPartnerListResponse
                type: object
                required:
                  - tradingPartnerList
                properties:
                  tradingPartnerList:
                    type: array
                    items:
                      title: TradingPartnerResponse
                      type: object
                      required:
                        - id
                        - primaryAccountId
                        - primaryEnterpriseName
                        - secondaryAccountId
                        - secondaryEnterpriseName
                        - status
                        - updatedAt
                      properties:
                        id:
                          type: string
                        primaryAccountId:
                          type: string
                        primaryEnterpriseName:
                          type: string
                        secondaryAccountId:
                          type: string
                        secondaryEnterpriseName:
                          type: string
                        status:
                          title: TradingPartnerStatuses
                          type: string
                          enum:
                            - accepted
                            - rejected
                            - canceled
                            - pending
                        updatedAt:
                          type: string
                          format: date
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - referralCode
              properties:
                referralCode:
                  title: NonEmptyString
                  type: string
        required: true
  /api/clearing/v1/enterprise/{enterpriseId}/account/{accountId}/trading-partners:
    get:
      summary: List settlement trading partners
      operationId: V1ListTradingPartnersByAccountRoute
      tags:
        - Settlement Onboarding
      description: List trading partners (counterparties) for a Go Account.
      parameters:
        - name: status
          schema:
            title: TradingPartnerStatuses
            type: string
            enum:
              - accepted
              - rejected
              - canceled
              - pending
          required: false
          in: query
        - name: accountId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: TradingPartnerListResponse
                type: object
                required:
                  - tradingPartnerList
                properties:
                  tradingPartnerList:
                    type: array
                    items:
                      title: TradingPartnerResponse
                      type: object
                      required:
                        - id
                        - primaryAccountId
                        - primaryEnterpriseName
                        - secondaryAccountId
                        - secondaryEnterpriseName
                        - status
                        - updatedAt
                      properties:
                        id:
                          type: string
                        primaryAccountId:
                          type: string
                        primaryEnterpriseName:
                          type: string
                        secondaryAccountId:
                          type: string
                        secondaryEnterpriseName:
                          type: string
                        status:
                          title: TradingPartnerStatuses
                          type: string
                          enum:
                            - accepted
                            - rejected
                            - canceled
                            - pending
                        updatedAt:
                          type: string
                          format: date
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
  /api/clearing/v1/enterprise/{enterpriseId}/settlements:
    get:
      summary: List settlements by enterprise
      operationId: V1ListSettlementsByEnterpriseRoute
      tags:
        - Settlements
      description: List settlements by enterprise.
      parameters:
        - name: limit
          schema:
            type: string
          required: true
          in: query
        - name: offset
          schema:
            type: string
          required: true
          in: query
        - name: status
          schema:
            title: SettlementStatus
            type: string
            enum:
              - canceled
              - rejected
              - pending
              - failed
              - expired
              - settled
          required: false
          in: query
        - name: enterpriseId
          schema:
            title: NonEmptyString
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: SettlementListResponse
                type: object
                required:
                  - settlementList
                properties:
                  settlementList:
                    type: array
                    items:
                      title: SettlementResponse
                      type: object
                      required:
                        - approvalRequests
                        - settlementTransfers
                        - requesterAccountName
                        - createdAt
                        - updatedAt
                        - id
                        - externalId
                        - requesterAccountId
                        - status
                        - type
                      properties:
                        approvalRequests:
                          type: array
                          items:
                            title: ApprovalRequestResponseForSettlement
                            type: object
                            required:
                              - createdAt
                              - updatedAt
                              - id
                              - accountId
                              - status
                              - payload
                            properties:
                              approvedAt:
                                type: string
                                format: date
                              createdAt:
                                type: string
                                format: date
                              updatedAt:
                                type: string
                                format: date
                              id:
                                title: NonEmptyString
                                type: string
                              accountId:
                                title: NonEmptyString
                                type: string
                              status:
                                title: ApprovalRequestStatus
                                type: string
                                enum:
                                  - acknowledged
                                  - canceled
                                  - rejected
                                  - approved
                                  - pending
                                  - failed
                                  - overdue
                                  - expired
                              payload:
                                title: NonEmptyString
                                type: string
                              signature:
                                title: NonEmptyString
                                type: string
                        settlementTransfers:
                          type: array
                          items:
                            title: SettlementTransferResponse
                            type: object
                            required:
                              - createdAt
                              - updatedAt
                              - id
                              - sourceTradingAccountId
                              - destinationTradingAccountId
                              - currency
                              - quantity
                            properties:
                              createdAt:
                                type: string
                                format: date
                              updatedAt:
                                type: string
                                format: date
                              id:
                                title: UUID
                                type: string
                              sourceTradingAccountId:
                                title: NonEmptyString
                                type: string
                              destinationTradingAccountId:
                                title: NonEmptyString
                                type: string
                              currency:
                                title: SupportedCurrency
                                type: string
                              quantity:
                                title: PositiveBigIntFromString
                                type: string
                              txIds:
                                type: array
                                items:
                                  title: NonEmptyString
                                  type: string
                        requesterAccountName:
                          title: NonEmptyString
                          type: string
                        finalizedAt:
                          type: string
                          format: date
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        id:
                          title: NonEmptyString
                          type: string
                        externalId:
                          title: NonEmptyString
                          type: string
                        notation:
                          type: string
                        requesterAccountId:
                          title: NonEmptyString
                          type: string
                        status:
                          title: SettlementStatus
                          type: string
                          enum:
                            - canceled
                            - rejected
                            - pending
                            - failed
                            - expired
                            - settled
                        type:
                          type: string
                          enum:
                            - direct
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '404':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                title: V1ErrorPayload
                type: object
                required:
                  - error
                  - errorName
                properties:
                  error:
                    type: string
                  errorName:
                    type: string
  /api/v1/marketdata/cryptocompare/historical/prices:
    get:
      tags:
        - Market Data
      summary: Get historical prices
      description: Get a list of historical prices in a specified time range. Using this endpoint requires an access token with the appropriate enterprise ID.
      operationId: marketdata.cryptocompare.historical.prices.get
      parameters:
        - $ref: '#/components/parameters/Base'
        - $ref: '#/components/parameters/Quote'
        - $ref: '#/components/parameters/Interval'
        - $ref: '#/components/parameters/Start'
        - $ref: '#/components/parameters/End'
      responses:
        '200':
          description: Returns historical-price data points. Also returns a page cursor if there are more than 1,000 results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricalPriceResult'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketDataError'
      x-licenses:
        - cryptoCompare
  /api/v1/marketdata/cryptocompare/spot/prices:
    get:
      tags:
        - Market Data
      summary: Get spot prices
      description: Get historical spot prices from a specific time. Using this endpoint requires an access token with the appropriate enterprise ID.
      operationId: marketdata.cryptocompare.spot.prices.get
      parameters:
        - $ref: '#/components/parameters/Base'
        - $ref: '#/components/parameters/Quote'
        - $ref: '#/components/parameters/Interval'
        - name: timestamp
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Returns a historical-price data point.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricalPrice'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketDataError'
      x-licenses:
        - cryptoCompare
  /api/evs/v1/identity:
    get:
      summary: Get Identity
      description: Get a Persona transaction.
      operationId: entity.validation.identity.get
      tags:
        - Entity Validation
      parameters:
        - name: organizationId
          in: query
          schema:
            type: string
        - name: enterpriseId
          in: query
          schema:
            type: string
            minLength: 1
        - name: userId
          in: query
          schema:
            type: string
            minLength: 1
        - name: identityId
          in: query
          schema:
            type: string
            minLength: 1
        - name: allData
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityGetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
    post:
      summary: Create Identity
      description: Create an identity for a user.
      operationId: entity.validation.identity.create
      tags:
        - Entity Validation
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    addressCity:
                      type: string
                      minLength: 1
                    addressPostalCode:
                      type: string
                      minLength: 1
                    addressStreet1:
                      type: string
                      minLength: 1
                    addressStreet2:
                      type: string
                      minLength: 1
                    addressSubdivision:
                      type: string
                      minLength: 1
                    birthdate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    country:
                      type: string
                      minLength: 1
                    countryOfCitizenship:
                      type: string
                      minLength: 1
                    countryOfResidence:
                      type: string
                      minLength: 1
                    debugFailureReason:
                      type: string
                      minLength: 1
                    debugStatus:
                      type: string
                      minLength: 1
                    digitalAssetWalletAddress:
                      type: string
                      minLength: 1
                    enterpriseId:
                      type: string
                      minLength: 1
                    govIdCountryOfIssuance:
                      type: string
                      minLength: 1
                    identificationNumber:
                      type: string
                      minLength: 1
                    nameFirst:
                      type: string
                      minLength: 1
                    nameLast:
                      type: string
                      minLength: 1
                    nameMiddle:
                      type: string
                      minLength: 1
                    notionalTradedEachMonth:
                      type: number
                    occupation:
                      $ref: '#/components/schemas/IdentityOccupation'
                    organizationId:
                      type: string
                      minLength: 1
                    phoneNumber:
                      type: string
                      minLength: 1
                    politicallyExposedPerson:
                      type: boolean
                    transactionType:
                      type: string
                      enum:
                        - institutionalIndividual
                    userId:
                      type: string
                      minLength: 1
                  required:
                    - addressCity
                    - addressStreet1
                    - addressSubdivision
                    - birthdate
                    - country
                    - countryOfCitizenship
                    - countryOfResidence
                    - enterpriseId
                    - govIdCountryOfIssuance
                    - nameFirst
                    - nameLast
                    - occupation
                    - organizationId
                    - phoneNumber
                    - politicallyExposedPerson
                    - transactionType
                    - userId
                - type: object
                  properties:
                    birthdate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    country:
                      type: string
                      minLength: 1
                    countryOfIncorporation:
                      type: string
                      minLength: 1
                    dateOfIncorporation:
                      type: string
                      format: date-time
                      title: ISO Date String
                    debugFailureReason:
                      type: string
                      minLength: 1
                    debugStatus:
                      type: string
                      minLength: 1
                    enterpriseId:
                      type: string
                      minLength: 1
                    enterpriseName:
                      type: string
                      minLength: 1
                    isEntity:
                      type: boolean
                    nameFirst:
                      type: string
                      minLength: 1
                    nameLast:
                      type: string
                      minLength: 1
                    nameMiddle:
                      type: string
                      minLength: 1
                    organizationId:
                      type: string
                    transactionType:
                      type: string
                      enum:
                        - starterSignup
                    userId:
                      type: string
                      minLength: 1
                  required:
                    - birthdate
                    - country
                    - enterpriseId
                    - isEntity
                    - nameFirst
                    - nameLast
                    - organizationId
                    - transactionType
                    - userId
                - type: object
                  properties:
                    birthdate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    country:
                      type: string
                      minLength: 1
                    debugFailureReason:
                      type: string
                      minLength: 1
                    debugStatus:
                      type: string
                      minLength: 1
                    enterpriseId:
                      type: string
                      minLength: 1
                    nameFirst:
                      type: string
                      minLength: 1
                    nameLast:
                      type: string
                      minLength: 1
                    nameMiddle:
                      type: string
                      minLength: 1
                    organizationId:
                      type: string
                    transactionType:
                      type: string
                      enum:
                        - kycInc
                    userId:
                      type: string
                      minLength: 1
                  required:
                    - birthdate
                    - country
                    - enterpriseId
                    - nameFirst
                    - nameLast
                    - organizationId
                    - transactionType
                    - userId
                - type: object
                  properties:
                    birthdate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    country:
                      type: string
                      minLength: 1
                    countryOfIncorporation:
                      type: string
                      minLength: 1
                    dateOfIncorporation:
                      type: string
                      format: date-time
                      title: ISO Date String
                    debugFailureReason:
                      type: string
                      minLength: 1
                    debugStatus:
                      type: string
                      minLength: 1
                    enterpriseId:
                      type: string
                      minLength: 1
                    enterpriseName:
                      type: string
                      minLength: 1
                    isEntity:
                      type: boolean
                    isPrimaryContact:
                      type: boolean
                    nameFirst:
                      type: string
                      minLength: 1
                    nameLast:
                      type: string
                      minLength: 1
                    nameMiddle:
                      type: string
                      minLength: 1
                    organizationId:
                      type: string
                    transactionType:
                      type: string
                      enum:
                        - unverifiedPayGoUser
                    userId:
                      type: string
                      minLength: 1
                  required:
                    - birthdate
                    - country
                    - enterpriseId
                    - isEntity
                    - nameFirst
                    - nameLast
                    - organizationId
                    - transactionType
                    - userId
                - type: object
                  properties:
                    addressCity:
                      type: string
                      minLength: 1
                    addressPostalCode:
                      type: string
                      minLength: 1
                    addressStreet1:
                      type: string
                      minLength: 1
                    addressStreet2:
                      type: string
                      minLength: 1
                    addressSubdivision:
                      type: string
                      minLength: 1
                    birthdate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    country:
                      type: string
                      minLength: 1
                    countryOfCitizenship:
                      type: string
                      minLength: 1
                    countryOfResidence:
                      type: string
                      minLength: 1
                    debugFailureReason:
                      type: string
                      minLength: 1
                    debugStatus:
                      type: string
                      minLength: 1
                    digitalAssetWalletAddress:
                      type: string
                      minLength: 1
                    enterpriseId:
                      type: string
                      minLength: 1
                    govIdCountryOfIssuance:
                      type: string
                      minLength: 1
                    identificationNumber:
                      type: string
                      minLength: 1
                    nameFirst:
                      type: string
                      minLength: 1
                    nameLast:
                      type: string
                      minLength: 1
                    nameMiddle:
                      type: string
                      minLength: 1
                    notionalTradedEachMonth:
                      type: number
                    occupation:
                      $ref: '#/components/schemas/IdentityOccupation'
                    organizationId:
                      type: string
                      minLength: 1
                    phoneNumber:
                      type: string
                      minLength: 1
                    politicallyExposedPerson:
                      type: boolean
                    transactionType:
                      type: string
                      enum:
                        - incContracted
                    userId:
                      type: string
                      minLength: 1
                  required:
                    - addressCity
                    - addressStreet1
                    - addressSubdivision
                    - birthdate
                    - country
                    - countryOfCitizenship
                    - countryOfResidence
                    - enterpriseId
                    - govIdCountryOfIssuance
                    - nameFirst
                    - nameLast
                    - occupation
                    - organizationId
                    - phoneNumber
                    - politicallyExposedPerson
                    - transactionType
                    - userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityCreateResponse'
  /api/evs/v1/identity/{id}:
    patch:
      summary: Patch Update Identity
      description: Update an existing Persona transaction.
      operationId: entity.validation.identity.update
      tags:
        - Entity Validation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enterpriseId:
                  type: string
                  minLength: 1
                userId:
                  type: string
                  minLength: 1
                organizationId:
                  type: string
                  minLength: 1
                nameFirst:
                  type: string
                  minLength: 1
                nameLast:
                  type: string
                  minLength: 1
                nameMiddle:
                  type: string
                  minLength: 1
                debugStatus:
                  type: string
                  minLength: 1
                debugFailureReason:
                  type: string
                  minLength: 1
                contractSignerNameFull:
                  type: string
                  minLength: 1
                contractSignedDate:
                  type: string
                  format: date-time
                  title: ISO Date String
                contractSignedIPAddress:
                  type: string
                  minLength: 1
                contractVersion:
                  type: string
                  minLength: 1
                userAgreesToTerms:
                  type: boolean
                occupation:
                  type: string
                  enum:
                    - Agriculture
                    - Art Dealer / Auctioneer / Import / Export Company
                    - Financial Services (Asset Mgmt., Bank, Broker Dealer, Commodities, Mutual Fund, Ins. Co)
                    - Casinos and Gambling Establishments
                    - Charity/NGO/Non-Profit/Foundation/Endowment
                    - Computer Programmer / Administrator / Software Engineer / IT or Software / Technology Company
                    - Crypto Services (ATM, Exchange, Lender, Coins/Token)
                    - Education / Teacher
                    - Extractive Industry (Oil, Gas, etc.) / Jewels / Gemstones / Precious Metals
                    - Family Office
                    - Film / TV / Entertainment (not adult)
                    - Government/State owned/Political Org. (i.e. Sovereign Wealth Fund)
                    - Healthcare
                    - Law Enforcement / Military / Protective Services
                    - Miner / Mining Pool
                    - Money Service Business
                    - Other
                    - Private Equity / Venture Capital
                    - Professional Service Providers (lawyers accountants etc.)
                    - Real estate brokers developers and appraisers
                    - Recreation / Hospitality
                    - Student / Unemployed / Retired
                    - Traders / Trading (High Frequency, Proprietary, Market Maker)
                    - Other - Default
                    - Weapons Dealers
                annualIncome:
                  type: string
                  enum:
                    - Under $50,000
                    - $50,001 - $100,000
                    - $100,001 - $300,000
                    - $300,001 - $500,000
                    - $500,001 and over
                netWorth:
                  type: string
                  enum:
                    - Under $100,000
                    - $100,001 - $500,000
                    - $500,001 - $1,000,000
                    - $1,000,001 - $5,000,000
                    - $5,000,001 and over
                sourceOfNetWorth:
                  type: string
                  enum:
                    - 'Employment Income: Includes salaries, wages, and bonuses.'
                    - 'Business Income: Revenue from self-owned businesses or proceeds from the sale of a business.'
                    - 'Legal and Compensation Payments: Funds received from legal settlements, including insurance claims, divorce settlements, accident compensations, etc.'
                    - 'Inheritances and Gifts: Money or assets received as an inheritance, gift, or through trust distributions.'
                    - 'Investment Earnings: Profits derived from investments such as cryptocurrencies, stocks, bonds, private equity, or venture capital.'
                initialDepositType:
                  type: string
                  enum:
                    - Fiat Currency
                    - Crypto / Digital Assets
                expectedMonthlyDeposits:
                  type: string
                  enum:
                    - 0-10 Transactions
                    - 11-20 Transactions
                    - 21+ Transactions
                expectedMonthlyWithdrawals:
                  type: string
                  enum:
                    - 0-10 Transactions
                    - 11-20 Transactions
                    - 21+ Transactions
                phoneNumber:
                  type: string
                  minLength: 1
                birthdate:
                  type: string
                  format: date-time
                  title: ISO Date String
                countryOfCitizenship:
                  type: string
                  minLength: 1
                countryOfResidence:
                  type: string
                  minLength: 1
                govIdCountryOfIssuance:
                  type: string
                  minLength: 1
                politicallyExposedPerson:
                  type: boolean
                addressStreet1:
                  type: string
                  minLength: 1
                addressCity:
                  type: string
                  minLength: 1
                addressSubdivision:
                  type: string
                  minLength: 1
                country:
                  type: string
                  minLength: 1
                identificationNumber:
                  type: string
                  minLength: 1
                addressStreet2:
                  type: string
                  minLength: 1
                addressPostalCode:
                  type: string
                  minLength: 1
                digitalAssetWalletAddress:
                  type: string
                  minLength: 1
                notionalTradedEachMonth:
                  type: number
                isEntity:
                  type: boolean
                enterpriseName:
                  type: string
                  minLength: 1
                countryOfIncorporation:
                  type: string
                  minLength: 1
                dateOfIncorporation:
                  type: string
                  format: date-time
                  title: ISO Date String
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUpdateResponse'
  /api/evs/v1/identity/{id}/signatures:
    post:
      summary: POST Identity Submit Signatures
      description: Submit Contract Signatures for a given identity
      operationId: entity.validation.identity.signatures
      tags:
        - Entity Validation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties: {}
                - $ref: '#/components/schemas/ESignatures'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
  /api/evs/v1/identity/{identityId}/document:
    post:
      summary: Create Identity Document
      description: Create a Document for an Identity.
      operationId: entity.validation.identity.document.create
      tags:
        - Entity Validation
      parameters:
        - name: identityId
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                selectedIdClass:
                  type: string
                  enum:
                    - cct
                    - cid
                    - dl
                    - foid
                    - hic
                    - id
                    - ipp
                    - keyp
                    - ltpass
                    - munid
                    - myn
                    - nbi
                    - nric
                    - ofw
                    - rp
                    - pan
                    - pid
                    - pp
                    - ppc
                    - pr
                    - sss
                    - td
                    - tribalid
                    - umid
                    - vid
                    - visa
                    - wp
                frontPhoto: {}
                backPhoto: {}
                proofOfResidency: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostIdentityDocumentCreateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
  /api/evs/v1/identity/{identityId}/document/{documentId}:
    put:
      summary: Update Identity Document
      description: Upodate a Document for an Identity.
      operationId: entity.validation.identity.document.update
      tags:
        - Entity Validation
      parameters:
        - name: identityId
          in: path
          required: true
          schema:
            type: string
            title: uuid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            title: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                selectedIdClass:
                  type: string
                  enum:
                    - cct
                    - cid
                    - dl
                    - foid
                    - hic
                    - id
                    - ipp
                    - keyp
                    - ltpass
                    - munid
                    - myn
                    - nbi
                    - nric
                    - ofw
                    - rp
                    - pan
                    - pid
                    - pp
                    - ppc
                    - pr
                    - sss
                    - td
                    - tribalid
                    - umid
                    - vid
                    - visa
                    - wp
                frontPhoto: {}
                backPhoto: {}
                proofOfResidency: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutIdentityDocumentUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
  /api/evs/v1/identity/document:
    get:
      summary: Get Identity Document
      description: Get a document for an Identity.
      operationId: entity.validation.identity.document.get
      tags:
        - Entity Validation
      parameters:
        - name: identityId
          in: query
          schema:
            type: string
            title: uuid
        - name: documentId
          in: query
          schema:
            type: string
            title: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentGetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError2'
  /api/org/enterprise/{enterpriseId}:
    get:
      operationId: org.enterprise
      summary: Get child enterprise
      description: Get a child enterprise by its ID for a child enterprise within an organization.
      tags:
        - Enterprise Management
      parameters:
        - schema:
            type: string
          required: true
          name: enterpriseId
          in: path
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationEnterprise:
                    allOf:
                      - type: object
                        properties:
                          enterprise:
                            allOf:
                              - type: object
                                properties:
                                  id:
                                    type: string
                                  name:
                                    type: string
                                  additionalEnterpriseInfo:
                                    type: object
                                    properties:
                                      contact:
                                        type: object
                                        properties:
                                          addressType:
                                            type: string
                                          name:
                                            type: string
                                          street:
                                            type: string
                                          street2:
                                            anyOf:
                                              - type: string
                                              - nullable: true
                                              - nullable: true
                                          suite:
                                            anyOf:
                                              - type: string
                                              - nullable: true
                                              - nullable: true
                                          city:
                                            type: string
                                          state:
                                            type: string
                                          postalCode:
                                            type: string
                                          country:
                                            type: string
                                  bitgoOrg:
                                    type: string
                                    enum:
                                      - BitGo Trust
                                      - BitGo New York
                                      - BitGo Germany
                                      - BitGo Switzerland
                                      - Frankfurt DE Trust
                                      - BitGo Singapore
                                      - BitGo Sister Trust 1
                                      - BitGo Inc
                                  kycState:
                                    type: string
                                    enum:
                                      - unverified
                                      - approved
                                      - rejected
                                      - pending
                                  legalIdentifiers:
                                    allOf:
                                      - type: object
                                        properties:
                                          legalPersonNameIdentifierType:
                                            type: string
                                            enum:
                                              - LEGL
                                        required:
                                          - legalPersonNameIdentifierType
                                      - type: object
                                        properties:
                                          legalPersonName:
                                            type: string
                                  type:
                                    type: string
                                  latestSAVersionSigned:
                                    type: number
                                  travelRule:
                                    type: boolean
                                  productLicenses:
                                    type: array
                                    items:
                                      type: string
                                  canAccessBorrowing:
                                    type: boolean
                                  canAccessLending:
                                    type: boolean
                                  canAccessSettlement:
                                    type: boolean
                                  canAccessTrading:
                                    type: boolean
                                  canCreateColdWallet:
                                    type: boolean
                                  canCreateHotWallet:
                                    type: boolean
                                  canCreateCustodialWallet:
                                    type: boolean
                                  canCreateOffchainWallet:
                                    type: boolean
                                  oneTimeFees:
                                    type: array
                                    items:
                                      type: string
                                  upfrontPaymentStatus:
                                    type: string
                                  ethAlwaysUseHop:
                                    type: boolean
                                  usersViewAllWallets:
                                    type: boolean
                                  videoIdWaived:
                                    type: boolean
                                required:
                                  - id
                                  - name
                                  - additionalEnterpriseInfo
                                  - bitgoOrg
                                  - kycState
                                  - legalIdentifiers
                                  - type
                                  - latestSAVersionSigned
                                  - travelRule
                                  - productLicenses
                                  - canAccessBorrowing
                                  - canAccessLending
                                  - canAccessSettlement
                                  - canAccessTrading
                                  - canCreateColdWallet
                                  - canCreateHotWallet
                                  - canCreateCustodialWallet
                                  - canCreateOffchainWallet
                                  - oneTimeFees
                                  - upfrontPaymentStatus
                                  - ethAlwaysUseHop
                                  - usersViewAllWallets
                                  - videoIdWaived
                              - type: object
                                properties:
                                  accountType:
                                    type: string
                                    enum:
                                      - individual
                                      - entity
                                  businessModel:
                                    type: string
                                    enum:
                                      - bitgoAsAService
                                  salesforceAccountId:
                                    type: string
                                  salesforceOpportunityId:
                                    type: string
                                  salesEmail:
                                    type: string
                                  cheetahAccountId:
                                    type: string
                                  primaryContact:
                                    type: string
                                    minLength: 1
                                  organizationId:
                                    type: string
                                  emergencyPhone:
                                    type: string
                                  pricingPlan:
                                    type: string
                                  approvalsRequired:
                                    type: number
                                  mutablePolicyWindow:
                                    type: number
                                  freeze:
                                    type: object
                                    properties:
                                      time:
                                        anyOf:
                                          - type: string
                                          - type: string
                                      expires:
                                        anyOf:
                                          - type: string
                                          - type: string
                                  bitgoEthKey:
                                    type: string
                                  ethFeeAddress:
                                    type: string
                                  walletLimit:
                                    type: object
                                    additionalProperties:
                                      type: number
                                  preferredUi:
                                    type: string
                                    enum:
                                      - bg23
                                      - ''
                                  custodialWalletLimit:
                                    anyOf:
                                      - type: object
                                        additionalProperties:
                                          type: number
                                      - nullable: true
                                      - nullable: true
                                  featureFlags:
                                    type: array
                                    items:
                                      type: string
                                  labels:
                                    type: array
                                    items:
                                      type: string
                                  licenses:
                                    type: array
                                    items:
                                      type: string
                                  ellipticId:
                                    type: string
                                  ellipticHotWallets:
                                    type: boolean
                                  vaspId:
                                    type: string
                                  coinSpecific:
                                    type: object
                                    additionalProperties:
                                      nullable: true
                                  walletCounts:
                                    type: object
                                    properties:
                                      enterpriseWallets:
                                        type: object
                                        additionalProperties:
                                          type: number
                                    required:
                                      - enterpriseWallets
                                  activePricingType:
                                    anyOf:
                                      - allOf:
                                          - type: object
                                            properties:
                                              name:
                                                type: string
                                                enum:
                                                  - starter
                                                  - growth
                                                  - employee
                                            required:
                                              - name
                                          - type: object
                                            properties:
                                              startDate:
                                                anyOf:
                                                  - type: string
                                                  - type: string
                                              startReason:
                                                type: string
                                            required:
                                              - startDate
                                              - startReason
                                          - type: object
                                            properties:
                                              id:
                                                type: string
                                              endDate:
                                                anyOf:
                                                  - type: string
                                                  - type: string
                                                  - nullable: true
                                                  - nullable: true
                                              endReason:
                                                type: string
                                      - nullable: true
                                      - nullable: true
                                  source:
                                    type: string
                                    enum:
                                      - bitcoinBuilder
                                      - ftx
                                      - sofi
                                  totalWalletsCount:
                                    type: number
                                  internal:
                                    type: object
                                    properties:
                                      migratedToNewPolicyService:
                                        anyOf:
                                          - type: boolean
                                          - nullable: true
                                          - nullable: true
                                      policiesLocked:
                                        type: boolean
                                    required:
                                      - migratedToNewPolicyService
                                      - policiesLocked
                                  distributedCustody:
                                    type: object
                                    properties:
                                      signingBitgoOrg:
                                        type: string
                                        enum:
                                          - BitGo Trust
                                          - BitGo New York
                                          - BitGo Germany
                                          - BitGo Switzerland
                                          - Frankfurt DE Trust
                                          - BitGo Singapore
                                          - BitGo Sister Trust 1
                                          - BitGo Inc
                                    required:
                                      - signingBitgoOrg
                                  migratedToNewPolicyService:
                                    type: boolean
                                  videoIdUsers:
                                    type: array
                                    items:
                                      allOf:
                                        - type: object
                                          properties:
                                            email:
                                              type: string
                                              minLength: 1
                                            userId:
                                              type: string
                                              minLength: 1
                                            inviter:
                                              type: string
                                              minLength: 1
                                            state:
                                              type: string
                                              enum:
                                                - awaitingApproval
                                                - awaitingAcceptance
                                                - pendingSchedule
                                                - pendingInitialId
                                                - underReview
                                                - approved
                                                - rejected
                                                - archived
                                          required:
                                            - email
                                            - userId
                                            - inviter
                                            - state
                                        - type: object
                                          properties:
                                            videoCallId:
                                              type: string
                                            approvalDate:
                                              type: string
                                            archivedDate:
                                              type: string
                                            pendingApprovalId:
                                              type: string
                                            videoLink:
                                              type: string
                        required:
                          - enterprise
                      - type: object
                        properties:
                          account:
                            type: string
                        required:
                          - account
                required:
                  - organizationEnterprise
  /api/org/enterprise/{enterpriseId}/asset-balances:
    get:
      operationId: org.enterprise.assetbalances
      summary: List asset balances
      description: List asset balances by coin for a given enterprise
      tags:
        - Enterprise Management
      parameters:
        - schema:
            type: string
          required: true
          name: enterpriseId
          in: path
        - schema:
            type: string
            enum:
              - ARS
              - AUD
              - CAD
              - CLP
              - CNY
              - COP
              - DKK
              - EUR
              - GBP
              - INR
              - JPY
              - NOK
              - SEK
              - TRY
              - USD
              - UYU
              - ZAR
          required: false
          name: currency
          in: query
        - schema:
            type: string
          required: true
          name: enterprise
          in: query
        - schema:
            type: string
          required: false
          name: coin
          in: query
        - schema:
            anyOf:
              - type: boolean
              - type: string
                enum:
                  - 'true'
              - type: string
                enum:
                  - 'false'
          required: false
          name: showEmptyBalances
          in: query
        - schema:
            anyOf:
              - type: boolean
              - type: string
                enum:
                  - 'true'
              - type: string
                enum:
                  - 'false'
          required: false
          name: expandTradingBalance
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        balanceString:
                          type: string
                        spendableBalanceString:
                          type: string
                        coin:
                          type: string
                        lockedBalanceString:
                          type: string
                        stakedBalanceString:
                          type: string
                        confirmedBalanceString:
                          type: string
                        fiatValue:
                          type: number
                        displayValue:
                          type: string
                        humanReadableValue:
                          type: string
                        spendableFiatValue:
                          type: number
                        spendableDisplayValue:
                          type: string
                        lockedFiatValue:
                          type: number
                        lockedDisplayValue:
                          type: string
                        stakedFiatValue:
                          type: number
                        stakedDisplayValue:
                          type: string
                        confirmedFiatValue:
                          type: number
                        confirmedDisplayValue:
                          type: string
                        marketPrice:
                          type: number
                        portfolioPercent:
                          type: number
                      required:
                        - balanceString
                        - coin
                  total:
                    type: number
                required:
                  - balances
                  - total
  /api/org/search:
    get:
      operationId: org.search.results
      summary: Global search across the organization
      description: List of customers & transactions across the organization.
      tags:
        - Organization Search History
      parameters:
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
        - schema:
            type: string
          required: true
          name: searchTerm
          in: query
        - schema:
            type: string
            enum:
              - customers
              - transactions
          required: false
          name: searchType
          in: query
        - schema:
            type: string
          required: false
          name: usersNextBatchPrevId
          in: query
        - schema:
            type: string
          required: false
          name: transfersNextBatchPrevId
          in: query
        - schema:
            type: string
          required: false
          name: limit
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  userResults:
                    allOf:
                      - type: object
                        properties:
                          users:
                            type: array
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    id:
                                      type: string
                                    username:
                                      type: string
                                    name:
                                      type: object
                                      properties:
                                        first:
                                          type: string
                                        full:
                                          type: string
                                        last:
                                          type: string
                                      required:
                                        - first
                                        - full
                                        - last
                                    enterprises:
                                      type: array
                                      items:
                                        allOf:
                                          - type: object
                                            properties:
                                              permissions:
                                                type: array
                                                items:
                                                  type: string
                                            required:
                                              - permissions
                                          - type: object
                                            properties:
                                              id:
                                                type: string
                                              beneficialOwner:
                                                type: boolean
                                              name:
                                                type: string
                                    email:
                                      type: object
                                      properties:
                                        email:
                                          type: string
                                        verified:
                                          type: boolean
                                      required:
                                        - email
                                        - verified
                                  required:
                                    - id
                                    - username
                                    - name
                                    - enterprises
                                    - email
                                - type: object
                                  properties:
                                    agreements:
                                      allOf:
                                        - type: object
                                          properties:
                                            patriotAct:
                                              type: number
                                            termsOfUse:
                                              type: number
                                          required:
                                            - patriotAct
                                            - termsOfUse
                                        - type: object
                                          properties:
                                            patriotActAcceptanceDate:
                                              type: string
                                            termsOfUseAcceptanceDate:
                                              type: string
                                    allowedCoins:
                                      type: array
                                      items:
                                        type: string
                                    bitgoEmployee:
                                      type: boolean
                                    currency:
                                      type: object
                                      properties:
                                        bitcoinUnit:
                                          type: string
                                        currency:
                                          type: string
                                      required:
                                        - bitcoinUnit
                                        - currency
                                    disableReset2FA:
                                      type: boolean
                                    organizations:
                                      type: array
                                      items:
                                        allOf:
                                          - type: object
                                            properties:
                                              permissions:
                                                type: array
                                                items:
                                                  type: string
                                                  enum:
                                                    - admin
                                            required:
                                              - permissions
                                          - type: object
                                            properties:
                                              role:
                                                type: string
                                                enum:
                                                  - admin
                                                  - member
                                                  - customer
                                            required:
                                              - role
                                          - type: object
                                            properties:
                                              id:
                                                type: string
                                              name:
                                                type: string
                                    featureFlags:
                                      type: array
                                      items:
                                        type: string
                                    forceResetPassword:
                                      type: boolean
                                    identity:
                                      type: object
                                      properties:
                                        kyc:
                                          allOf:
                                            - type: object
                                              properties:
                                                available:
                                                  type: boolean
                                                required:
                                                  type: boolean
                                              required:
                                                - available
                                                - required
                                            - type: object
                                              properties:
                                                data:
                                                  allOf:
                                                    - type: object
                                                      properties:
                                                        state:
                                                          type: string
                                                          enum:
                                                            - unverified
                                                            - pending
                                                            - approved
                                                            - rejected
                                                            - qrscanned
                                                            - inreview
                                                            - flagged
                                                            - flagged_retry_allowed
                                                      required:
                                                        - state
                                                    - type: object
                                                      properties:
                                                        fields:
                                                          anyOf:
                                                            - nullable: true
                                                            - type: object
                                                              additionalProperties:
                                                                nullable: true
                                                            - nullable: true
                                                documents:
                                                  type: object
                                                  properties:
                                                    state:
                                                      type: string
                                                      enum:
                                                        - unverified
                                                        - pending
                                                        - approved
                                                        - rejected
                                                        - qrscanned
                                                        - inreview
                                                        - flagged
                                                        - flagged_retry_allowed
                                                  required:
                                                    - state
                                                failureCount:
                                                  type: number
                                                fullyRequired:
                                                  type: boolean
                                                hasVideoID:
                                                  type: boolean
                                                overallState:
                                                  type: string
                                                  enum:
                                                    - unverified
                                                    - pending
                                                    - approved
                                                    - rejected
                                                    - qrscanned
                                                    - inreview
                                                    - flagged
                                                    - flagged_retry_allowed
                                                passport:
                                                  allOf:
                                                    - type: object
                                                      properties:
                                                        required:
                                                          type: boolean
                                                      required:
                                                        - required
                                                    - type: object
                                                      properties:
                                                        state:
                                                          type: string
                                                          enum:
                                                            - unverified
                                                            - pending
                                                            - approved
                                                            - rejected
                                                            - qrscanned
                                                            - inreview
                                                            - flagged
                                                            - flagged_retry_allowed
                                                residency:
                                                  type: object
                                                  properties:
                                                    state:
                                                      type: string
                                                      enum:
                                                        - unverified
                                                        - pending
                                                        - approved
                                                        - rejected
                                                        - qrscanned
                                                        - inreview
                                                        - flagged
                                                        - flagged_retry_allowed
                                                  required:
                                                    - state
                                                isScreeningRequired:
                                                  type: boolean
                                                enterpriseVideoCallInfo:
                                                  type: array
                                                  items:
                                                    type: object
                                                    properties:
                                                      enterpriseId:
                                                        type: string
                                                      videoCallId:
                                                        type: string
                                                    required:
                                                      - enterpriseId
                                                      - videoCallId
                                        verified:
                                          type: boolean
                                    otpDevices:
                                      type: array
                                      items:
                                        allOf:
                                          - type: object
                                            properties:
                                              createDate:
                                                type: string
                                              id:
                                                type: string
                                            required:
                                              - createDate
                                              - id
                                          - type: object
                                            properties:
                                              backupPhone:
                                                type: string
                                              label:
                                                type: string
                                              lastValidatedDate:
                                                type: string
                                              phone:
                                                type: string
                                              registeredKey:
                                                type: object
                                                properties:
                                                  certificate:
                                                    type: string
                                                  keyHandle:
                                                    type: string
                                                  publicKey:
                                                    type: string
                                              type:
                                                type: string
                                                enum:
                                                  - authy
                                                  - totp
                                                  - u2f
                                                  - webauthn
                                                  - yubikey
                                              verified:
                                                type: boolean
                                              scopes:
                                                type: array
                                                items:
                                                  type: string
                                                  enum:
                                                    - wallet_hot
                                              extensions:
                                                type: object
                                                additionalProperties:
                                                  type: boolean
                                              prfSalt:
                                                type: string
                                    phone:
                                      type: object
                                      properties:
                                        phone:
                                          anyOf:
                                            - type: string
                                            - nullable: true
                                            - nullable: true
                                        verified:
                                          type: boolean
                                      required:
                                        - phone
                                        - verified
                                    timezone:
                                      type: string
                                  required:
                                    - agreements
                                    - allowedCoins
                                    - bitgoEmployee
                                    - currency
                                    - disableReset2FA
                                    - organizations
                                    - featureFlags
                                    - forceResetPassword
                                    - identity
                                    - otpDevices
                                    - phone
                                    - timezone
                                - type: object
                                  properties:
                                    apps:
                                      nullable: true
                                    country:
                                      type: string
                                    ecdhKeychain:
                                      anyOf:
                                        - type: string
                                        - nullable: true
                                        - nullable: true
                                    isActive:
                                      type: boolean
                                    isFrozen:
                                      type: boolean
                                    freezeReason:
                                      type: string
                                    lastLogin:
                                      type: string
                                    locale:
                                      type: string
                                    pgpKey:
                                      type: string
                                    rateLimits:
                                      nullable: true
                                    referrer:
                                      type: object
                                      properties:
                                        campaign:
                                          anyOf:
                                            - type: string
                                            - nullable: true
                                            - nullable: true
                                        source:
                                          anyOf:
                                            - type: string
                                            - nullable: true
                                            - nullable: true
                                    signupDomain:
                                      type: string
                                    state:
                                      type: string
                                    sourceVerificationRequired:
                                      type: boolean
                                    sourceVerificationRequiredForReadOnlyAccess:
                                      type: boolean
                                    recoveryCodeSet:
                                      type: object
                                      properties:
                                        id:
                                          type: string
                                        allCodesUsed:
                                          type: boolean
                                      required:
                                        - id
                                        - allCodesUsed
                        required:
                          - users
                      - type: object
                        properties:
                          nextBatchPrevId:
                            type: string
                  transferResults:
                    type: object
                    properties:
                      transfers:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                coin:
                                  type: string
                                date:
                                  type: string
                                entries:
                                  type: array
                                  items:
                                    allOf:
                                      - type: object
                                        properties:
                                          address:
                                            type: string
                                        required:
                                          - address
                                      - type: object
                                        properties:
                                          valueString:
                                            type: string
                                          isChange:
                                            type: boolean
                                          wallet:
                                            type: string
                                          value:
                                            type: number
                                          nftSymbol:
                                            type: string
                                          type:
                                            type: string
                                            enum:
                                              - flushForwarderTokens
                                              - walletFunding
                                              - walletInitialization
                                              - addressInitialization
                                              - importedOutput
                                history:
                                  type: array
                                  items:
                                    allOf:
                                      - type: object
                                        properties:
                                          action:
                                            type: string
                                            enum:
                                              - created
                                              - approved
                                              - rejected
                                              - signed
                                              - unconfirmed
                                              - confirmed
                                              - removed
                                              - commented
                                              - failed
                                              - regenerated
                                              - replaced
                                              - replacing
                                              - abandoned
                                          date:
                                            type: string
                                        required:
                                          - action
                                          - date
                                      - type: object
                                        properties:
                                          comment:
                                            anyOf:
                                              - type: string
                                              - nullable: true
                                              - nullable: true
                                          transferId:
                                            type: string
                                          txid:
                                            type: string
                                          user:
                                            type: string
                                id:
                                  type: string
                                state:
                                  type: string
                                  enum:
                                    - initialized
                                    - pendingApproval
                                    - rejected
                                    - signed
                                    - unconfirmed
                                    - confirmed
                                    - removed
                                    - failed
                                    - replaced
                                    - deleted
                                type:
                                  type: string
                                  enum:
                                    - send
                                    - receive
                                valueString:
                                  type: string
                                wallet:
                                  type: string
                              required:
                                - coin
                                - date
                                - entries
                                - history
                                - id
                                - state
                                - type
                                - valueString
                                - wallet
                            - type: object
                              properties:
                                baseValue:
                                  type: number
                                baseValueString:
                                  type: string
                                comment:
                                  anyOf:
                                    - type: string
                                    - nullable: true
                                    - nullable: true
                                enterprise:
                                  type: string
                                organization:
                                  type: string
                                bitgoOrg:
                                  type: string
                                pendingApproval:
                                  type: string
                                stakingParams:
                                  allOf:
                                    - type: object
                                      properties:
                                        actionType:
                                          type: string
                                        requestId:
                                          type: string
                                      required:
                                        - actionType
                                        - requestId
                                    - type: object
                                      properties:
                                        source:
                                          type: string
                                          enum:
                                            - external
                                            - internal
                                        validator:
                                          type: string
                                txid:
                                  type: string
                                usd:
                                  type: number
                                usdRate:
                                  type: number
                                value:
                                  type: number
                                replaces:
                                  type: array
                                  items:
                                    type: string
                                replacedBy:
                                  type: array
                                  items:
                                    type: string
                            - type: object
                              properties:
                                sender:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                    walletId:
                                      type: string
                                    walletLabel:
                                      type: string
                                    valueString:
                                      type: string
                                  required:
                                    - address
                                receiver:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                      walletId:
                                        type: string
                                      walletLabel:
                                        type: string
                                      valueString:
                                        type: string
                                    required:
                                      - address
                                total:
                                  type: object
                                  properties:
                                    fiatValue:
                                      type: number
                                    displayValue:
                                      type: string
                                amountSent:
                                  type: object
                                  properties:
                                    fiatValue:
                                      type: number
                                    displayValue:
                                      type: string
                                networkFee:
                                  type: object
                                  properties:
                                    fiatValue:
                                      type: number
                                    displayValue:
                                      type: string
                                paygoFee:
                                  type: object
                                  properties:
                                    fiatValue:
                                      type: number
                                    displayValue:
                                      type: string
                                consolidateId:
                                  type: string
                              required:
                                - sender
                                - receiver
                      nextBatchPrevId:
                        type: string
                    required:
                      - transfers
  /api/org/search/history:
    get:
      operationId: org.search.history
      summary: List org search history
      description: List all previously queried search-history items for an organization.
      tags:
        - Organization Search History
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  searchHistory:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        searchTerm:
                          type: string
                        date:
                          type: string
                      required:
                        - id
                        - searchTerm
                        - date
                required:
                  - searchHistory
    post:
      operationId: org.search.history.create
      summary: Create search history item
      description: Create a new search history item for reference later
      tags:
        - Organization Search History
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                searchTerm:
                  type: string
                  minLength: 1
                orgId:
                  type: string
              required:
                - searchTerm
                - orgId
              description: Create Search History Item
      responses:
        '201':
          description: Search history item created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  searchTerm:
                    type: string
                  date:
                    type: string
                required:
                  - id
                  - searchTerm
                  - date
    delete:
      operationId: org.search.history.delete
      summary: Delete a search history item
      description: Delete an existing search history item or all history for a given organization
      tags:
        - Organization Search History
      parameters:
        - schema:
            type: string
          required: true
          name: orgId
          in: query
        - schema:
            type: string
          required: false
          name: id
          in: query
      responses:
        '200':
          description: Search history item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedRows:
                    type: number
                required:
                  - deletedRows
  /api/org/timeline/transfer:
    get:
      operationId: org.timeline.transfer
      summary: List org transfer timeline
      description: List all timeline events for a given transfer within an organization.
      tags:
        - Organization Transfers
      parameters:
        - schema:
            type: string
          required: true
          name: transferId
          in: query
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - message
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - walletShareInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            walletId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - walletId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - walletAdminApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            finalApproverIds:
                              type: array
                              items:
                                type: string
                            walletId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - finalApproverIds
                            - walletId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - walletAdminVideoVerification
                            creatorId:
                              type: string
                            transferId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - transferId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - enterpriseInviteInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            enterpriseId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - enterpriseId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - enterpriseOwnerApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            enterpriseId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - enterpriseId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - enterpriseUserApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            enterpriseId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - enterpriseId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - transferInitiated
                            creatorId:
                              type: string
                            hasBeenApproved:
                              type: boolean
                            pendingApprovalId:
                              type: string
                            transferId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - hasBeenApproved
                            - transferId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - transferApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            finalApproverIds:
                              type: array
                              items:
                                type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            transferId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - finalApproverIds
                            - approvers
                            - transferId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - policyChangeInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            policyType:
                              anyOf:
                                - type: string
                                  enum:
                                    - advancedWhitelist
                                - type: string
                                  enum:
                                    - allTx
                                - type: string
                                  enum:
                                    - velocityLimit
                                - type: string
                                  enum:
                                    - coinAddressWhitelist
                                - type: string
                                  enum:
                                    - transactionLimit
                                - type: string
                                  enum:
                                    - bitcoinAddressWhitelist
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - policyType
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - pendingApprovalInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            walletId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - walletId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - pendingSignature
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - finalApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            finalApproverIds:
                              type: array
                              items:
                                type: string
                            walletId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - finalApproverIds
                            - walletId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - updateOrganizationInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            organizationId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - organizationId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - organizationOwnerApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            organizationId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - organizationId
                            - approvalsRequired
                required:
                  - events
  /api/org/timeline/activity:
    get:
      operationId: org.timeline.activity
      summary: List org activity timeline
      description: List all timeline events for a given pending approval within an organization.
      tags:
        - Organization Management
      parameters:
        - schema:
            type: string
          required: true
          name: pendingApprovalId
          in: query
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - message
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - walletShareInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            walletId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - walletId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - walletAdminApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            finalApproverIds:
                              type: array
                              items:
                                type: string
                            walletId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - finalApproverIds
                            - walletId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - walletAdminVideoVerification
                            creatorId:
                              type: string
                            transferId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - transferId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - enterpriseInviteInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            enterpriseId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - enterpriseId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - enterpriseOwnerApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            enterpriseId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - enterpriseId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - enterpriseUserApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            enterpriseId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - enterpriseId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - transferInitiated
                            creatorId:
                              type: string
                            hasBeenApproved:
                              type: boolean
                            pendingApprovalId:
                              type: string
                            transferId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - hasBeenApproved
                            - transferId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - transferApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            finalApproverIds:
                              type: array
                              items:
                                type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            transferId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - finalApproverIds
                            - approvers
                            - transferId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - policyChangeInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            policyType:
                              anyOf:
                                - type: string
                                  enum:
                                    - advancedWhitelist
                                - type: string
                                  enum:
                                    - allTx
                                - type: string
                                  enum:
                                    - velocityLimit
                                - type: string
                                  enum:
                                    - coinAddressWhitelist
                                - type: string
                                  enum:
                                    - transactionLimit
                                - type: string
                                  enum:
                                    - bitcoinAddressWhitelist
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - policyType
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - pendingApprovalInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            walletId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - walletId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - pendingSignature
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - finalApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            finalApproverIds:
                              type: array
                              items:
                                type: string
                            walletId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - finalApproverIds
                            - walletId
                            - approvalsRequired
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - updateOrganizationInitiated
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            organizationId:
                              type: string
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - organizationId
                        - type: object
                          properties:
                            title:
                              type: string
                            identifier:
                              anyOf:
                                - type: string
                                  enum:
                                    - depositInitiated
                                - type: string
                                  enum:
                                    - depositConfirmed
                                - type: string
                                  enum:
                                    - transferInitiated
                                - type: string
                                  enum:
                                    - transferSigned
                                - type: string
                                  enum:
                                    - transferCommented
                                - type: string
                                  enum:
                                    - broadcastTransferOnChain
                                - type: string
                                  enum:
                                    - transferConfirmed
                                - type: string
                                  enum:
                                    - transferFailed
                                - type: string
                                  enum:
                                    - transferRejected
                                - type: string
                                  enum:
                                    - fiatSending
                                - type: string
                                  enum:
                                    - fiatSent
                                - type: string
                                  enum:
                                    - fiatFailed
                                - type: string
                                  enum:
                                    - pendingApprovalInitiated
                                - type: string
                                  enum:
                                    - pendingApprovalPending
                                - type: string
                                  enum:
                                    - pendingApprovalRequest
                                - type: string
                                  enum:
                                    - pendingApprovalApproved
                                - type: string
                                  enum:
                                    - pendingApprovalRejected
                                - type: string
                                  enum:
                                    - pendingApprovalRescinded
                                - type: string
                                  enum:
                                    - pendingApprovalResolved
                                - type: string
                                  enum:
                                    - pendingFinalApproval
                                - type: string
                                  enum:
                                    - transferPendingApproval
                                - type: string
                                  enum:
                                    - transferPAApproved
                                - type: string
                                  enum:
                                    - transferPendingVideoIDApproval
                                - type: string
                                  enum:
                                    - finalApprovalApproved
                                - type: string
                                  enum:
                                    - videoApprovalApproved
                                - type: string
                                  enum:
                                    - pendingIdVerification
                                - type: string
                                  enum:
                                    - awaitingSignature
                                - type: string
                                  enum:
                                    - pendingCustodianApproval
                                - type: string
                                  enum:
                                    - messageSignDetected
                                - type: string
                                  enum:
                                    - messageSignPending
                                - type: string
                                  enum:
                                    - messageSignResolved
                                - type: string
                                  enum:
                                    - transactionRequestPendingSignature
                                - type: string
                                  enum:
                                    - transactionRequestSigned
                                - type: string
                                  enum:
                                    - transactionRequestCanceled
                            content:
                              type: string
                            status:
                              anyOf:
                                - type: string
                                  enum:
                                    - past
                                - type: string
                                  enum:
                                    - past-failed
                                - type: string
                                  enum:
                                    - past-success
                                - type: string
                                  enum:
                                    - present
                                - type: string
                                  enum:
                                    - future
                            createdAt:
                              type: string
                            type:
                              type: string
                              enum:
                                - organizationOwnerApproval
                            creatorId:
                              type: string
                            pendingApprovalId:
                              type: string
                            approvers:
                              type: array
                              items:
                                type: string
                            resolvers:
                              type: array
                              items:
                                type: object
                                properties:
                                  user:
                                    type: string
                                  resolutionAction:
                                    type: string
                                  date:
                                    type: string
                                  resolutionType:
                                    type: string
                                required:
                                  - user
                                  - resolutionAction
                                  - date
                                  - resolutionType
                            organizationId:
                              type: string
                            approvalsRequired:
                              type: number
                          required:
                            - title
                            - identifier
                            - content
                            - status
                            - type
                            - creatorId
                            - pendingApprovalId
                            - approvers
                            - organizationId
                            - approvalsRequired
                required:
                  - events
  /api/org/orders:
    get:
      operationId: org.trades.orders
      summary: List org trade orders
      description: List all trade orders for an organization.
      tags:
        - Organization Trades
      parameters:
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
        - schema:
            type: string
          required: false
          name: enterpriseId
          in: query
        - schema:
            type: string
          required: false
          name: accountId
          in: query
        - schema:
            type: string
          required: false
          name: orderId
          in: query
        - schema:
            type: string
          required: false
          name: dateGte
          in: query
        - schema:
            type: string
          required: false
          name: dateLt
          in: query
        - schema:
            type: string
            enum:
              - canceled
              - completed
              - error
              - open
              - pending_cancel
              - pending_open
              - scheduled
          required: false
          name: status
          in: query
        - schema:
            type: string
            enum:
              - buy
              - sell
          required: false
          name: side
          in: query
        - schema:
            type: string
          required: false
          name: product
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        accountId:
                          type: string
                        clientOrderId:
                          type: string
                        time:
                          type: string
                        creationDate:
                          type: string
                        scheduledDate:
                          type: string
                        lastFillDate:
                          type: string
                        completionDate:
                          type: string
                        settleDate:
                          type: string
                        type:
                          type: string
                        fundingType:
                          anyOf:
                            - type: string
                              enum:
                                - margin
                            - type: string
                              enum:
                                - funded
                        notes:
                          type: string
                        status:
                          anyOf:
                            - type: string
                              enum:
                                - pending_open
                            - type: string
                              enum:
                                - open
                            - type: string
                              enum:
                                - completed
                            - type: string
                              enum:
                                - pending_cancel
                            - type: string
                              enum:
                                - canceled
                            - type: string
                              enum:
                                - error
                            - type: string
                              enum:
                                - scheduled
                        product:
                          type: string
                        side:
                          anyOf:
                            - type: string
                              enum:
                                - buy
                            - type: string
                              enum:
                                - sell
                        quantity:
                          type: string
                        quantityCurrency:
                          type: string
                        filledQuantity:
                          type: string
                        filledQuoteQuantity:
                          type: string
                        averagePrice:
                          type: string
                        limitPrice:
                          type: string
                        initiatedByUserId:
                          type: string
                        canceledByUserId:
                          type: string
                          nullable: true
                        duration:
                          type: number
                        timeInForce:
                          anyOf:
                            - type: string
                              enum:
                                - FOK
                            - type: string
                              enum:
                                - GTC
                            - type: string
                              enum:
                                - GTT
                            - type: string
                              enum:
                                - IOC
                      required:
                        - id
                        - accountId
                        - time
                        - creationDate
                        - completionDate
                        - type
                        - fundingType
                        - status
                        - product
                        - side
                        - quantity
                        - quantityCurrency
                        - filledQuantity
                        - filledQuoteQuantity
                        - averagePrice
                        - canceledByUserId
                required:
                  - data
  /api/org/orders/{orderId}:
    get:
      operationId: org.trades.orders.id
      summary: Get org trade order
      description: Get a trade order by its ID for a trade order within an organization.
      tags:
        - Organization Trades
      parameters:
        - schema:
            type: string
          required: true
          name: orderId
          in: path
        - schema:
            type: object
            properties:
              orderId:
                type: string
            required:
              - orderId
          required: true
          name: params
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    type: object
                    properties:
                      id:
                        type: string
                      accountId:
                        type: string
                      clientOrderId:
                        type: string
                      time:
                        type: string
                      creationDate:
                        type: string
                      scheduledDate:
                        type: string
                      lastFillDate:
                        type: string
                      completionDate:
                        type: string
                      settleDate:
                        type: string
                      type:
                        type: string
                      fundingType:
                        anyOf:
                          - type: string
                            enum:
                              - margin
                          - type: string
                            enum:
                              - funded
                      notes:
                        type: string
                      status:
                        anyOf:
                          - type: string
                            enum:
                              - pending_open
                          - type: string
                            enum:
                              - open
                          - type: string
                            enum:
                              - completed
                          - type: string
                            enum:
                              - pending_cancel
                          - type: string
                            enum:
                              - canceled
                          - type: string
                            enum:
                              - error
                          - type: string
                            enum:
                              - scheduled
                      product:
                        type: string
                      side:
                        anyOf:
                          - type: string
                            enum:
                              - buy
                          - type: string
                            enum:
                              - sell
                      quantity:
                        type: string
                      quantityCurrency:
                        type: string
                      filledQuantity:
                        type: string
                      filledQuoteQuantity:
                        type: string
                      averagePrice:
                        type: string
                      limitPrice:
                        type: string
                      initiatedByUserId:
                        type: string
                      canceledByUserId:
                        type: string
                        nullable: true
                      duration:
                        type: number
                      timeInForce:
                        anyOf:
                          - type: string
                            enum:
                              - FOK
                          - type: string
                            enum:
                              - GTC
                          - type: string
                            enum:
                              - GTT
                          - type: string
                            enum:
                              - IOC
                    required:
                      - id
                      - accountId
                      - time
                      - creationDate
                      - completionDate
                      - type
                      - fundingType
                      - status
                      - product
                      - side
                      - quantity
                      - quantityCurrency
                      - filledQuantity
                      - filledQuoteQuantity
                      - averagePrice
                      - canceledByUserId
                required:
                  - order
  /api/org/order/fills:
    get:
      operationId: org.trades.order.fills
      summary: List org trade order fills
      description: List all trade order fills for an organization.
      tags:
        - Organization Trades
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        orderId:
                          type: string
                        time:
                          type: string
                        product:
                          type: string
                        side:
                          anyOf:
                            - type: string
                              enum:
                                - buy
                            - type: string
                              enum:
                                - sell
                        price:
                          type: string
                        quoteQuantity:
                          type: string
                        quantity:
                          type: string
                        settled:
                          type: boolean
                      required:
                        - id
                        - orderId
                        - time
                        - product
                        - side
                        - price
                        - quoteQuantity
                        - quantity
                        - settled
                required:
                  - data
  /api/org/products:
    get:
      operationId: org.trades.products
      summary: List org trade products
      description: List all trade products for an organization.
      tags:
        - Organization Trades
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        baseCurrencyId:
                          type: string
                        baseCurrency:
                          type: string
                        quoteCurrencyId:
                          type: string
                        quoteCurrency:
                          type: string
                        baseMinSize:
                          type: string
                        baseMaxSize:
                          type: string
                        baseIncrement:
                          type: string
                        quoteMinSize:
                          type: string
                        quoteIncrement:
                          type: string
                        isTradeDisabled:
                          type: boolean
                        isMarginTradeSupported:
                          type: boolean
                        quoteDisplayPrecision:
                          type: number
                      required:
                        - id
                        - name
                        - baseCurrencyId
                        - baseCurrency
                        - quoteCurrencyId
                        - quoteCurrency
                        - baseMinSize
                        - quoteMinSize
                        - quoteIncrement
                        - isTradeDisabled
                        - isMarginTradeSupported
                required:
                  - data
  /api/org/transfers:
    get:
      operationId: org.transfers.list
      summary: List org transfers
      description: List all transfers within an organization.
      tags:
        - Organization Transfers
      parameters:
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
        - schema:
            type: string
          required: false
          name: search
          in: query
        - schema:
            type: string
          required: false
          name: txid
          in: query
        - schema:
            type: string
          required: false
          name: dateGte
          in: query
        - schema:
            type: string
          required: false
          name: dateLt
          in: query
        - schema:
            type: string
          required: false
          name: limit
          in: query
        - schema:
            type: string
          required: false
          name: prevId
          in: query
        - schema:
            anyOf:
              - type: string
                enum:
                  - initialized
                  - pendingApproval
                  - rejected
                  - signed
                  - unconfirmed
                  - confirmed
                  - removed
                  - failed
                  - replaced
                  - deleted
              - type: array
                items:
                  type: string
                  enum:
                    - initialized
                    - pendingApproval
                    - rejected
                    - signed
                    - unconfirmed
                    - confirmed
                    - removed
                    - failed
                    - replaced
                    - deleted
          required: false
          name: state
          in: query
        - schema:
            type: string
            enum:
              - send
              - receive
          required: false
          name: type
          in: query
        - schema:
            type: string
            enum:
              - ARS
              - AUD
              - CAD
              - CLP
              - CNY
              - COP
              - DKK
              - EUR
              - GBP
              - INR
              - JPY
              - NOK
              - SEK
              - TRY
              - USD
              - UYU
              - ZAR
          required: false
          name: currency
          in: query
        - schema:
            anyOf:
              - type: string
              - type: array
                items:
                  type: string
          required: false
          name: coin
          in: query
        - schema:
            type: string
          required: false
          name: enterpriseId
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfers:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            coin:
                              type: string
                            date:
                              type: string
                            entries:
                              type: array
                              items:
                                allOf:
                                  - type: object
                                    properties:
                                      address:
                                        type: string
                                    required:
                                      - address
                                  - type: object
                                    properties:
                                      valueString:
                                        type: string
                                      isChange:
                                        type: boolean
                                      wallet:
                                        type: string
                                      value:
                                        type: number
                                      nftSymbol:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - flushForwarderTokens
                                          - walletFunding
                                          - walletInitialization
                                          - addressInitialization
                                          - importedOutput
                            history:
                              type: array
                              items:
                                allOf:
                                  - type: object
                                    properties:
                                      action:
                                        type: string
                                        enum:
                                          - created
                                          - approved
                                          - rejected
                                          - signed
                                          - unconfirmed
                                          - confirmed
                                          - removed
                                          - commented
                                          - failed
                                          - regenerated
                                          - replaced
                                          - replacing
                                          - abandoned
                                      date:
                                        type: string
                                    required:
                                      - action
                                      - date
                                  - type: object
                                    properties:
                                      comment:
                                        anyOf:
                                          - type: string
                                          - nullable: true
                                          - nullable: true
                                      transferId:
                                        type: string
                                      txid:
                                        type: string
                                      user:
                                        type: string
                            id:
                              type: string
                            state:
                              type: string
                              enum:
                                - initialized
                                - pendingApproval
                                - rejected
                                - signed
                                - unconfirmed
                                - confirmed
                                - removed
                                - failed
                                - replaced
                                - deleted
                            type:
                              type: string
                              enum:
                                - send
                                - receive
                            valueString:
                              type: string
                            wallet:
                              type: string
                          required:
                            - coin
                            - date
                            - entries
                            - history
                            - id
                            - state
                            - type
                            - valueString
                            - wallet
                        - type: object
                          properties:
                            baseValue:
                              type: number
                            baseValueString:
                              type: string
                            comment:
                              anyOf:
                                - type: string
                                - nullable: true
                                - nullable: true
                            enterprise:
                              type: string
                            organization:
                              type: string
                            bitgoOrg:
                              type: string
                            pendingApproval:
                              type: string
                            stakingParams:
                              allOf:
                                - type: object
                                  properties:
                                    actionType:
                                      type: string
                                    requestId:
                                      type: string
                                  required:
                                    - actionType
                                    - requestId
                                - type: object
                                  properties:
                                    source:
                                      type: string
                                      enum:
                                        - external
                                        - internal
                                    validator:
                                      type: string
                            txid:
                              type: string
                            usd:
                              type: number
                            usdRate:
                              type: number
                            value:
                              type: number
                            replaces:
                              type: array
                              items:
                                type: string
                            replacedBy:
                              type: array
                              items:
                                type: string
                        - type: object
                          properties:
                            sender:
                              type: object
                              properties:
                                address:
                                  type: string
                                walletId:
                                  type: string
                                walletLabel:
                                  type: string
                                valueString:
                                  type: string
                              required:
                                - address
                            receiver:
                              type: array
                              items:
                                type: object
                                properties:
                                  address:
                                    type: string
                                  walletId:
                                    type: string
                                  walletLabel:
                                    type: string
                                  valueString:
                                    type: string
                                required:
                                  - address
                            total:
                              type: object
                              properties:
                                fiatValue:
                                  type: number
                                displayValue:
                                  type: string
                            amountSent:
                              type: object
                              properties:
                                fiatValue:
                                  type: number
                                displayValue:
                                  type: string
                            networkFee:
                              type: object
                              properties:
                                fiatValue:
                                  type: number
                                displayValue:
                                  type: string
                            paygoFee:
                              type: object
                              properties:
                                fiatValue:
                                  type: number
                                displayValue:
                                  type: string
                            consolidateId:
                              type: string
                          required:
                            - sender
                            - receiver
                  nextBatchPrevId:
                    type: string
                required:
                  - transfers
  /api/org/transfers/{transferId}:
    get:
      operationId: org.transfer
      summary: Get org transfer
      description: Get a transfer by its ID for a transfer within an organization.
      tags:
        - Organization Transfers
      parameters:
        - schema:
            type: string
          required: true
          name: transferId
          in: path
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
        - schema:
            type: string
            enum:
              - ARS
              - AUD
              - CAD
              - CLP
              - CNY
              - COP
              - DKK
              - EUR
              - GBP
              - INR
              - JPY
              - NOK
              - SEK
              - TRY
              - USD
              - UYU
              - ZAR
          required: false
          name: currency
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      coin:
                        type: string
                      date:
                        type: string
                      entries:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                address:
                                  type: string
                              required:
                                - address
                            - type: object
                              properties:
                                valueString:
                                  type: string
                                isChange:
                                  type: boolean
                                wallet:
                                  type: string
                                value:
                                  type: number
                                nftSymbol:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - flushForwarderTokens
                                    - walletFunding
                                    - walletInitialization
                                    - addressInitialization
                                    - importedOutput
                      history:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                action:
                                  type: string
                                  enum:
                                    - created
                                    - approved
                                    - rejected
                                    - signed
                                    - unconfirmed
                                    - confirmed
                                    - removed
                                    - commented
                                    - failed
                                    - regenerated
                                    - replaced
                                    - replacing
                                    - abandoned
                                date:
                                  type: string
                              required:
                                - action
                                - date
                            - type: object
                              properties:
                                comment:
                                  anyOf:
                                    - type: string
                                    - nullable: true
                                    - nullable: true
                                transferId:
                                  type: string
                                txid:
                                  type: string
                                user:
                                  type: string
                      id:
                        type: string
                      state:
                        type: string
                        enum:
                          - initialized
                          - pendingApproval
                          - rejected
                          - signed
                          - unconfirmed
                          - confirmed
                          - removed
                          - failed
                          - replaced
                          - deleted
                      type:
                        type: string
                        enum:
                          - send
                          - receive
                      valueString:
                        type: string
                      wallet:
                        type: string
                    required:
                      - coin
                      - date
                      - entries
                      - history
                      - id
                      - state
                      - type
                      - valueString
                      - wallet
                  - type: object
                    properties:
                      baseValue:
                        type: number
                      baseValueString:
                        type: string
                      comment:
                        anyOf:
                          - type: string
                          - nullable: true
                          - nullable: true
                      enterprise:
                        type: string
                      organization:
                        type: string
                      bitgoOrg:
                        type: string
                      pendingApproval:
                        type: string
                      stakingParams:
                        allOf:
                          - type: object
                            properties:
                              actionType:
                                type: string
                              requestId:
                                type: string
                            required:
                              - actionType
                              - requestId
                          - type: object
                            properties:
                              source:
                                type: string
                                enum:
                                  - external
                                  - internal
                              validator:
                                type: string
                      txid:
                        type: string
                      usd:
                        type: number
                      usdRate:
                        type: number
                      value:
                        type: number
                      replaces:
                        type: array
                        items:
                          type: string
                      replacedBy:
                        type: array
                        items:
                          type: string
                  - type: object
                    properties:
                      sender:
                        type: object
                        properties:
                          address:
                            type: string
                          walletId:
                            type: string
                          walletLabel:
                            type: string
                          valueString:
                            type: string
                        required:
                          - address
                      receiver:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                            walletId:
                              type: string
                            walletLabel:
                              type: string
                            valueString:
                              type: string
                          required:
                            - address
                      total:
                        type: object
                        properties:
                          fiatValue:
                            type: number
                          displayValue:
                            type: string
                      amountSent:
                        type: object
                        properties:
                          fiatValue:
                            type: number
                          displayValue:
                            type: string
                      networkFee:
                        type: object
                        properties:
                          fiatValue:
                            type: number
                          displayValue:
                            type: string
                      paygoFee:
                        type: object
                        properties:
                          fiatValue:
                            type: number
                          displayValue:
                            type: string
                      consolidateId:
                        type: string
                    required:
                      - sender
                      - receiver
  /api/org/users:
    get:
      operationId: org.users
      summary: List users across the organization
      description: List users across the organization
      tags:
        - User Management
      parameters:
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
        - schema:
            type: string
          required: false
          name: userId
          in: query
        - schema:
            type: string
          required: false
          name: username
          in: query
        - schema:
            type: string
          required: false
          name: search
          in: query
        - schema:
            anyOf:
              - type: number
              - type: string
          required: false
          name: limit
          in: query
        - schema:
            type: string
          required: false
          name: prevId
          in: query
        - schema:
            anyOf:
              - type: array
                items:
                  type: string
                  enum:
                    - admin
                    - member
                    - customer
              - type: string
                enum:
                  - admin
                  - member
                  - customer
          required: false
          name: role
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                id:
                                  type: string
                                username:
                                  type: string
                                name:
                                  type: object
                                  properties:
                                    first:
                                      type: string
                                    full:
                                      type: string
                                    last:
                                      type: string
                                  required:
                                    - first
                                    - full
                                    - last
                                enterprises:
                                  type: array
                                  items:
                                    allOf:
                                      - type: object
                                        properties:
                                          permissions:
                                            type: array
                                            items:
                                              type: string
                                        required:
                                          - permissions
                                      - type: object
                                        properties:
                                          id:
                                            type: string
                                          beneficialOwner:
                                            type: boolean
                                          name:
                                            type: string
                                email:
                                  type: object
                                  properties:
                                    email:
                                      type: string
                                    verified:
                                      type: boolean
                                  required:
                                    - email
                                    - verified
                              required:
                                - id
                                - username
                                - name
                                - enterprises
                                - email
                            - type: object
                              properties:
                                agreements:
                                  allOf:
                                    - type: object
                                      properties:
                                        patriotAct:
                                          type: number
                                        termsOfUse:
                                          type: number
                                      required:
                                        - patriotAct
                                        - termsOfUse
                                    - type: object
                                      properties:
                                        patriotActAcceptanceDate:
                                          type: string
                                        termsOfUseAcceptanceDate:
                                          type: string
                                allowedCoins:
                                  type: array
                                  items:
                                    type: string
                                bitgoEmployee:
                                  type: boolean
                                currency:
                                  type: object
                                  properties:
                                    bitcoinUnit:
                                      type: string
                                    currency:
                                      type: string
                                  required:
                                    - bitcoinUnit
                                    - currency
                                disableReset2FA:
                                  type: boolean
                                organizations:
                                  type: array
                                  items:
                                    allOf:
                                      - type: object
                                        properties:
                                          permissions:
                                            type: array
                                            items:
                                              type: string
                                              enum:
                                                - admin
                                        required:
                                          - permissions
                                      - type: object
                                        properties:
                                          role:
                                            type: string
                                            enum:
                                              - admin
                                              - member
                                              - customer
                                        required:
                                          - role
                                      - type: object
                                        properties:
                                          id:
                                            type: string
                                          name:
                                            type: string
                                featureFlags:
                                  type: array
                                  items:
                                    type: string
                                forceResetPassword:
                                  type: boolean
                                identity:
                                  type: object
                                  properties:
                                    kyc:
                                      allOf:
                                        - type: object
                                          properties:
                                            available:
                                              type: boolean
                                            required:
                                              type: boolean
                                          required:
                                            - available
                                            - required
                                        - type: object
                                          properties:
                                            data:
                                              allOf:
                                                - type: object
                                                  properties:
                                                    state:
                                                      type: string
                                                      enum:
                                                        - unverified
                                                        - pending
                                                        - approved
                                                        - rejected
                                                        - qrscanned
                                                        - inreview
                                                        - flagged
                                                        - flagged_retry_allowed
                                                  required:
                                                    - state
                                                - type: object
                                                  properties:
                                                    fields:
                                                      anyOf:
                                                        - nullable: true
                                                        - type: object
                                                          additionalProperties:
                                                            nullable: true
                                                        - nullable: true
                                            documents:
                                              type: object
                                              properties:
                                                state:
                                                  type: string
                                                  enum:
                                                    - unverified
                                                    - pending
                                                    - approved
                                                    - rejected
                                                    - qrscanned
                                                    - inreview
                                                    - flagged
                                                    - flagged_retry_allowed
                                              required:
                                                - state
                                            failureCount:
                                              type: number
                                            fullyRequired:
                                              type: boolean
                                            hasVideoID:
                                              type: boolean
                                            overallState:
                                              type: string
                                              enum:
                                                - unverified
                                                - pending
                                                - approved
                                                - rejected
                                                - qrscanned
                                                - inreview
                                                - flagged
                                                - flagged_retry_allowed
                                            passport:
                                              allOf:
                                                - type: object
                                                  properties:
                                                    required:
                                                      type: boolean
                                                  required:
                                                    - required
                                                - type: object
                                                  properties:
                                                    state:
                                                      type: string
                                                      enum:
                                                        - unverified
                                                        - pending
                                                        - approved
                                                        - rejected
                                                        - qrscanned
                                                        - inreview
                                                        - flagged
                                                        - flagged_retry_allowed
                                            residency:
                                              type: object
                                              properties:
                                                state:
                                                  type: string
                                                  enum:
                                                    - unverified
                                                    - pending
                                                    - approved
                                                    - rejected
                                                    - qrscanned
                                                    - inreview
                                                    - flagged
                                                    - flagged_retry_allowed
                                              required:
                                                - state
                                            isScreeningRequired:
                                              type: boolean
                                            enterpriseVideoCallInfo:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  enterpriseId:
                                                    type: string
                                                  videoCallId:
                                                    type: string
                                                required:
                                                  - enterpriseId
                                                  - videoCallId
                                    verified:
                                      type: boolean
                                otpDevices:
                                  type: array
                                  items:
                                    allOf:
                                      - type: object
                                        properties:
                                          createDate:
                                            type: string
                                          id:
                                            type: string
                                        required:
                                          - createDate
                                          - id
                                      - type: object
                                        properties:
                                          backupPhone:
                                            type: string
                                          label:
                                            type: string
                                          lastValidatedDate:
                                            type: string
                                          phone:
                                            type: string
                                          registeredKey:
                                            type: object
                                            properties:
                                              certificate:
                                                type: string
                                              keyHandle:
                                                type: string
                                              publicKey:
                                                type: string
                                          type:
                                            type: string
                                            enum:
                                              - authy
                                              - totp
                                              - u2f
                                              - webauthn
                                              - yubikey
                                          verified:
                                            type: boolean
                                          scopes:
                                            type: array
                                            items:
                                              type: string
                                              enum:
                                                - wallet_hot
                                          extensions:
                                            type: object
                                            additionalProperties:
                                              type: boolean
                                          prfSalt:
                                            type: string
                                phone:
                                  type: object
                                  properties:
                                    phone:
                                      anyOf:
                                        - type: string
                                        - nullable: true
                                        - nullable: true
                                    verified:
                                      type: boolean
                                  required:
                                    - phone
                                    - verified
                                timezone:
                                  type: string
                              required:
                                - agreements
                                - allowedCoins
                                - bitgoEmployee
                                - currency
                                - disableReset2FA
                                - organizations
                                - featureFlags
                                - forceResetPassword
                                - identity
                                - otpDevices
                                - phone
                                - timezone
                            - type: object
                              properties:
                                apps:
                                  nullable: true
                                country:
                                  type: string
                                ecdhKeychain:
                                  anyOf:
                                    - type: string
                                    - nullable: true
                                    - nullable: true
                                isActive:
                                  type: boolean
                                isFrozen:
                                  type: boolean
                                freezeReason:
                                  type: string
                                lastLogin:
                                  type: string
                                locale:
                                  type: string
                                pgpKey:
                                  type: string
                                rateLimits:
                                  nullable: true
                                referrer:
                                  type: object
                                  properties:
                                    campaign:
                                      anyOf:
                                        - type: string
                                        - nullable: true
                                        - nullable: true
                                    source:
                                      anyOf:
                                        - type: string
                                        - nullable: true
                                        - nullable: true
                                signupDomain:
                                  type: string
                                state:
                                  type: string
                                sourceVerificationRequired:
                                  type: boolean
                                sourceVerificationRequiredForReadOnlyAccess:
                                  type: boolean
                                recoveryCodeSet:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                    allCodesUsed:
                                      type: boolean
                                  required:
                                    - id
                                    - allCodesUsed
                    required:
                      - users
                  - type: object
                    properties:
                      nextBatchPrevId:
                        type: string
  /api/org/user/{userId}:
    get:
      operationId: org.user
      summary: Get user by id
      description: Get user by id
      tags:
        - User Management
      parameters:
        - schema:
            type: string
          required: true
          name: userId
          in: path
        - schema:
            type: string
          required: true
          name: organizationId
          in: query
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: string
                          username:
                            type: string
                          name:
                            type: object
                            properties:
                              first:
                                type: string
                              full:
                                type: string
                              last:
                                type: string
                            required:
                              - first
                              - full
                              - last
                          enterprises:
                            type: array
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    permissions:
                                      type: array
                                      items:
                                        type: string
                                  required:
                                    - permissions
                                - type: object
                                  properties:
                                    id:
                                      type: string
                                    beneficialOwner:
                                      type: boolean
                                    name:
                                      type: string
                          email:
                            type: object
                            properties:
                              email:
                                type: string
                              verified:
                                type: boolean
                            required:
                              - email
                              - verified
                        required:
                          - id
                          - username
                          - name
                          - enterprises
                          - email
                      - type: object
                        properties:
                          agreements:
                            allOf:
                              - type: object
                                properties:
                                  patriotAct:
                                    type: number
                                  termsOfUse:
                                    type: number
                                required:
                                  - patriotAct
                                  - termsOfUse
                              - type: object
                                properties:
                                  patriotActAcceptanceDate:
                                    type: string
                                  termsOfUseAcceptanceDate:
                                    type: string
                          allowedCoins:
                            type: array
                            items:
                              type: string
                          bitgoEmployee:
                            type: boolean
                          currency:
                            type: object
                            properties:
                              bitcoinUnit:
                                type: string
                              currency:
                                type: string
                            required:
                              - bitcoinUnit
                              - currency
                          disableReset2FA:
                            type: boolean
                          organizations:
                            type: array
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    permissions:
                                      type: array
                                      items:
                                        type: string
                                        enum:
                                          - admin
                                  required:
                                    - permissions
                                - type: object
                                  properties:
                                    role:
                                      type: string
                                      enum:
                                        - admin
                                        - member
                                        - customer
                                  required:
                                    - role
                                - type: object
                                  properties:
                                    id:
                                      type: string
                                    name:
                                      type: string
                          featureFlags:
                            type: array
                            items:
                              type: string
                          forceResetPassword:
                            type: boolean
                          identity:
                            type: object
                            properties:
                              kyc:
                                allOf:
                                  - type: object
                                    properties:
                                      available:
                                        type: boolean
                                      required:
                                        type: boolean
                                    required:
                                      - available
                                      - required
                                  - type: object
                                    properties:
                                      data:
                                        allOf:
                                          - type: object
                                            properties:
                                              state:
                                                type: string
                                                enum:
                                                  - unverified
                                                  - pending
                                                  - approved
                                                  - rejected
                                                  - qrscanned
                                                  - inreview
                                                  - flagged
                                                  - flagged_retry_allowed
                                            required:
                                              - state
                                          - type: object
                                            properties:
                                              fields:
                                                anyOf:
                                                  - nullable: true
                                                  - type: object
                                                    additionalProperties:
                                                      nullable: true
                                                  - nullable: true
                                      documents:
                                        type: object
                                        properties:
                                          state:
                                            type: string
                                            enum:
                                              - unverified
                                              - pending
                                              - approved
                                              - rejected
                                              - qrscanned
                                              - inreview
                                              - flagged
                                              - flagged_retry_allowed
                                        required:
                                          - state
                                      failureCount:
                                        type: number
                                      fullyRequired:
                                        type: boolean
                                      hasVideoID:
                                        type: boolean
                                      overallState:
                                        type: string
                                        enum:
                                          - unverified
                                          - pending
                                          - approved
                                          - rejected
                                          - qrscanned
                                          - inreview
                                          - flagged
                                          - flagged_retry_allowed
                                      passport:
                                        allOf:
                                          - type: object
                                            properties:
                                              required:
                                                type: boolean
                                            required:
                                              - required
                                          - type: object
                                            properties:
                                              state:
                                                type: string
                                                enum:
                                                  - unverified
                                                  - pending
                                                  - approved
                                                  - rejected
                                                  - qrscanned
                                                  - inreview
                                                  - flagged
                                                  - flagged_retry_allowed
                                      residency:
                                        type: object
                                        properties:
                                          state:
                                            type: string
                                            enum:
                                              - unverified
                                              - pending
                                              - approved
                                              - rejected
                                              - qrscanned
                                              - inreview
                                              - flagged
                                              - flagged_retry_allowed
                                        required:
                                          - state
                                      isScreeningRequired:
                                        type: boolean
                                      enterpriseVideoCallInfo:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            enterpriseId:
                                              type: string
                                            videoCallId:
                                              type: string
                                          required:
                                            - enterpriseId
                                            - videoCallId
                              verified:
                                type: boolean
                          otpDevices:
                            type: array
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    createDate:
                                      type: string
                                    id:
                                      type: string
                                  required:
                                    - createDate
                                    - id
                                - type: object
                                  properties:
                                    backupPhone:
                                      type: string
                                    label:
                                      type: string
                                    lastValidatedDate:
                                      type: string
                                    phone:
                                      type: string
                                    registeredKey:
                                      type: object
                                      properties:
                                        certificate:
                                          type: string
                                        keyHandle:
                                          type: string
                                        publicKey:
                                          type: string
                                    type:
                                      type: string
                                      enum:
                                        - authy
                                        - totp
                                        - u2f
                                        - webauthn
                                        - yubikey
                                    verified:
                                      type: boolean
                                    scopes:
                                      type: array
                                      items:
                                        type: string
                                        enum:
                                          - wallet_hot
                                    extensions:
                                      type: object
                                      additionalProperties:
                                        type: boolean
                                    prfSalt:
                                      type: string
                          phone:
                            type: object
                            properties:
                              phone:
                                anyOf:
                                  - type: string
                                  - nullable: true
                                  - nullable: true
                              verified:
                                type: boolean
                            required:
                              - phone
                              - verified
                          timezone:
                            type: string
                        required:
                          - agreements
                          - allowedCoins
                          - bitgoEmployee
                          - currency
                          - disableReset2FA
                          - organizations
                          - featureFlags
                          - forceResetPassword
                          - identity
                          - otpDevices
                          - phone
                          - timezone
                      - type: object
                        properties:
                          apps:
                            nullable: true
                          country:
                            type: string
                          ecdhKeychain:
                            anyOf:
                              - type: string
                              - nullable: true
                              - nullable: true
                          isActive:
                            type: boolean
                          isFrozen:
                            type: boolean
                          freezeReason:
                            type: string
                          lastLogin:
                            type: string
                          locale:
                            type: string
                          pgpKey:
                            type: string
                          rateLimits:
                            nullable: true
                          referrer:
                            type: object
                            properties:
                              campaign:
                                anyOf:
                                  - type: string
                                  - nullable: true
                                  - nullable: true
                              source:
                                anyOf:
                                  - type: string
                                  - nullable: true
                                  - nullable: true
                          signupDomain:
                            type: string
                          state:
                            type: string
                          sourceVerificationRequired:
                            type: boolean
                          sourceVerificationRequiredForReadOnlyAccess:
                            type: boolean
                          recoveryCodeSet:
                            type: object
                            properties:
                              id:
                                type: string
                              allCodesUsed:
                                type: boolean
                            required:
                              - id
                              - allCodesUsed
                required:
                  - user
  /api/v1/enterprise/{enterpriseId}/user:
    get:
      tags:
        - Enterprise
      summary: List enterprise users
      operationId: enterprise.user.list
      parameters:
        - $ref: '#/components/parameters/pathEnterpriseId'
        - name: allowInactiveUsers
          in: query
          description: Whether inactive Users whose emails are unverified should be returned as well
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidEnterpriseId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/enterprise/{enterpriseId}/walletLimits:
    get:
      tags:
        - Enterprise
      summary: Get enterprise's wallet limits
      operationId: enterprise.walletLimits
      parameters:
        - $ref: '#/components/parameters/pathEnterpriseId'
        - $ref: '#/components/parameters/coinSingleOrList'
        - name: isCustodial
          in: query
          description: Whether custodial limits should be returned
          schema:
            type: boolean
            enum:
              - true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletLimitsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidEnterpriseId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/enterprise/{enterpriseId}/feeAddressBalance:
    get:
      tags:
        - Enterprise
      summary: Get gas tank balance
      description: Returns gas tank balance for an asset.
      operationId: v2.enterprise.feeAddressBalance
      parameters:
        - $ref: '#/components/parameters/pathEnterpriseId'
        - $ref: '#/components/parameters/pathCoin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeAddressBalanceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidEnterpriseId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/enterprise/{enterpriseId}/transfer:
    get:
      tags:
        - Transfer
      summary: List all transfers on all wallets in an enterprise
      description: |
        Returns all the transfers without blockchain information (inputs, outputs, confirms). Use the coin specific route
        to annotate blockchain information.
      operationId: v2.enterprise.listtransfers
      parameters:
        - $ref: '#/components/parameters/coinArray'
        - $ref: '#/components/parameters/pathEnterpriseId'
        - $ref: '#/components/parameters/dateGte'
        - $ref: '#/components/parameters/dateLt'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/prevId'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/type'
        - name: sortBy
          description: Sorts by specified field, default sorting by heightId.
          in: query
          schema:
            type: string
            enum:
              - heightId
              - id
              - date
        - $ref: '#/components/parameters/txRequestSortDirection'
        - name: id
          in: query
          description: Filter for a transfer by one or more transfer ids
          schema:
            $ref: '#/components/schemas/Id'
        - name: address
          in: query
          description: Return transfers with elements in `entries` that have an `address` field set to this value
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressString3'
        - name: txid
          in: query
          description: Return transfers with a matching 'txid'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transfer'
                  nextBatchPrevId:
                    $ref: '#/components/schemas/NextBatchPrevId'
                required:
                  - transfers
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidEnterpriseId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/transfer:
    get:
      tags:
        - Transfer
      summary: List transfers on all wallets in an enterprise for a given coin and block height
      description: |
        Returns all the transfers. Currently requires an enterpriseId and block height.
      operationId: v2.listtransfers
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - name: enterpriseId
          in: query
          description: The enterprise ID
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: height
          in: query
          description: The block or ledger height to query
          required: true
          schema:
            $ref: '#/components/schemas/IntegerString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransfersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidEnterpriseId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/tx/fee:
    get:
      tags:
        - Transfer
      summary: Get fee estimate
      description: |-
        Returns the estimated fee for a transaction. UTXO coins will return a fee per kB, while Account-based coins will return a flat fee estimate.

        The fee estimate provided by BitGo is higher than the usual network fee. This additional fee is not charged by BitGo but is used to ensure that the transactions are processed faster and do not fail on the blockchain network.
      operationId: v2.tx.getfeeestimate
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - name: numBlocks
          schema:
            type: integer
          in: query
          description: target number of blocks
        - name: recipient
          schema:
            type: string
          in: query
          description: Recipient of the tx to estimate for (only for ETH)
        - name: data
          schema:
            type: string
          in: query
          description: ETH data of the tx to estimate for (only for ETH)
        - name: amount
          schema:
            type: string
          in: query
          description: Amount in base units being sent to estimate for (only for ETH)
        - name: hop
          schema:
            type: boolean
          in: query
          description: True if we are estimating for a hop tx, false or unspecified for a wallet tx (ETH, AVAXC and POLYGON)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EstimateTransactionFees'
                  - $ref: '#/components/schemas/EstimateTransactionFeesAccountCoin'
                  - $ref: '#/components/schemas/EstimateTransactionFeesAlgo'
                  - $ref: '#/components/schemas/EstimateTransactionFeesEth'
                  - $ref: '#/components/schemas/EstimateTransactionFeesTrx'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/averagefee:
    post:
      tags:
        - Wallet
      summary: Get average fee
      description: Returns the average fee for a specific number of blocks. Only for ETH and TETH.
      operationId: v2.wallet.getaveragefee
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - name: numBlocks
          schema:
            type: integer
          in: query
          description: target number of blocks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AverageFee'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/user/{id}:
    get:
      tags:
        - User
      summary: Get user
      description: |
        Returns the associated user
      operationId: user.get
      parameters:
        - name: id
          description: The user ID, email address, or `me` for the currently authenticated user
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: orgId
          description: The organization ID by which to filter the user's enterprises.
          in: query
          schema:
            type: string
        - name: maxEnterprises
          description: Specifies the maximum number of enterprises to return. An organization ID must be provided. The maximum limit is 50 enterprises.
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidUserId'
        '404':
          description: Not Found
  /api/v2/user/sharingkey:
    post:
      tags:
        - User
      summary: Get another users public key for wallet sharing
      operationId: user.sharingkey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSharingKey'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/key:
    get:
      tags:
        - Key
      summary: List keys
      operationId: v2.key.list
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    post:
      tags:
        - Key
      summary: Create key
      operationId: v2.key.add
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKey'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Key'
                  - $ref: '#/components/schemas/KeyTSSCreated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/{walletId}/policy/rule:
    post:
      tags:
        - Wallet Policy
      summary: Add wallet-policy rule
      description: |
        Adds a rule to a wallet’s policy. A wallet policy’s rules control the
        conditions under which BitGo will use its single key to sign a
        transaction. An email notification will be sent to all wallet users
        when a policy is updated. This email is NOT sent for the first time
        policy is added.
      operationId: v2.wallet.createpolicy
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRule'
            examples:
              Add Advanced Whitelist Example:
                value:
                  id: my-rule-id
                  type: advancedWhitelist
                  condition:
                    add:
                      type: my-wallet-id
                      item: my-item-id
                      metaData:
                        label: Recipient Wallet
                  action:
                    type: getApproval
                    userIds: []
              Remove Advanced Whitelist Example:
                value:
                  id: my-rule-id
                  type: advancedWhitelist
                  condition:
                    remove: my-address
                  action:
                    type: getApproval
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
    put:
      tags:
        - Wallet Policy
      summary: Update wallet-policy rule
      description: Updates a rule on the policy attached to a wallet
      operationId: v2.wallet.updatepolicy
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRemovePolicyRule'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
    delete:
      tags:
        - Wallet Policy
      summary: Delete wallet-policy rule
      description: Deletes a rule from the policy attached to a wallet
      operationId: v2.wallet.removepolicy
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRemovePolicyRule'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/pendingApprovals:
    get:
      tags:
        - Pending approval
      summary: List pending approvals
      operationId: v2.approval.list
      parameters:
        - $ref: '#/components/parameters/prevId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/coinArray'
        - $ref: '#/components/parameters/enterpriseId'
        - $ref: '#/components/parameters/organizationId'
        - name: requestType
          in: query
          schema:
            type: string
            enum:
              - enterpriseInviteRequest
              - genericRequest
              - policyRuleRequest
              - transactionRequest
              - transactionRequestFull
              - updateApprovalsRequiredRequest
              - updateEnterpriseRequest
              - updateOrganizationRequest
              - userChangeRequest
          description: |
            Filter by request type.  The default behavior is to return all request types.
        - name: state
          description: |
            Filter by state.  The default behavior is to return objects where state is `awaitingSignature`, `pending`, or `pendingFinalApproval`
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PendingApprovalStatePending1'
        - $ref: '#/components/parameters/walletId'
        - name: expandWalletLabels
          description: |
            True, if adding `walletLabel` to each returned pending approval associated with a `wallet`
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/expandAddressLabels'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApprovals'
  /api/v2/{coin}/wallet/{walletId}/transfer:
    get:
      tags:
        - Transfer
      summary: List transfers
      description: |
        Returns deposits and withdrawals for a wallet.  Transfers are sorted
        in descending order by `height`, then `id`. Transfers with `rejected`
        and `pendingApproval` states are excluded by default.
      operationId: v2.wallet.listtransfers
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/allTokens'
        - $ref: '#/components/parameters/dateGte'
        - $ref: '#/components/parameters/dateLt'
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/prevId'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/valueGte'
        - $ref: '#/components/parameters/valueLt'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/reverse'
        - name: id
          in: query
          description: Filter for a transfer by one or more transfer ids
          schema:
            $ref: '#/components/schemas/Id'
        - name: pendingApprovalId
          in: query
          description: Filter for a transfer with a matching pendingApprovalId
          schema:
            $ref: '#/components/schemas/Id'
        - name: address
          in: query
          description: Return transfers with elements in `entries` that have an `address` field set to this value
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressString3'
        - name: includeHex
          in: query
          description: Include the raw hex data of the transaction in the response (this may be a large amount of data)
          schema:
            type: boolean
        - name: memoId
          in: query
          description: Return transfers with any of the payment identifiers in this array. Available for Stellar and EOS.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/IntegerString'
        - name: includeRbf
          in: query
          description: True, if including Replace-By-Fee (RBF) transfers.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransfersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/{walletId}/depositinfo:
    get:
      tags:
        - Fiat
      summary: Get deposit information [DEPRECATED]
      description: |
        Collects all information needed for a deposit.
        DEPRECATED - The new API can be found at /api/v2/bankaccounts/deposit/info
      deprecated: true
      operationId: v2.wallet.depositinfo
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deposit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/transfer/{transferId}:
    get:
      tags:
        - Transfer
      summary: Get transfer
      description: |
        A transfer is a wallet specific object. Each transfer will only output the respective wallet id which the
        transfer is associated with.

        If there is a transaction between two BitGo wallets, then two transfers will be created, one for wallet A,
        and one for wallet B. Transfer A will only annotate the walletId on entries where the address belongs to
        wallet A. Transfer B will only annotate the walletId on entries where the address belongs to wallet B.
      operationId: v2.wallet.gettransfer
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathTransferId'
        - name: includeTxRequestCreatedDate
          in: query
          description: True, if returning the `txRequestCreatedDate`. This field is only present on transfers associated with a transaction request.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedTransferWithInputsOutputs'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedTransfer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidTransferId'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/transfer/sequenceId/{sequenceId}:
    get:
      tags:
        - Transfer
      summary: Get transfer by sequence id
      operationId: v2.wallet.gettransferbysequenceid
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathSequenceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedTransferWithInputsOutputs'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedTransfer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/user/lock:
    post:
      description: |
        Locks the current user session.  This disallows operations that require
        an unlocked token, such as sending a transaction.
      tags:
        - User
      summary: Lock session
      operationId: user.lock
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    $ref: '#/components/schemas/LockedSession'
  /api/v2/user/unlock:
    post:
      description: |
        Unlocks the current user session, enabling operations that require
        an unlocked token, such as sending a transaction. Call this endpoint
        if an API returns a `401` response with the `needsUnlock`
        body parameter set to `true`.

        **Note:** Unlocking a token with spending limits, removes all spending limits from the token.
      tags:
        - User
      summary: Unlock session
      operationId: user.unlock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlockRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    $ref: '#/components/schemas/Session1'
  /api/v2/{coin}/wallet:
    post:
      tags:
        - Wallet
      summary: \[DEPRECATED\] Add wallet (advanced only)
      description: |
        >**Note:** This route is deprecated in favor of [Add Wallet](https://developers.bitgo.com/api/v2.wallet.add).

        Add Wallet is for advanced API users. It lets you manually create and
        specify keys. The recommended (and simpler) method is [Generate Wallet](https://developers.bitgo.com/api/express.wallet.generate)
        with the SDK or BitGo Express. You can also create wallets in the BitGo UI.

        This API creates a new wallet for the user or enterprise. The keys to
        use with the new wallet (passed in the 'keys' parameter) must be
        registered with BitGo prior to using this API.

        BitGo currently only supports 2-of-3 (e.g., m=2 and n=3) wallets. The
        third key, and only the third key, must be a BitGo key. The first key
        is by convention the user key, with its encrypted xprv stored on BitGo.

        Ethereum and XRP wallets can only be created under an enterprise. Pass in the
        id of the enterprise to associate the wallet with. Your enterprise id
        can be seen by clicking on the "Manage Organization" link in the
        enterprise dropdown. Using the Add Wallet API, you can create a wallet
        using either the enterprise fee address (used by default for all
        wallets in the enterprise), or a unique fee address (created manually
        with the Keychains API). Pass the desired key as the third key ID in
        the 'keys' array. In either case, the fee address must be funded
        before creating the wallet.

        You cannot generate a wallet by passing in a subtoken (i.e. ERC20 token) as the coin.
        Subtokens use the wallet of their parent coin and it is not possible to create a
        wallet specific to one token. For example, to create a wallet for an ERC20 token,
        create an Ethereum wallet. It can hold any ERC20 tokens as well as Ether.

        BitGo Ethereum wallet is a smart-contract implementing multi-signature scheme.
        Because contracts itself can not initiate transactions, fee addresses are used
        for this purpose. Ethereum transactions initiated by a given address, are
        confirmed by the network in order of creation, so one lower fee transaction can
        potentially delay all subsequent transactions. To help lower network fee costs,
        two fee addresses are provided.

        `feeAddress` is a main fee address usable for all operations.
        `lowPriorityFeeAddress` is a secondary fee address that can be used to pay
        lower fee for Create Address operations without risking delaying subsequent
        higher-priority transactions initiated by main fee address.
      operationId: v2.wallet.add.deprecated
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWallet'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidEnterpriseId1'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    get:
      tags:
        - Wallet
      summary: List wallets by coin
      operationId: v2.wallet.listbycoin
      description: Lists all your wallets for a specific asset.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/prevId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/allTokens'
        - $ref: '#/components/parameters/excludeSpendableBalance'
        - $ref: '#/components/parameters/searchLabelWallets'
        - $ref: '#/components/parameters/showAllWallets'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletsWithCoinResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '404':
          description: Not Found
  /api/v2/{coin}/wallet/add:
    post:
      tags:
        - Wallet
      summary: Add wallet (advanced only)
      description: |
        Add Wallet is for advanced API users. It lets you manually create and
        specify keys. The recommended (and simpler) method is [Generate Wallet](https://developers.bitgo.com/api/express.wallet.generate)
        with the SDK or BitGo Express. You can also create wallets in the BitGo UI.

        This API creates a new wallet for the user or enterprise. The keys to
        use with the new wallet (passed in the 'keys' parameter) must be
        registered with BitGo prior to using this API.

        BitGo currently only supports 2-of-3 (e.g., m=2 and n=3) wallets. The
        third key, and only the third key, must be a BitGo key. The first key
        is by convention the user key, with its encrypted xprv stored on BitGo.

        Ethereum and XRP wallets can only be created under an enterprise. Pass in the
        id of the enterprise to associate the wallet with. Your enterprise id
        can be seen by clicking on the "Manage Organization" link in the
        enterprise dropdown. Using the Add Wallet API, you can create a wallet
        using either the enterprise fee address (used by default for all
        wallets in the enterprise), or a unique fee address (created manually
        with the Keychains API). Pass the desired key as the third key ID in
        the 'keys' array. In either case, the fee address must be funded
        before creating the wallet.

        You cannot generate a wallet by passing in a subtoken (i.e. ERC20 token) as the coin.
        Subtokens use the wallet of their parent coin and it is not possible to create a
        wallet specific to one token. For example, to create a wallet for an ERC20 token,
        create an Ethereum wallet. It can hold any ERC20 tokens as well as Ether.

        BitGo Ethereum wallet is a smart-contract implementing multi-signature scheme.
        Because contracts itself can not initiate transactions, fee addresses are used
        for this purpose. Ethereum transactions initiated by a given address, are
        confirmed by the network in order of creation, so one lower fee transaction can
        potentially delay all subsequent transactions. To help lower network fee costs,
        two fee addresses are provided.

        `feeAddress` is a main fee address usable for all operations.
        `lowPriorityFeeAddress` is a secondary fee address that can be used to pay
        lower fee for Create Address operations without risking delaying subsequent
        higher-priority transactions initiated by main fee address.
      operationId: v2.wallet.add
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWallet'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidEnterpriseId1'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/address/{address}:
    get:
      tags:
        - Wallet
      summary: Get wallet by address
      operationId: v2.wallet.getwalletbyaddress
      description: Get one wallet by its `coin` and receive `address`. Multiple receive addresses can map to one `walletId`.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathAddress'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '404':
          description: Not Found
  /api/v2/{coin}/wallet/{walletId}/user/{userId}:
    delete:
      tags:
        - Wallet
      summary: Remove user from wallet
      description: |
        After a user has accepted a wallet share, they become a party on a
        wallet and the wallet share is considered “complete”. In order to
        revoke the share after they have accepted, you can remove the user
        from the wallet.

        This operation requires approval by another wallet administrator
        if there is more than a single administrator on a wallet.
      operationId: v2.wallet.removeuser
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathUserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/CannotRemoveAdmin'
                  - $ref: '#/components/schemas/InvalidUserId'
                  - $ref: '#/components/schemas/InvalidWalletId'
        '404':
          description: Not Found
  /api/v2/{coin}/wallet/{walletId}/freeze:
    post:
      tags:
        - Wallet
      summary: Freeze wallet
      description: Lock the wallet, preventing any outgoing transactions for a specified number of seconds
      operationId: v2.wallet.freeze
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                duration:
                  type: number
                  description: time in seconds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Freeze1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '404':
          description: Not Found
  /api/v2/{coin}/wallet/{walletId}/maximumSpendable:
    get:
      tags:
        - Wallet
      summary: Get maximum spendable
      description: |
        Returns the maximum amount that can be spent with a single transaction
        on the wallet.

        The maximum spendable amount can differ from a wallet’s total balance.
        A transaction can only use up to 200 unspents. Wallets that have more
        than 200 unspents cannot spend the full balance in one transaction.
        Additionally, the value returned for the maximum spendable amount
        accounts for the current fee level by deducting the estimated fees.
        The amount will only be calculated based on the unspents that fit the
        parameters passed.
      operationId: v2.wallet.maximumspendable
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/enforceMinConfirmsForChange'
        - $ref: '#/components/parameters/feeRate'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/maxFeeRate'
        - $ref: '#/components/parameters/maxValue'
        - $ref: '#/components/parameters/minConfirms'
        - $ref: '#/components/parameters/minHeight'
        - $ref: '#/components/parameters/minValue'
        - $ref: '#/components/parameters/numBlocks'
        - $ref: '#/components/parameters/unspentIds'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletMaximumSpendable'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/wallet/{walletId}/reservedunspents:
    post:
      tags:
        - Wallet
      summary: Make unspent reservation
      description: Mark the unspents as reserved and cannot be used in transactions until the given expire time.
      operationId: v2.wallet.reservedunspent.add
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                unspentIds:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/UnspentId'
                expireTime:
                  type: string
                  description: Time when reservation expires. Use `date-time` format or 'never'. If 'never', reservation doesn't expire.
                type:
                  type: string
                  description: Type of reservation to make on the unspent.
                  enum:
                    - ordinal
                    - inscription
                inscriptionIds:
                  type: array
                  items:
                    $ref: '#/components/schemas/InscriptionId'
              required:
                - unspentIds
                - expireTime
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  unspents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReservedUnspent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    delete:
      tags:
        - Wallet
      summary: Release unspent reservation
      description: Release unspents from reservation to be accessible for transactions.
      operationId: v2.wallet.reservedunspent.delete
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
        - name: id
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UnspentId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  unspents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReservedUnspent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    get:
      tags:
        - Wallet
      summary: List unspent reservation
      description: Query reserved unspents in the wallet.
      operationId: v2.wallet.reservedunspent.list
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
        - name: prevId
          description: Return the next batch of results, based on the "nextBatchPrevId" value from the previous batch.
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - name: expireTimeGt
          description: Returns reserved unspents with an `expireTime` greater than this value.
          in: query
          schema:
            type: string
            format: date-time
        - name: expireTimeLte
          description: Returns reserved unspents with an `expireTime` less than or equal to this value.
          in: query
          schema:
            type: string
            format: date-time
        - name: expireTime
          description: Returns reserved unspents with an `expireTime` equal to this value. If `never`, returns unspents without expiration dates.
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  unspents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReservedUnspent'
                  nextBatchPrevId:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    put:
      tags:
        - Wallet
      summary: Modifying unspent reservation
      description: Modify expire time of reserved unspents.
      operationId: v2.wallet.reservedunspent.put
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                unspentIds:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/UnspentId'
                changes:
                  type: object
                  properties:
                    expireTime:
                      type: string
                      description: Time in date-time format when reservation expires. If 'never', reservation doesn't expire.
              required:
                - unspentIds
                - changes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  unspents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReservedUnspent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/{walletId}/requestreshare:
    post:
      tags:
        - Wallet share
      summary: Request wallet reshare
      description: Indicates that the calling user has lost access to the user key and would like to it to be reshared with them.
      operationId: v2.wallet.sharing.requestreshare
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/{walletId}/share:
    post:
      tags:
        - Wallet share
      summary: Create a wallet share
      description: Share wallet with an existing BitGo user
      operationId: v2.wallet.sharing.createshare
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareWalletRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareWalletResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/wallet/requestaccess:
    post:
      tags:
        - Request wallet access
      summary: Request wallet access
      description: Allow users that are members of an org to send a notification out to admins of a wallet to get access. You must supply either a walletId or a enterpriseId and walletType
      operationId: v2.wallet.requestaccess
      parameters:
        - $ref: '#/components/parameters/enterprise'
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/WalletTypePublic'
        - name: id
          in: query
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/wallet/{walletId}/rejectreshare:
    post:
      tags:
        - Wallet share
      summary: Reject a wallet reshare request
      description: If a user requested a reshare, another admin on the wallet can use this endpoint to reject their reshare request.
      operationId: v2.wallet.sharing.rejectreshare
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectReshare'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/walletshares:
    get:
      tags:
        - Wallet share
      summary: List wallet shares
      description: List shares of all wallets with other BitGo users. Returns only wallets on which the current user has spend permission.
      operationId: v2.wallet.sharing.listallshares
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWalletSharesResponse'
  /api/v1/{coin}/walletshare/{shareId}:
    get:
      tags:
        - Wallet share
      summary: Get wallet share V1
      description: Returns a wallet share, requires unlock if the wallet share includes a keychain.
      operationId: v1.wallet.sharing.getshare
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathShareId'
        - name: skipUnlock
          in: query
          description: True, if skipping unlock. Excludes keychain in response.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletShare1'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/walletshare/{shareId}/resendemail:
    post:
      tags:
        - Wallet share
      summary: Resend a wallet share invitation email
      description: |
        Resends the wallet share invitation to the share recipient. The wallet
        share must not have been accepted yet.
      operationId: v2.wallet.sharing.resendemail
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathShareId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendShareEmailResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/{walletId}/webhooks/{webhookId}/simulate:
    post:
      tags:
        - Webhook
      summary: Simulate wallet webhook
      description: |
        Simulates and tests a webhook so you can view its response. A
        `transferId`, `pendingApprovalId` or `txRequestId` is required.
      operationId: v2.wallet.simulatewebhook
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathWebhookId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateWalletWebhookRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhookNotifications:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            wallet:
                              $ref: '#/components/schemas/Id'
                            transfer:
                              $ref: '#/components/schemas/Id'
                            hash:
                              $ref: '#/components/schemas/TxId'
                        - $ref: '#/components/schemas/WebhookNotification'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/webhooks:
    post:
      tags:
        - Webhook
      summary: Add block webhook
      description: |
        Adds a webhook that will result in an HTTP callback at the
        specified URL from BitGo when events are triggered.

        Types of block webhooks:

        1. Block webhooks will fire when a new block is seen on the coin network.
        2. Wallet confirmation webhooks will fire when a wallet has been initialized.
      operationId: v2.webhooks.add
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlockWebhook'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      type:
                        $ref: '#/components/schemas/WebhookTypeBlock'
                      userId:
                        $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Webhook1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    get:
      tags:
        - Webhook
      summary: List block webhooks
      description: |
        Returns block webhooks. The types of webhooks are `block` and
        `wallet_confirmation` notifications.
      operationId: v2.webhooks.list
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhooks:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            type:
                              $ref: '#/components/schemas/WebhookTypeBlock'
                            userId:
                              $ref: '#/components/schemas/Id'
                        - $ref: '#/components/schemas/Webhook1'
    delete:
      tags:
        - Webhook
      summary: Remove block webhook
      description: |
        Removing a webhook will cause new events of the specified type to no
        longer trigger HTTP callbacks to your URLs.
      operationId: v2.webhooks.remove
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/WebhookTypeBlock'
                url:
                  type: string
                  format: uri
                  example: https://your.server.com/user_webhook
                id:
                  $ref: '#/components/schemas/Id'
              required:
                - type
                - url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  removed:
                    type: integer
                    example: 1
                    description: Number of block webhooks removed.
  /api/v2/{coin}/webhooks/{webhookId}/simulate:
    post:
      tags:
        - Webhook
      summary: Simulate block webhook
      description: |
        Simulates and tests a block webhook so you can view its response.
      operationId: v2.webhooks.simulate
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWebhookId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                blockId:
                  $ref: '#/components/schemas/BlockHash'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhookNotifications:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            hash:
                              $ref: '#/components/schemas/BlockHash'
                        - $ref: '#/components/schemas/WebhookNotification'
  /api/v2/xlm/federation:
    get:
      tags:
        - Federation
      summary: Look up user accounts by their Stellar address or id
      description: |
        Types of searches available:

        1. By name: Resolve a Stellar address into an account
        2. By id: Resolve an account id into an account
      operationId: v2.federation
      parameters:
        - $ref: '#/components/parameters/queryFederationQ'
        - $ref: '#/components/parameters/queryFederationType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  account_id:
                    type: string
                  stellar_address:
                    type: string
                  memo_type:
                    type: string
                  memo:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederationError'
  /api/v2/{coin}/material:
    get:
      tags:
        - Material
      summary: Look up material
      description: Currently available only for Polkadot. Material contains some basic transaction information that is common to all transactions. For Polkadot, this data changes every release.
      operationId: v2.materialData
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  genesisHash:
                    type: string
                  chainName:
                    type: string
                  specName:
                    type: string
                  specVersion:
                    type: number
                  txVersion:
                    type: number
                  metadata:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/sendlabels:
    get:
      tags:
        - Send label
      summary: List send labels
      description: List all send labels for the enterprise. Address and coin parameters optional.
      operationId: v2.sendlabels.list
      parameters:
        - $ref: '#/components/parameters/coin'
        - $ref: '#/components/parameters/address'
        - $ref: '#/components/parameters/enterpriseId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SendLabel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    post:
      tags:
        - Send label
      summary: Create send label
      operationId: v2.sendlabels.create
      description: Create an address send label for an id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSendLabel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendLabel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/sendlabels/{id}:
    get:
      tags:
        - Send label
      summary: Get send label by id
      operationId: v2.sendlabels.get
      description: Gets an address send label by the specified id
      parameters:
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendLabel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    put:
      tags:
        - Send label
      summary: Update send label
      operationId: v2.sendlabels.update
      description: Updates an address send label by the specified id
      parameters:
        - $ref: '#/components/parameters/pathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSendLabel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendLabel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    delete:
      tags:
        - Send label
      summary: Delete send label
      operationId: v2.sendlabels.delete
      parameters:
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendLabel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/wallet/{walletId}/txrequests/{id}/signatureshares:
    post:
      tags:
        - Transaction request
      summary: Create a signature share for the transaction request
      description: Allows users to supply their signature share for signing. Use only with MPC wallets.
      operationId: v2.wallet.txrequest.signatureshare.create
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSignatureShareRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureShare'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
    delete:
      tags:
        - Transaction request
      summary: Delete signature shares on a transaction request.
      description: Allows users to clear the signature shares on a transaction request. This will also set the state to pendingUserSignature. Use only with MPC wallets.
      operationId: v2.wallet.txrequest.signatureshare.delete
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SignatureShare'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/wallet/{walletId}/txrequests/{id}/transactions/{transactionIdx}/signatureshares:
    post:
      tags:
        - Transaction request
      summary: Create a signature share for a transaction on a transaction request
      description: |
        Allows users to supply their signature share for signing.

        This route is only valid for transaction request full. Use only with MPC wallets.
      operationId: v2.wallet.txrequest.transaction.signatureshare.create
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathId'
        - $ref: '#/components/parameters/transactionIdx'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSignatureShareRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureShare'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/wallet/{walletId}/txrequests/{id}/transfers:
    post:
      tags:
        - Transaction request
      summary: Create transfer for transaction request
      description: Create a transfer for a transaction request and return that transfer. Use only with MPC wallets.
      operationId: v2.wallet.txrequest.transfers.create
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/wallet/{walletId}/tx/build:
    post:
      tags:
        - Wallet
      summary: Build a transaction
      operationId: v2.wallet.tx.build
      description: |
        Build a transaction from the wallet using provided options. Use only with multisignature wallets. For MPC wallets, use [Create transaction request](https://developers.bitgo.com/api/v2.wallet.txrequest.create). If you want to build, sign, and send all in one call, use [Send transaction](https://developers.bitgo.com/api/express.wallet.sendcoins).
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/destinationTag'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TransactionBuildRequest'
                - $ref: '#/components/schemas/NonParticipationTransactionBuildRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionBuildResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidAddress1'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/consolidateUnspents:
    post:
      tags:
        - Wallet
      summary: Consolidate unspents (advanced)
      operationId: v2.wallet.consolidateunspents
      description: Build a transaction to consolidate unspents in a wallet. Once built, you must sign and sent the transaction. Consolidating unspents is only for UTXO-based assets.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsolidateUnspentsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletConsolidateUnspentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/tx/initiate:
    post:
      tags:
        - Wallet
      summary: Initiate a transaction
      operationId: v2.wallet.tx.initiate
      description: Initiate an unsigned transaction to create a pending approval. This is useful to request funds to be sent from custodial wallets. Use only with custodial wallets.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TransactionInitiateRequest'
                - type: object
                  properties:
                    videoApprovers:
                      $ref: '#/components/schemas/VideoApprovers'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/tx/send:
    post:
      tags:
        - Wallet
      summary: Send a half-signed transaction
      operationId: v2.wallet.tx.send
      description: |
        Send a half-signed transaction from the specified wallet.
        Instead of this endpoint, you likely want to use [send transaction](https://developers.bitgo.com/api/express.wallet.sendcoins)
        in the SDK.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTransaction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
                  - $ref: '#/components/schemas/DuplicateSequenceId1'
                  - $ref: '#/components/schemas/InvalidOFAC'
        '423':
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformErrorNoName3'
  /api/v2/{coin}/wallet/{walletId}/trustline/initiate:
    post:
      tags:
        - Wallet
      summary: Initiate a trustline transaction
      operationId: v2.wallet.trustline.initiate
      description: Initiate an unsigned trustline transaction to create a pending approval. Trustline transactions manage trusted tokens on the account. Available for Stellar. Use only with custodial wallets.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateTrustlineParams'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/requiredReserve:
    get:
      tags:
        - Wallet
      summary: Get balance reserve data
      description: Returns information about reserve requirements for an account. Currently only available for Stellar.
      operationId: v2.tx.fetchReserve
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            type: string
            enum:
              - txlm
              - xlm
              - tcspr
              - cspr
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceReserve'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/pingexpress:
    get:
      tags:
        - Express
      summary: Ping BitGo Express
      operationId: express.ping
      description: |
        Ping bitgo express to ensure that it is still running. Unlike /ping, this does not try connecting to bitgo.com.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressPingResponse'
  /api/v2/{coin}/wallet/{walletId}/sendcoins:
    post:
      tags:
        - Express
      summary: Send transaction
      operationId: express.wallet.sendcoins
      description: This call allows you to create and send cryptocurrency to a destination address.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressSendCoinsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/sendmany:
    post:
      tags:
        - Express
      summary: Send to many
      operationId: express.wallet.sendmany
      description: |
        Send coins or tokens to one or more recipients. You can use this endpoint to schedule outgoing transactions in bulk, lowering your aggregate amount of blockchain fees.


        Works with both multisignature and MPC wallets. Also supports external-signer mode.

        Works with most BitGo-supported assets, but currently unavailable for: ALGO, ARBETH, AVAXC, CELO, CELO:CUSD, CSPR, DOT, EOS, HTETH:BGERCH, NEAR, OPETH, STX, TON, TRX, TRX:USDC, XLM, XRP, XTZ
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressSendManyRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/encrypt:
    post:
      tags:
        - Express
      summary: Encrypt messages
      operationId: express.encrypt
      description: Symmetrically encrypt an arbitrary message with provided password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressEncryptRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressEncryptResponse'
  /api/v2/decrypt:
    post:
      tags:
        - Express
      summary: Decrypt messages
      operationId: express.decrypt
      description: Decrypt a ciphertext generated by encrypt route with provided password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressDecryptRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressDecryptResponse'
        '500':
          description: Internal Server Error
  /api/v2/calculateminerfeeinfo:
    post:
      tags:
        - Express
      summary: Calculate mining fee
      operationId: express.calculateminerfeeinfo
      description: Calculate the fee and estimated size in bytes for a Bitcoin transaction
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressCalculateMinerFeeInfoRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressCalculateMinerFeeInfoResponse'
  /api/v2/{coin}/keychain/local:
    post:
      tags:
        - Express
      summary: Create key
      operationId: express.keychain.local
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      description: |
        Local client-side function to create a new keychain.

        Creating your keychains is a critical step for safely securing your Bitcoin. When generating new keychains, this API uses a random number generator that adheres to industry standards. If you provide your own seed, you must take extreme caution when creating it.
        Returns an object containing the xprv and xpub for the new chain. The created keychain is not known to the BitGo service. To use it with the BitGo service, use the ‘Store Keychain’ API call.

        For security reasons, it is highly recommended that you encrypt and destroy the original xprv immediately to prevent theft.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressCreateKeychainResponse'
  /api/v2/{coin}/wallet/generate:
    post:
      tags:
        - Express
      summary: Generate wallet
      operationId: express.wallet.generate
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - name: includeKeychains
          in: query
          schema:
            type: boolean
            default: false
            description: Include user, backup and bitgo keychains along with generated wallet
      description: |
        This API call creates a new wallet. Under the hood, the SDK (or BitGo Express) does the following:

        1. Creates the user keychain locally on the machine, and encrypts it with the provided passphrase (skipped if userKey is provided).
        2. Creates the backup keychain locally on the machine.
        3. Uploads the encrypted user keychain and public backup keychain.
        4. Creates the BitGo key (and the backup key if backupXpubProvider is set) on the service.
        5. Creates the wallet on BitGo with the 3 public keys above.

        ⓘ Ethereum wallets can only be created under an enterprise. Pass in the id of the enterprise to associate the wallet with. Your enterprise id can be seen by clicking on the “Manage Organization” link on the enterprise dropdown. Each enterprise has a fee address which will be used to pay for transaction fees on all Ethereum wallets in that enterprise. The fee address is displayed in the dashboard of the website, please fund it before creating a wallet.

        ⓘ You cannot generate a wallet by passing in a subtoken as the coin. Subtokens share wallets with their parent coin and it is not possible to create a wallet specific to one token.

        ⓘ This endpoint should be called through BitGo Express if used without the SDK, such as when using cURL.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressGenerateWalletRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressGenerateWalletResponse'
  //api/v2/{coin}/wallet/{walletId}/share:
    post:
      tags:
        - Express
      summary: Share wallet
      operationId: express.wallet.share
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      description: Share wallet with an existing BitGo user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressShareWalletRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareWalletResponse'
  /api/v2/{coin}/walletshare/{walletShareId}/acceptshare:
    post:
      tags:
        - Express
      summary: Accept wallet share
      operationId: express.wallet.acceptshare
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletShareId'
      description: Accept a wallet share, adding the wallet to the user's list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressAcceptShareRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressAcceptShareResponse'
  /api/v2/{coin}/signtx:
    post:
      tags:
        - Express
      summary: Sign transaction
      operationId: express.signtx
      description: This route is for users who would like to maintain their own keys, or otherwise would not like BitGo to decrypt their key, and instead provide it in the clear themselves
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressSignTxRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSignTxResponse'
  /api/v2/{coin}/wallet/{walletId}/signtx:
    post:
      tags:
        - Express
      summary: Sign wallet transaction
      operationId: express.wallet.signtx
      description: Sign transactions for multisignature wallets using external-signing mode. You must maintain your keys, in the clear, on a separate Express server. BitGo doesn't decrypt your private keys.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressWalletSignTxRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSignTxResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/signtxtss:
    post:
      tags:
        - Express
      summary: Sign MPC transaction
      operationId: express.wallet.signtxtss
      description: Sign transactions for MPC wallets. If using external-signer mode, you must maintain your keys, in the clear, on a separate Express server - BitGo doesn't decrypt your private MPC key shares.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressSignTssTx'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRequest'
  /api/v2/{coin}/wallet/{walletId}/recovertoken:
    post:
      tags:
        - Express
      summary: Recover ETH token
      operationId: express.wallet.recovertoken
      description: Recover an unsupported Ethereum token from a BitGo multisig wallet
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressWalletRecoverTokenRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressWalletRecoverTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/consolidateAccount/build:
    post:
      tags:
        - Wallet
      summary: Consolidate account (advanced)
      operationId: v2.wallet.consolidateaccount.build
      description: Build a consolidation transaction for an account-based asset. Once built, you must sign and send the transaction. For account-based assets, consolidating the balances in the receive addresses to the base address maximizes the spendable balance of a wallet.
      parameters:
        - $ref: '#/components/parameters/pathAlgorand'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsolidateAccountBuildRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsolidateAccountBuildResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidAddress1'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/consolidateunspents:
    post:
      tags:
        - Express
      summary: Consolidate unspents (simple)
      operationId: express.wallet.consolidateunspents
      description: Builds, signs, and sends a transaction to consolidate unspents all in 1 call. Consolidating unspents is only for UTXO-based assets.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressConsolidateUnspentsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/fanoutunspents:
    post:
      tags:
        - Express
      summary: Fan out unspents
      operationId: express.wallet.fanoutunspents
      description: Fan out unspents on a wallet
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressFanOutUnspentsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/sweep:
    post:
      tags:
        - Express
      summary: Sweep funds
      operationId: express.wallet.sweep
      description: |
        The sweep call spends the full balance of the wallet to the provided address. On UTXO coins, the sweep call will
        fail if the wallet has any unconfirmed funds, or if there are more unspents than can be sent with a
        single transaction.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressSweepRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/acceleratetx:
    post:
      tags:
        - Express
      summary: Accelerate Transaction
      operationId: express.wallet.acceleratetx
      description: |
        Send a new transaction to accelerate the targeted unconfirmed transaction either by using Child-Pays-For-Parent (CPFP) or Replace-By-Fee (RBF).

        **Background**:
        1. In Bitcoin, a transaction can only be included in a block when all its inputs are confirmed.
        This requirement can be used to increase the effective fee rate of a stuck low-fee transaction.
        One of the stuck transaction's outputs is spent in a child transaction with a much higher fee.
        Miners include the transactions with the highest fees first to maximize their revenue,
        but the high-fee child transaction can only be included once the parent transaction is confirmed.
        The miners are therefore incentivized to include both the parent and the child transaction together in a block.
        A Child-Pays-For-Parent transaction can be created by a recipient of the transaction or by the sender if the
        target transaction has a change output.
        2. In Bitcoin, a transaction can be replaced by a new transaction with a higher fee as long as the new transaction spends few or all of the same inputs used by the original transaction that's being replaced. Unlike CPFP, only the sender of the transaction can create a Replace-By-Fee transaction, and only either of the transactions can be confirmed. More often than not, the replacement transaction with the higher fee will be accepted by the miners.

        **Notes**:
        1. As other coins do not have a blockspace market, this route is only available for Bitcoin at this time.<br/>
        2. Using CPFP, if a target transaction depends on other unconfirmed transactions, this route also adds sufficient fees to elevate the entire transaction ancestry's effective fee rate to the `cpfpFeeRate`.
      parameters:
        - $ref: '#/components/parameters/pathBitcoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressAccelerateTxRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendCoinsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/transfer/{transferId}/comment:
    post:
      tags:
        - Transfer
      summary: Update comment
      operationId: v2.transfer.comment
      description: |
        Update the comment of a transfer
        Requirements:
          - Transaction must be generated from a BitGo wallet
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
        - $ref: '#/components/parameters/pathTransferId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
                  - $ref: '#/components/schemas/InvalidTransferId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError3'
  /api/v2/{coin}/canonicaladdress:
    post:
      tags:
        - Express
      summary: Canonicalize address
      operationId: express.canonicaladdress
      description: Canonicalize an LTC or BCH address.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressCanonicalAddressRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressString3'
  /api/v2/{coin}/verifyaddress:
    post:
      tags:
        - Express
      summary: Verify address
      operationId: express.verifycoinaddress
      description: Verify address for a given coin
      parameters:
        - $ref: '#/components/parameters/pathCoin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressVerifyCoinAddressRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
  /api/v2/{coin}/wallet/{walletId}/state:
    get:
      tags:
        - Express
      summary: Lightning - Get node state
      operationId: express.lightning.getState
      description: This is only used for self-custody lightning. Get the current state of the lightning node.
      parameters:
        - $ref: '#/components/parameters/pathLightningCoin'
        - $ref: '#/components/parameters/pathWalletId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressLightningNodeStateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /express/api/v2/{coin}/wallet/{walletId}:
    put:
      tags:
        - Express
      summary: Update Wallet
      description: The express update wallet route is meant to be used for lightning (lnbtc/tlnbtc). It will produced a signed wallet update request that can be used to update the wallet. For other coins, use the standard wallet update endpoint.
      operationId: express.wallet.update
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signerHost:
                  type: string
                  description: The host address of the lightning signer node.
                signerTlsCert:
                  type: string
                  description: The TLS certificate for the lighting signer node encoded to base64.
                signerMacaroon:
                  type: string
                  description: (Optional) The signer macaroon for the lighting signer node.
                passphrase:
                  type: string
                  description: The wallet passphrase. This is not uploaded to BitGo, but used to decrypt userAuthKey used to sign the request before sending to BitGo.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v2/{coin}/wallet/{walletId}/initwallet:
    post:
      tags:
        - Express
      summary: Lightning - Initialize node
      operationId: express.lightning.initWallet
      description: This is only used for self-custody lightning. Initialize a newly created Lightning Network Daemon (LND) for the first time. Returns the updated wallet with the encrypted admin macaroon in the `coinSpecific` response field.
      parameters:
        - $ref: '#/components/parameters/pathLightningCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressInitWalletRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressGenerateWalletResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/signermacaroon:
    post:
      tags:
        - Express
      summary: Lightning - Create signer macaroon
      operationId: express.lightning.signerMacaroon
      description: This is only used for self-custody lightning. Create the signer macaroon for the watch-only Lightning Network Daemon (LND) node. This macaroon derives from the signer node admin macaroon and is used by the watch-only node to request signatures from the signer node for operational tasks. Returns the updated wallet with the encrypted signer macaroon in the `coinSpecific` response field.
      parameters:
        - $ref: '#/components/parameters/pathLightningCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressGenerateSignerMacaroonRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressGenerateWalletResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/unlockwallet:
    post:
      tags:
        - Express
      summary: Lightning - Unlock node
      operationId: express.lightning.unlockWallet
      description: This is only used for self-custody lightning. Unlock the Lightning Network Daemon (LND) node with the given wallet password.
      parameters:
        - $ref: '#/components/parameters/pathLightningCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressUnlockLightningWalletRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressUnlockLightningWalletResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/wallet/{walletId}/lightning/invoices:
    get:
      tags:
        - Lightning
      summary: Lightning - List Invoices
      operationId: v2.wallet.lightning.invoice.list
      description: List Lightning Network invoices for the given wallet.
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressCreateInvoiceRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpressListInvoicesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/lightning/payment:
    post:
      tags:
        - Express
      summary: Lightning - Pay a Lightning Invoice
      operationId: express.lightning.payInvoice
      description: Pay a Lightning Network invoice from the given wallet.
      parameters:
        - $ref: '#/components/parameters/pathLightningCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressPayInvoiceRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressPayInvoiceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/wallet/{walletId}/lightning/backup:
    get:
      tags:
        - Lightning
      summary: Lightning - Get Channel Backup
      operationId: v2.wallet.lightning.backup
      description: This is only used for self-custody lightning. Retrieve the channel backup for the given wallet.
      parameters:
        - $ref: '#/components/parameters/pathWalletId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LightningBackupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/v2/{coin}/wallet/{walletId}/consolidateAccount:
    post:
      tags:
        - Express
      summary: Consolidate account (simple)
      operationId: express.wallet.consolidateAccount
      description: Build, sign, and send a consolidation transaction for an account-based asset all in 1 call. For account-based assets, consolidating the balances in the receive addresses to the base address maximizes the spendable balance of a wallet.
      parameters:
        - $ref: '#/components/parameters/pathCoin'
        - $ref: '#/components/parameters/pathWalletId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressConsolidateAccountRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpressSendConsolidationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError3'
                  - $ref: '#/components/schemas/InvalidWalletId'
  /api/policy/v1/enterprises/{enterpriseId}/rules:
    get:
      tags:
        - Policy Builder
      summary: List policy rules
      description: Lists all policy rules for an enterprise.
      operationId: v1.policy.rules.list
      parameters:
        - $ref: '#/components/parameters/CreatedDateGte'
        - $ref: '#/components/parameters/CreatedDateLte'
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/EvaluationId'
        - $ref: '#/components/parameters/EvaluationStatus'
        - $ref: '#/components/parameters/PolicyRuleName'
        - $ref: '#/components/parameters/PolicyRuleStatus'
        - $ref: '#/components/parameters/ScopeName'
        - $ref: '#/components/parameters/Touchpoints'
        - $ref: '#/components/parameters/PolicyRuleIdQuery'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PrevId'
        - $ref: '#/components/parameters/FilteringConditionParameterNameAndValue'
      responses:
        '200':
          description: Paginated list of policy rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRulesResults'
              examples:
                PolicyRulesResultExample:
                  $ref: '#/components/examples/PolicyRulesResultsExample1'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/rules/{id}:
    get:
      tags:
        - Policy Builder
      summary: Get policy rule
      description: Returns a policy rule by its ID. If version is passed, returns the most recent `INACTIVE` policy rule. If version isn't passed, returns the currently `ACTIVE` policy rule.
      operationId: v1.policy.rules.get
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/PolicyRuleId'
        - $ref: '#/components/parameters/PolicyRuleVersion'
      responses:
        '200':
          description: A successful policy rule details response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule1'
              examples:
                example:
                  $ref: '#/components/examples/PolicyRuleExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Policy Builder
      summary: Deactivate policy rule
      description: Deactivates a policy rule.
      operationId: v1.policy.rules.delete
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/PolicyRuleId'
      responses:
        '200':
          description: The `INACTIVE` policy rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule1'
              examples:
                example:
                  $ref: '#/components/examples/InactivePolicyRuleExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/rules/{id}/versions:
    get:
      tags:
        - Policy Builder
      summary: List policy-rule versions
      description: List all versions of a policy rule.
      operationId: v1.policy.rule.versions.list
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/PolicyRuleId'
      responses:
        '200':
          description: All versions of the given policy rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRuleVersions'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/touchpoints/{touchpointName}/rules:
    post:
      tags:
        - Policy Builder
      summary: Create policy rule
      description: Creates a new policy rule.
      operationId: v1.policy.rule.create
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/TouchpointName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRuleRequest'
            examples:
              example:
                $ref: '#/components/examples/CreatePolicyRuleExample'
      responses:
        '201':
          description: The newly created policy rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule1'
              examples:
                example:
                  $ref: '#/components/examples/PolicyRuleExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/touchpoints/{touchpointName}/rules/{id}:
    put:
      tags:
        - Policy Builder
      summary: Update policy rule
      description: Updates a policy rule, resulting in a new version number that's equal to the highest existing version plus 1. The ID of the policy rule remains the unchanged.
      operationId: v1.policy.rule.update
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/TouchpointName'
        - $ref: '#/components/parameters/PolicyRuleId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRuleRequest'
            examples:
              example:
                $ref: '#/components/examples/CreatePolicyRuleExample'
      responses:
        '201':
          description: The updated policy rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule1'
              examples:
                example:
                  $ref: '#/components/examples/PolicyRuleExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/scopes:
    get:
      tags:
        - Policy Builder
      summary: List scopes
      description: Lists all scopes for a given policy rule.
      operationId: v1.policy.scope.list
      parameters:
        - $ref: '#/components/parameters/Enterprise'
      responses:
        '200':
          description: All available scopes for your enterprise.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scopes'
              examples:
                example:
                  $ref: '#/components/examples/ScopesExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/scopes/{scopeId}/conditions:
    get:
      tags:
        - Policy Builder
      summary: List conditions for scope
      description: Lists all conditions for a given scope.
      operationId: v1.policy.scope.condition.list
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/scope'
      responses:
        '200':
          description: All available Filtering Conditions for a scope.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteringConditions'
              examples:
                example:
                  $ref: '#/components/examples/FilteringConditionsExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/scopes/{scopeId}/touchpoints:
    get:
      tags:
        - Policy Builder
      summary: List touchpoints
      description: Lists all touchpoints for a given scope.
      operationId: v1.policy.scope.touchpoint.list
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/scope'
      responses:
        '200':
          description: Paginated list of available Touchpoints for a given scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TouchpointsResults'
              examples:
                example:
                  $ref: '#/components/examples/ScopeTouchpointsExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/touchpoints/{touchpointId}/conditions:
    get:
      tags:
        - Policy Builder
      summary: List conditions for touchpoint
      description: Lists all conditions available for a given touchpoint.
      operationId: v1.policy.touchpoint.condition.list
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/TouchpointId'
      responses:
        '200':
          description: All available Conditions on a given Touchpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conditions'
              examples:
                example:
                  $ref: '#/components/examples/TouchpointConditionsExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/policy/v1/enterprises/{enterpriseId}/touchpoints/{touchpointId}/filteringconditions/{filteringCondition}/actions:
    get:
      tags:
        - Policy Builder
      summary: List actions
      description: Lists all available actions for a given touchpoint and scope.
      operationId: v1.policy.touchpoint.action.list
      parameters:
        - $ref: '#/components/parameters/Enterprise'
        - $ref: '#/components/parameters/TouchpointId'
        - $ref: '#/components/parameters/FilteringConditionName'
      responses:
        '200':
          description: All available Actions on a given Touchpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
              examples:
                example:
                  $ref: '#/components/examples/ActionsExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/prime/trading/v1/user/current:
    get:
      summary: Get Current User
      description: Get the current user’s public information.
      operationId: trade.user.current
      tags:
        - Accounts
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeUser'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts:
    get:
      summary: List Accounts
      description: Get the list of trading accounts that the current user belongs to.
      operationId: trade.accounts
      tags:
        - Accounts
      responses:
        '200':
          description: An array of accounts
          content:
            application/json:
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Accounts'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/balances:
    get:
      summary: Get Account Balance
      description: Get balance information about a single trading account.
      operationId: trade.accounts.balances
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: An array of account balances
          content:
            application/json:
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AccountBalances'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/orders:
    get:
      summary: List Orders
      description: Lists all orders from the given trading account.
      operationId: trade.orders.detail
      tags:
        - Orders
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: clientOrderId
          in: query
          description: The clientOrderId of the order to retrieve
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: dateGte
          in: query
          description: Return client orders with a `creationDate` that is greater than or equal to the given timestamp
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: dateLt
          in: query
          description: Return client orders with a `creationDate` that is less than the given timestamp
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: status
          in: query
          description: Return client orders with an order `status` that is equal to the given string
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          description: An array of orders
          content:
            application/json:
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Orders'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Place Order
      description: Places a new order. There are several types of orders available - Market, Limit, TWAP and SteadyPace (with or without a limit). Orders can only be placed if your account has a sufficient balance. When an order is placed, funds will be reserved for the amount of the order.
      operationId: trade.orders.add
      tags:
        - Orders
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrderRequest'
        required: true
      responses:
        '200':
          description: An order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/orders/{orderId}:
    get:
      summary: Get Order
      description: Get a single order by order id.
      operationId: trade.orders.order
      tags:
        - Orders
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: orderId
          in: path
          description: The id of the order to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: An order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/orders/{orderId}/cancel:
    put:
      summary: Cancel Order
      description: Attempt to cancel an order that was previously placed. The response will return successful if the cancel request is submitted. Use Get Order endpoint or subscribe to the orders websocket to get the order details.
      operationId: trade.orders.order.cancel
      tags:
        - Orders
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: orderId
          in: path
          description: The id of the order to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/trades:
    get:
      summary: List Trades
      description: Lists trades from the trading account. This will include trades that have not yet settled.
      operationId: trade.trades
      tags:
        - Orders
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: orderId
          in: query
          description: The orderId of the trades to retrieve
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
        - name: dateGte
          in: query
          description: Return exchange trades with a trade date that is greater than or equal to the given timestamp
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: dateLt
          in: query
          description: Return exchange trades with a trade date that is less than the given timestamp
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: An array of trades
          content:
            application/json:
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Trades'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/trades/{tradeId}:
    get:
      summary: Get Trade
      description: Get the details of a single trade by trade id.
      operationId: trade.trades.trade
      tags:
        - Orders
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tradeId
          in: path
          description: The id of the trade to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: A trade
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrimeTrade'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/currencies:
    get:
      summary: List Currencies
      description: Gets a list of all available currencies.
      operationId: trade.currencies
      tags:
        - Products
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: An array of currencies
          content:
            application/json:
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Currencies'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/products:
    get:
      summary: List Products
      description: Gets a list of all available products.
      operationId: trade.products
      tags:
        - Products
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: An array of products
          content:
            application/json:
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Products'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/products/{product}/level1:
    get:
      summary: Get Level1 Order Book
      description: Gets a snapshot of the level1 order book for product
      operationId: trade.products.product.level1
      tags:
        - Order Book
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: product
          in: path
          description: The name of the product
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: A Level1OrderBookSnapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level1OrderBookSnapshot'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountId}/products/{product}/level2:
    get:
      summary: Get Level2 Order Book
      description: Gets a snapshot of the order book for product
      operationId: products.product.level2
      tags:
        - Order Book
      parameters:
        - name: accountId
          in: path
          description: The id of the trading account to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: product
          in: path
          description: The name of the product
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: A Level2OrderBookSnapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level2OrderBookSnapshot'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/prime/trading/v1/accounts/{accountID}/margin/collateral/currencies:
    get:
      summary: List available currencies for collateral
      description: Returns the list of currencies that are available for use as collateral.
      operationId: trade.margin.collateral.currencies.list
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      responses:
        '200':
          description: A list of available currencies for collateral
          content:
            application/json:
              schema:
                type: object
                properties:
                  availableCurrencies:
                    type: array
                    description: Returns a Currency object that consists of the ID, Name and Symbol for the instrument
                    items:
                      $ref: '#/components/schemas/Currency'
  /api/prime/trading/v1/accounts/{accountID}/margin/collateral/transferred:
    get:
      summary: List transferred collateral
      description: Returns the balance of assets deposited as collateral for the specified account.
      operationId: trade.margin.collateral.transferred.list
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      responses:
        '200':
          description: A list of transferred collateral
          content:
            application/json:
              schema:
                type: object
                properties:
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        currency:
                          type: string
                          description: Symbol of the collateral asset
                        quantity:
                          type: string
                          description: Number representing the balance for the specified collateral
                        balanceValue:
                          allOf:
                            - $ref: '#/components/schemas/Amount3'
                            - type: object
                              description: Returns the value of the collateral. Has 2 fields denoting the currency used and the actual value.
                example:
                  balances:
                    - currency: BTC
                      quantity: '2'
                      balanceValue:
                        quantity: '1000000'
                        currency: USD
  /api/prime/trading/v1/accounts/{accountID}/margin/risksettings:
    get:
      summary: Get margin risk settings
      description: Returns the margin risk settings for the specified account.
      operationId: trade.margin.risksettings.get
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      responses:
        '200':
          description: Margin risk settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalShortPositionLimit:
                    allOf:
                      - $ref: '#/components/schemas/Amount3'
                      - type: object
                        description: Quantity representing the total NOP limit across all currencies. It sets a limit that is compared to the total short position across all currencies (eg. 1000000). Currency represents the currency that the quantity is valued in (eg. USD)
                  marginCallPercentage:
                    description: Number representing the percentage at which a margin call will be initiated if the margin percentage falls below this number. It is in decimal form (eg. 0.8 to mean 80%)
                    type: number
                    format: decimal
                  liquidationThresholdPercentage:
                    description: Number representing the liquidation threshold percentage at which positions will be automatically liquidated if the margin utilization exceeds this level. It is in decimal form (eg. 1.2 to mean 120%)
                    type: number
                    format: decimal
                  marginRequirementPercentage:
                    description: Number representing the margin requirement percentage which is used with the NOP to determine the margin required. It is in decimal form (eg.0.2 for 20%)
                    type: number
                    format: decimal
                  minimumCollateralValue:
                    allOf:
                      - $ref: '#/components/schemas/Amount3'
                      - type: object
                        description: Quantity representing the minimum collateral value required for margin trading. Currency represents the currency that the quantity is valued in (eg. USD)
                example:
                  totalShortPositionLimit:
                    quantity: '1000000'
                    currency: USD
                  marginCallPercentage: '1.1'
                  liquidationThresholdPercentage: '1.2'
                  marginRequirementPercentage: '0.2'
                  minimumCollateralValue:
                    quantity: '50000'
                    currency: USD
  /api/prime/trading/v1/accounts/{accountID}/margin/netopenpositions:
    get:
      summary: Get net open margin positions
      description: Returns the net open positions for the specified account.
      operationId: trade.margin.netopenpositions.get
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: Filters on provided currencies if provided, otherwise returns net open positions for all currencies
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Net open positions
          content:
            application/json:
              schema:
                type: object
                properties:
                  netOpenPositions:
                    type: array
                    items:
                      $ref: '#/components/schemas/MarginNetOpenPosition'
  /api/prime/trading/v1/accounts/{accountID}/margin/netopenpositionlimits:
    get:
      summary: Get net open margin position limits
      description: Returns the asset-specific net open position limits for the specified account.
      operationId: trade.margin.netopenpositionlimits.get
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      responses:
        '200':
          description: Net open position limits
          content:
            application/json:
              schema:
                type: object
                properties:
                  netOpenPositionLimits:
                    type: array
                    items:
                      $ref: '#/components/schemas/MarginNetOpenPositionLimit'
  /api/prime/trading/v1/accounts/{accountID}/margin/riskprofile:
    get:
      summary: Get margin risk profile
      description: Runs margin calculations and returns the margin risk profile for the specified account.
      operationId: trade.margin.riskprofile.get
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      responses:
        '200':
          description: Margin risk profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  riskProfile:
                    type: object
                    properties:
                      netOpenPosition:
                        allOf:
                          - $ref: '#/components/schemas/Amount3'
                          - type: object
                            description: Quantity representing the total NOP limit across all currencies. It sets a limit that is compared to the total short position across all currencies (eg. 1000000). Currency represents the currency that the quantity is valued in (eg. USD)
                      transferredCollateral:
                        allOf:
                          - $ref: '#/components/schemas/Amount3'
                          - type: object
                            description: Quantity representing the notional value of all collateral balances. This may change as the value of collateral changes with market movements. Currency represents the notional currency (eg. USD)
                      unrealizedPnL:
                        allOf:
                          - $ref: '#/components/schemas/Amount3'
                          - type: object
                            description: Quantity representing the sum of unrealized profit and loss across all per-asset open positions. Currency represents the notional currency (eg. USD)
                      marginBalance:
                        allOf:
                          - $ref: '#/components/schemas/Amount3'
                          - type: object
                            description: Quantity representing the sum of the transferredCollateral and unrealizedPnL. Currency represents the notional currency (eg. USD)
                      marginRequirement:
                        allOf:
                          - $ref: '#/components/schemas/Amount3'
                          - type: object
                            description: Quantity representing the marginBalance required to continue trading without risk of margin call or liquidation. If margin requirement is not present, either netOpenPosition is zero or there is no requirement. Currency represents the notional currency (eg. USD)
                      marginUtilizationPercentage:
                        type: number
                        nullable: true
                        description: Quantity representing the ratio of marginRequirement to marginBalance, measured directly against liquidation and margin call thresholds. This is null if there is no margin requirement.
                example:
                  riskProfile:
                    netOpenPosition:
                      quantity: '1000000'
                      currency: USD
                    transferredCollateral:
                      quantity: '500000'
                      currency: USD
                    unrealizedPnL:
                      quantity: '200000'
                      currency: USD
                    marginBalance:
                      quantity: '700000'
                      currency: USD
                    marginRequirement:
                      quantity: '600000'
                      currency: USD
                    marginUtilizationPercentage: 0.85
  /api/prime/trading/v1/accounts/{accountID}/margin/collateral/transfer:
    post:
      summary: Transfer collateral for margin
      description: Transfers collateral for the specified account.
      operationId: trade.margin.collateral.transfer
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currency:
                  type: string
                quantity:
                  type: string
              example:
                currency: BTC
                quantity: '2'
      responses:
        '200':
          description: Collateral transfer response
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency:
                    type: string
                    description: Symbol of the collateral asset
                  quantity:
                    type: string
                    description: Number representing the balance for the specified collateral
                  balanceValue:
                    allOf:
                      - $ref: '#/components/schemas/Amount3'
                      - type: object
                        description: Returns the value of the collateral.
                example:
                  currency: BTC
                  quantity: '2'
                  balanceValue:
                    quantity: '1000000'
                    currency: USD
  /api/prime/trading/v1/accounts/{accountID}/margin/positions/transfer:
    post:
      summary: Transfer margin position
      description: Transfers the amount specified to cover margin position for the specified account.
      operationId: trade.margin.positions.transfer
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currency:
                  type: string
                quantity:
                  type: string
              example:
                currency: BTC
                quantity: '2'
      responses:
        '200':
          description: Margin positions transfer response
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency:
                    type: string
                    description: Symbol of the collateral asset
                  quantity:
                    type: number
                    description: Number representing the balance for the specified collateral
                  balanceValue:
                    allOf:
                      - $ref: '#/components/schemas/Amount3'
                      - type: object
                        description: Returns the value of the collateral. Has 2 fields denoting the currency used and the actual value.
                example:
                  currency: BTC
                  quantity: 2
                  balanceValue:
                    quantity: '1000000'
                    currency: USD
  /api/prime/trading/v1/accounts/{accountID}/margin/positions/cover:
    post:
      summary: Cover all short margin positions
      description: Transfers the exact amount to cover all short margin positions for the specified account.
      operationId: trade.margin.positions.cover
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    currencies:
                      type: array
                      items:
                        type: string
                  example:
                    currencies:
                      - BTC
                - type: object
                  properties:
                    all:
                      type: boolean
                  example:
                    all: true
      responses:
        '200':
          description: Margin positions cover response
          content:
            application/json:
              schema:
                type: object
                properties:
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        currency:
                          type: string
                          description: Symbol of the margin position asset
                        quantity:
                          type: number
                          description: Number representing the balance for the specified margin position
                        balanceValue:
                          allOf:
                            - $ref: '#/components/schemas/Amount3'
                            - type: object
                              description: Returns the value of the margin position. Has 2 fields denoting the currency used and the actual value.
                example:
                  balances:
                    - currency: BTC
                      quantity: 2
                      balanceValue:
                        quantity: '1000000'
                        currency: USD
  /api/prime/trading/v1/accounts/{accountID}/margin/positions/close:
    post:
      summary: Close all margin positions
      description: Starts an asynchronous process to automatically close all positions by selling and buying assets to attempt to net them to zero.
      operationId: trade.margin.positions.close
      tags:
        - Margin
      parameters:
        - name: accountID
          in: path
          required: true
          description: The ID of the account
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    currencies:
                      type: array
                      items:
                        type: string
                  example:
                    currencies:
                      - BTC
                - type: object
                  properties:
                    all:
                      type: boolean
                  example:
                    all: true
      responses:
        '202':
          description: Returns an acknowledgement that the action was received. Async process will kick off to perform trades to close out open positions.
  /api/prime/trading/v1/ws:
    get:
      summary: Get WebSocket connection
      description: Establish a WebSocket connection to get real-time updates for order books and trade orders.
      operationId: trade.websocket
      tags:
        - Trade WebSocket
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authorization
      requestBody:
        description: Event subscription details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSocketSubscription'
      responses:
        '101':
          description: Switching Protocols
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/OrderBooksResponse'
                  - $ref: '#/components/schemas/TradeOrdersResponse'
        '403':
          description: Forbidden - Missing or invalid access token header
  /api/staking/v1/{coin}/wallets/{walletId}/requests/{stakingRequestId}:
    delete:
      tags:
        - Staking Request
      summary: Cancel staking request
      description: Cancel an existing staking request.
      operationId: v1.staking.request.cancel
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
        - name: stakingRequestId
          in: path
          description: The ID for the staking request to cancel.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Cancellation of Staking Request
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}/requests:
    post:
      tags:
        - Staking Request
      summary: Create staking request
      description: Create a staking request of type STAKE or UNSTAKE.
      operationId: v1.staking.request.create
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AdaStakingRequestPOSTBody'
                - $ref: '#/components/schemas/AdaUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/AtomStakingRequestPOSTBody'
                - $ref: '#/components/schemas/AtomUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/AvaxPStakingRequestPOSTBody'
                - $ref: '#/components/schemas/BeraStakingRequestPOSTBody'
                - $ref: '#/components/schemas/BeraUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/BtcStakingRequestPOSTBody'
                - $ref: '#/components/schemas/BtcUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/CosmosLikeStakingRequestPOSTBody'
                - $ref: '#/components/schemas/CosmosLikeUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/DotStakingRequestPOSTBody'
                - $ref: '#/components/schemas/DotUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/EthStakingRequestPOSTBody'
                - $ref: '#/components/schemas/MaticStakingRequestPOSTBody'
                - $ref: '#/components/schemas/MaticUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/NearStakingRequestPOSTBody'
                - $ref: '#/components/schemas/NearUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/SolStakingRequestPOSTBody'
                - $ref: '#/components/schemas/SolUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/StxStakingRequestPOSTBody'
                - $ref: '#/components/schemas/StxUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/TaoStakingRequestPOSTBody'
                - $ref: '#/components/schemas/TaoUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/TonStakingRequestPOSTBody'
                - $ref: '#/components/schemas/TonUnStakingRequestPOSTBody'
                - $ref: '#/components/schemas/WctStakingRequestPOSTBody'
                - $ref: '#/components/schemas/WctUnStakingRequestPOSTBody'
            examples:
              AvaxPStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/AvaxPStakingRequestPOSTBodyExample'
              BeraStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/BeraStakingRequestPOSTBodyExample'
              BeraUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/BeraUnStakingRequestPOSTBodyExample'
              BtcStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/BtcStakingRequestPOSTBodyExample'
              BtcUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/BtcUnStakingRequestPOSTBodyExample'
              DotStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/DotStakingRequestPOSTBodyExample'
              DotUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/DotUnStakingRequestPOSTBodyExample'
              EthStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/EthStakingRequestPOSTBodyExample'
              MaticStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/MaticStakingRequestPOSTBodyExample'
              MaticUnstakingRequestPOSTBodyExample:
                $ref: '#/components/examples/MaticUnstakingRequestPOSTBodyExample'
              NearStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/NearStakingRequestPOSTBodyExample'
              NearUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/NearUnStakingRequestPOSTBodyExample'
              SolStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/SolStakingRequestPOSTBodyExample'
              SolUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/SolUnStakingRequestPOSTBodyExample'
              StxStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/StxStakingRequestPOSTBodyExample'
              StxUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/StxUnStakingRequestPOSTBodyExample'
              TaoStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/TaoStakingRequestPOSTBodyExample'
              TaoUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/TaoUnStakingRequestPOSTBodyExample'
              TonStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/TonStakingRequestPOSTBodyExample'
              TonUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/TonUnStakingRequestPOSTBodyExample'
              WctStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/WctStakingRequestPOSTBodyExample'
              WctUnStakingRequestPOSTBodyExample:
                $ref: '#/components/examples/WctUnStakingRequestPOSTBodyExample'
      responses:
        '202':
          description: Successful Staking Request Accepted and Needs Approval
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AdaStakingRequest'
                  - $ref: '#/components/schemas/AtomStakingRequest'
                  - $ref: '#/components/schemas/AvaxPStakingRequest'
                  - $ref: '#/components/schemas/BeraStakingRequest'
                  - $ref: '#/components/schemas/BtcStakingRequest'
                  - $ref: '#/components/schemas/CosmosLikeStakingRequest'
                  - $ref: '#/components/schemas/DotStakingRequest'
                  - $ref: '#/components/schemas/EthStakingRequest'
                  - $ref: '#/components/schemas/MaticStakingRequest'
                  - $ref: '#/components/schemas/NearStakingRequest'
                  - $ref: '#/components/schemas/SolStakingRequest'
                  - $ref: '#/components/schemas/StxStakingRequest'
                  - $ref: '#/components/schemas/TaoStakingRequest'
                  - $ref: '#/components/schemas/TonStakingRequest'
                  - $ref: '#/components/schemas/WctStakingRequest'
              examples:
                AvaxPStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/AvaxPStakingRequestWithoutDelegationsExample'
                EthStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/EthStakingRequestWithoutDelegationsExample'
                MaticStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/MaticStakingRequestWithoutDelegationsExample'
                MaticUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/MaticUnStakingRequestWithoutDelegationsExample'
                NearStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/NearStakingRequestWithoutDelegationsExample'
                NearUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/NearUnStakingRequestWithoutDelegationsExample'
                SolStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/SolStakingRequestWithoutDelegationsExample'
                SolUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/SolUnStakingRequestWithoutDelegationsExample'
                TaoStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/TaoStakingRequestWithoutDelegationsExample'
                TaoUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/TaoUnStakingRequestWithoutDelegationsExample'
                DotStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/DotStakingRequestWithoutDelegationsExample'
                DotUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/DotUnStakingRequestWithoutDelegationsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
    get:
      tags:
        - Staking Request
      summary: List staking requests by asset
      description: Retrieve staking requests for a user's wallet.
      operationId: v1.user.staking.request
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
      responses:
        '200':
          description: Successful Retrieving Staking Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingRequestsListResponse'
              examples:
                EthStakingRequestsExample:
                  $ref: '#/components/examples/EthStakingRequestsListResponseExample'
                MaticStakingRequestsExample:
                  $ref: '#/components/examples/MaticStakingRequestsListResponseExample'
                MaticUnStakingRequestsExample:
                  $ref: '#/components/examples/MaticUnStakingRequestsListResponseExample'
                NearStakingRequestsExample:
                  $ref: '#/components/examples/NearStakingRequestsListResponseExample'
                NearUnStakingRequestsExample:
                  $ref: '#/components/examples/NearUnStakingRequestsListResponseExample'
                SolStakingRequestsExample:
                  $ref: '#/components/examples/SolStakingRequestsListResponseExample'
                SolUnStakingRequestsExample:
                  $ref: '#/components/examples/SolUnStakingRequestsListResponseExample'
                DotStakingRequestsExample:
                  $ref: '#/components/examples/DotStakingRequestsListResponseExample'
                DotUnStakingRequestsExample:
                  $ref: '#/components/examples/DotUnStakingRequestsListResponseExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/wallets/{walletId}/requests:
    get:
      tags:
        - Staking Request
      summary: List Staking Requests for a Wallet
      description: List staking requests for a wallet.
      operationId: v1.staking.request.list
      parameters:
        - $ref: '#/components/parameters/pathWalletId1'
        - name: coin
          in: query
          description: The staking asset.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: requestType
          in: query
          description: Filter by Staking Request Type
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/StakingRequestType'
        - name: requestStatus
          in: query
          description: Filter by Staking Request Status
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/StakingRequestStatus'
        - name: createdDateGte
          in: query
          description: Filter by created date greater than or equal to
          required: false
          schema:
            type: string
            format: date-time
        - name: createdDateLt
          in: query
          description: Filter by created date less than
          required: false
          schema:
            type: string
            format: date-time
        - name: ID
          in: query
          description: Filter by staking request ID
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/querySortByCreatedDate'
      responses:
        '200':
          description: Successful Listing Staking Requests for Wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingRequestsResponse'
              examples:
                EthStakingRequestResultsExample:
                  $ref: '#/components/examples/EthStakingResultsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/requests/{stakingRequestId}:
    get:
      tags:
        - Staking Request
      summary: List staking requests by ID
      description: Retrieve A Specific Staking Request.
      operationId: v1.staking.request
      parameters:
        - name: stakingRequestId
          in: path
          description: The ID for the staking request
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Retrieving a Staking Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AdaStakingRequest'
                  - $ref: '#/components/schemas/AtomStakingRequest'
                  - $ref: '#/components/schemas/AvaxPStakingRequest'
                  - $ref: '#/components/schemas/BeraStakingRequest'
                  - $ref: '#/components/schemas/BtcStakingRequest'
                  - $ref: '#/components/schemas/CosmosLikeStakingRequest'
                  - $ref: '#/components/schemas/DotStakingRequest'
                  - $ref: '#/components/schemas/EthStakingRequest'
                  - $ref: '#/components/schemas/MaticStakingRequest'
                  - $ref: '#/components/schemas/NearStakingRequest'
                  - $ref: '#/components/schemas/SolStakingRequest'
                  - $ref: '#/components/schemas/StxStakingRequest'
                  - $ref: '#/components/schemas/TaoStakingRequest'
                  - $ref: '#/components/schemas/TonStakingRequest'
                  - $ref: '#/components/schemas/WctStakingRequest'
              examples:
                AvaxPStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/AvaxPStakingRequestWithTransactionsExample'
                EthStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/EthStakingRequestWithTransactionsExample'
                MaticStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/MaticStakingRequestWithTransactionsExample'
                MaticUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/MaticUnStakingRequestWithTransactionsExample'
                NearStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/NearStakingRequestWithTransactionsExample'
                NearUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/NearUnStakingRequestWithTransactionsExample'
                SolStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/SolStakingRequestWithTransactionsExample'
                SolUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/SolUnStakingRequestWithTransactionsExample'
                TaoStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/TaoStakingRequestWithTransactionsExample'
                TaoUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/TaoUnStakingRequestWithTransactionsExample'
                DotStakingRequestExample:
                  $ref: '#/components/examples/DotStakingRequestWithTransactionsExample'
                DotUnStakingRequestWithoutDelegationsExample:
                  $ref: '#/components/examples/DotUnStakingRequestWithTransactionsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/enterprises/{enterpriseId}/requests/transactions:
    get:
      deprecated: false
      tags:
        - Staking Request
      summary: List staking requests by enterprise
      description: Retrieve staking requests and staking transactions for a given enterprise and query params.
      operationId: v1.staking.transactions
      parameters:
        - name: enterpriseId
          in: path
          description: The enterprise ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/coin1'
        - name: walletType
          in: query
          description: Filter by Wallet Type (e.g. custodial, hot)
          required: false
          schema:
            type: string
        - name: walletIds
          in: query
          description: Wallet Ids
          required: false
          schema:
            type: array
            items:
              type: string
        - name: requestType
          in: query
          description: Filter by Staking Request Type
          required: false
          schema:
            $ref: '#/components/schemas/StakingRequestType'
        - name: requestStatus
          in: query
          description: Filter by Staking Request status
          required: false
          schema:
            $ref: '#/components/schemas/StakingRequestStatus'
        - name: expandBuildParams
          in: query
          description: True, if to include staking build params
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/querySortByCreatedDate'
      responses:
        '200':
          description: Successful Retrieving Staking Requests with Transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingRequestsResponse'
              examples:
                EthStakingRequestResultsExample:
                  $ref: '#/components/examples/EthStakingResultsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}/requests/{stakingRequestId}/transactions/{stakingTransactionId}:
    post:
      tags:
        - Staking Request
      summary: Sign staking transaction
      description: Use to act on a transaction like sending a transaction
      operationId: v1.staking.transaction.act
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
        - name: stakingRequestId
          in: path
          description: The ID for the staking request.
          required: true
          schema:
            type: string
        - name: stakingTransactionId
          in: path
          description: The ID for the staking request transaction.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/EthStakingTransactionSendRequest'
      responses:
        '200':
          description: Successful Acting on a Transaction
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 500
                items:
                  oneOf:
                    - $ref: '#/components/schemas/EthStakingTransaction'
              example:
                - stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                  createdDate: 2022-01-10T14:32:28.000Z
                  statusModifiedDate: 2022-01-10T14:32:28.000Z
                  status: NEW
                  amount: '3200000000000000000'
                  transactionType: delegate
                  buildParams:
                    recipients:
                      amount: '3200000000000000000'
                      address: '0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b'
                      data: fds0934rnnio390nw
                    stakingParams:
                      requestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                      amount: '3200000000000000000'
                      validator: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
                      actionType: delegate
                    gasPrice: '1000000000000000'
                    gasLimit: '3000000000000000'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}:
    get:
      tags:
        - Staking State Information
      summary: List staking details by wallet
      description: Get staking wallet information including staking delegated balance, rewards accrued, and rewards accrual annual percentage rate.
      operationId: v1.stakingWallet.get
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
        - name: excludeExtraWalletInformation
          in: query
          description: Exclude balance and attributes for the wallet
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful Get a Staking Wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingWallet'
              example:
                enterpriseId: 1032e75c451052000436831deb797af1
                walletId: 2032e75g451052000636831abd797bd3
                walletType: custodial
                label: My Staking Wallet
                coin: eth
                delegated: '6400000000000000000'
                pendingUnstake: '0'
                pendingStake: '0'
                spendableAttributes:
                  min: '0'
                  max: '0'
                  fee: '0'
                  isStakingDurationNeeded: false
                rewards: '1000000000000000'
                apy: '8.2'
                createdDate: 2022-01-10T14:32:28.000Z
                modifiedDate: 2022-01-10T14:32:28.000Z
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}/delegations:
    get:
      tags:
        - Staking State Information
      summary: List staking delegations
      description: Retrieve staking wallet delegation information.
      operationId: v1.staking.wallet.delegations
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
        - name: delegationIds
          in: query
          description: The delegation IDs.
          required: false
          schema:
            type: string
        - name: delegationStatus
          in: query
          description: The status of the delegation.
          required: false
          schema:
            type: string
        - name: unstakeable
          in: query
          description: Unsupported for staking
          required: false
          schema:
            type: boolean
        - name: delegationAddress
          in: query
          description: The address of of the delegation.
          required: false
          schema:
            type: string
        - name: delegationAddresses
          in: query
          description: The list of delegation addresses to query for.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: provider
          in: query
          description: The validator provider used for staking.
          required: false
          schema:
            type: string
        - name: subType
          in: query
          description: The delegation staking sub type to filter by, used with the unstakeable flag.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/querySortByCreatedDate'
      responses:
        '200':
          description: Successful Retrieving a Staking Wallet Delegations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegationResults'
              examples:
                EthDelegationResultsExample:
                  $ref: '#/components/examples/EthDelegationResultsExample'
                AvaxPDelegationResultsExample:
                  $ref: '#/components/examples/AvaxPDelegationResultsExample'
                DotDelegationResultsExample:
                  $ref: '#/components/examples/DotDelegationResultsExample'
                MaticDelegationResultsExample:
                  $ref: '#/components/examples/MaticDelegationResultsExample'
                NearDelegationResultsExample:
                  $ref: '#/components/examples/NearDelegationResultsExample'
                SolDelegationResultsExample:
                  $ref: '#/components/examples/SolDelegationResultsExample'
                TaoDelegationResultsExample:
                  $ref: '#/components/examples/TaoDelegationResultsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/enterprises/{enterpriseId}:
    get:
      tags:
        - Staking State Information
      summary: List staking details by enterprise
      description: Retrieve staking information such as delegated balance, rewards accrued, and rewards accrual annual percentage rate.
      operationId: v1.staking.enterprise
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - name: enterpriseId
          in: path
          description: The enterprise ID representing the enterprise a user staked from.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Retrieving Staking Information For An Enterprise
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingEnterprise'
              example:
                enterpriseId: 1032e75c451052000436831deb797af1
                coin: eth
                delegated: '6400000000000000000'
                rewards: '1000000000000000'
                apy: '8.2'
  /api/staking/v1/{coin}/enterprises/{enterpriseId}/tokens:
    get:
      tags:
        - Staking State Information
      summary: List staking details by enterprise tokens
      description: Retrieve staking information at the enterprise and token level.
      operationId: v1.staking.enterprise.tokens
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - name: enterpriseId
          in: path
          description: The enterprise ID representing the enterprise a user staked from.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Retrieving Staking Information For An Enterprise At Token Level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingEnterprise'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/reward-accrual-report:
    get:
      tags:
        - Staking History
      summary: Get staking reward history
      description: Retrieve staking reward history.
      operationId: v1.staking.reward.history
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - name: enterpriseId
          in: query
          description: The enterprise ID of the enterprise a user staked from.
          required: false
          schema:
            type: string
        - name: walletId
          in: query
          description: The wallet ID of the wallet a user staked from. Either the enterpriseId or walletId need to be passed in.
          required: false
          schema:
            $ref: '#/components/schemas/WalletId'
        - name: range
          in: query
          description: The time range for the data, either hourly or daily.
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: The start date to search from.
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: The end date to search from.
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/querySortByDate'
      responses:
        '200':
          description: Successful Retrieving Staking History
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingRewards'
              example:
                rewards:
                  - reward: '1000000000000000'
                    enterpriseId: 1032e75c451052000436831deb797af1
                    date: 2022-01-10T14:32:28.000Z
                nextBatchPrevDate: 2022-01-11T14:32:28.000Z
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}/delegations/accruals:
    get:
      tags:
        - Staking History
      summary: Get staking accrual history
      description: Retrieve staking delegation accrual history.
      operationId: v1.staking.reward.accrual
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - name: walletId
          in: path
          description: The wallet ID of the wallet a user staked from. Either the enterpriseId or walletId need to be passed in.
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
        - name: delegationIds
          in: query
          description: Delegation IDs
          required: false
          schema:
            type: string
        - name: range
          in: query
          description: The time range for the data, either hourly or daily.
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: The start date to search from.
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: The end date to search from.
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/querySortByCreatedDate'
      responses:
        '200':
          description: Successful Retrieving Delegation Accrual History
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegationAccruals'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}/tokens:
    get:
      tags:
        - Staking State Information
      summary: List staking wallet tokens
      description: Get staking wallets for a specific wallet ID that has been used for staking tokens.
      operationId: v1.staking.wallet.tokens
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        '200':
          description: Successful Retrieving Staking Wallet Tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingWalletsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}/attributes:
    get:
      tags:
        - Staking State Information
      summary: Get staking requirements
      description: Retrieve staking wallet state attribute information.
      operationId: v1.staking.wallet.attributes
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
      responses:
        '200':
          description: Successful Retrieving a Staking Wallet State Attribute Information
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - title: AVAXP
                      - $ref: '#/components/schemas/AvaxpWalletStakingStateAttributes'
                  - allOf:
                      - title: DOT
                      - $ref: '#/components/schemas/DotWalletStakingStateAttributes'
                  - allOf:
                      - title: General
                      - $ref: '#/components/schemas/WalletStakingStateAttributes'
              examples:
                WalletStakingStateAttributesExamples:
                  $ref: '#/components/examples/WalletStakingStateAttributesExamples'
                DotWalletStakingStateAttributesExamples:
                  $ref: '#/components/examples/DotWalletStakingStateAttributesExamples'
                AvaxPWalletStakingStateAttributesExamples:
                  $ref: '#/components/examples/AvaxPWalletStakingStateAttributesExamples'
                SolWalletStakingStateAttributesExamples:
                  $ref: '#/components/examples/SolWalletStakingStateAttributesExamples'
                MaticWalletStakingStateAttributesExamples:
                  $ref: '#/components/examples/MaticWalletStakingStateAttributesExamples'
                NearWalletStakingStateAttributesExamples:
                  $ref: '#/components/examples/NearWalletStakingStateAttributesExamples'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/coins:
    get:
      tags:
        - Staking State Information
      summary: List coins available for staking
      description: Retrieve a list of coins available for staking and additional information.
      operationId: v1.staking.coins
      parameters:
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        '200':
          description: Successful Retrieving a List of Stakeable Coins
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakeableCoinsResult'
              examples:
                StakeableCoinsResultExample:
                  $ref: '#/components/examples/StakeableCoinsResultExample'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoinsUnauthorizedError'
              example:
                error: Unauthorized
                errorName: Error
                reqId: some-id
                context:
                  errorName: Error
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Internal Server Error
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/{coin}/wallets/{walletId}/validators:
    get:
      tags:
        - Staking State Information
      summary: List staking validators for a wallet
      description: Returns a list of staking validators for a wallet, and includes the total delegated amount and the amount of accrued rewards.
      operationId: v1.validators.list
      parameters:
        - $ref: '#/components/parameters/pathCoin1'
        - $ref: '#/components/parameters/pathWalletId1'
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        '200':
          description: Successful Retrieving Staking Validators For A Wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingValidatorsResponse'
              examples:
                SolStakingValidatorsResultsExample:
                  $ref: '#/components/examples/SolStakingValidatorsResultsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Wallet not found
                errorName: NotFound
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/validators:
    get:
      tags:
        - Staking State Information
      summary: List staking partnered validators
      description: Returns a list of staking partnered validators.
      operationId: v1.partneredValidators.list
      parameters:
        - name: coin
          in: query
          description: The staking asset.
          required: false
          schema:
            type: string
        - name: enterpriseId
          in: query
          description: The enterprise ID.
          required: false
          schema:
            type: string
        - name: walletId
          in: query
          description: The wallet ID.
          required: false
          schema:
            type: string
        - name: delegationStatus
          in: query
          description: The delegation status.
          required: false
          schema:
            type: string
        - name: onlyActive
          in: query
          description: True only if validators with active delegations are requested
          required: false
          schema:
            type: boolean
        - name: defaultValidator
          in: query
          description: True only if the default validator is requested
          required: false
          schema:
            type: boolean
        - name: isOperator
          in: query
          description: True only if the operators for restaking are requested (i.e Eigen layer restaking)
          required: false
          schema:
            type: boolean
        - name: stakingType
          in: query
          description: The staking type.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        '200':
          description: Successful Retrieving Staking Partnered Validators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingPartneredValidatorsResponse'
              examples:
                SuiStakingPartneredValidatorsResultsExample:
                  $ref: '#/components/examples/SuiStakingPartneredValidatorsResultsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Staking license not added for enterprise
                errorName: AccessDenied
                reqId: some-id
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Conflicting clientID
                errorName: Conflict
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/enterprises/{enterpriseId}/license:
    get:
      tags:
        - Staking State Information
      summary: Get staking license
      description: Returns a staking license for the given enterprise.
      operationId: v1.license
      parameters:
        - name: enterpriseId
          in: path
          description: The enterprise ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Retrieving Staking License For An Enterprise
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingLicenseResponse'
              examples:
                SolStakingValidatorsResultsExample:
                  $ref: '#/components/examples/LicenseResultsExample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: User is not a member of the enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: License not found
                errorName: NotFound
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/enterprises/{enterpriseId}/wallets:
    get:
      tags:
        - Staking State Information
      summary: List staking rewards
      description: Returns total rewards per staking wallet for an enterprise.
      operationId: v1.enterprise.stakingWallets.list
      parameters:
        - name: enterpriseId
          in: path
          description: The enterprise ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/queryCoins'
        - $ref: '#/components/parameters/queryLabel'
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        '200':
          description: Successful List Enterprise Staking Wallets Rewards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingWalletsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Bad Request
                errorName: BadRequest
                reqId: some-id
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Unauthorized
                errorName: Unauthorized
                reqId: some-id
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: User is not a member of the enterprise
                errorName: AccessDenied
                reqId: some-id
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: License not found
                errorName: NotFound
                reqId: some-id
        '500':
          description: Server Error - Transient error please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingError'
              example:
                error: Database is down
                errorName: Internal_Server_Error
                reqId: some-id
  /api/staking/v1/enterprises/{enterpriseId}/stakeable-coins:
    get:
      tags:
        - Staking State Information
      summary: List coins available to enterprise for staking
      description: Retrieve a list of coins available for staking.
      operationId: v1.enterprise.stakeableCoins
      parameters:
        - name: enterpriseId
          in: path
          description: The enterprise ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Retrieving a List of Stakeable Coins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakeableCoins'
              examples:
                EnterpriseStakeableCoinsResultExample:
                  $ref: '#/components/examples/EnterpriseStakeableCoinsResultExample'
  /api/fiat/v1/transaction/ach-debit:
    post:
      summary: Initiate ACH deposit
      description: Initiate an ACH deposit transaction from a linked bank account.
      operationId: fiat.ach.deposit
      tags:
        - Fiat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: string
                  description: The amount to deposit in USD cents (base units)
                  minLength: 1
                checkboxAgreement:
                  type: boolean
                  description: Indicates user agreement to the ACH terms
                bankId:
                  type: string
                  description: ID of the ACH bank account to debit from
                  minLength: 1
                goAccountId:
                  type: string
                  description: ID of the destination account
                  minLength: 1
              required:
                - amount
                - checkboxAgreement
                - bankId
                - goAccountId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  txId:
                    type: string
                    description: The ID of the created transaction
                required:
                  - txId
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/tradfi/v1/enterprise-transfer-limits/{enterpriseId}/{currency}/{transferType}/{transferDirection}:
    get:
      summary: List enterprise transfer limits
      description: List the transfer limits for an enterprise based on currency, transfer type, and direction.
      operationId: tradfi.v1.enterprise.transfer.limits
      tags:
        - Fiat
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
          description: The ID of the enterprise
        - name: currency
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TradfyCurrency'
          description: The currency for the transfer limits
        - name: transferType
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TradfyTransferType'
          description: The type of transfer (e.g., ach-us)
        - name: transferDirection
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TradfyTransferDirection'
          description: The direction of the transfer (e.g., in for deposits)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the transfer limit
                  maximumTransferAllowed:
                    type: string
                    description: Maximum transfer amount allowed in formatted currency
                  maximumTransferAllowedBase:
                    type: integer
                    description: Maximum transfer amount allowed in base units (e.g., cents for USD)
                  noLimit:
                    type: boolean
                    description: Indicates if there is no upper limit for transfers
                  transferDirection:
                    allOf:
                      - $ref: '#/components/schemas/TradfyTransferDirection'
                    description: Direction of the transfer
                  transferType:
                    allOf:
                      - $ref: '#/components/schemas/TradfyTransferType'
                    description: Type of transfer
                required:
                  - id
                  - maximumTransferAllowed
                  - maximumTransferAllowedBase
                  - noLimit
                  - transferDirection
                  - transferType
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/fiat/v1/transaction/ach-debit/agreement:
    get:
      summary: Get ACH agreement
      description: Get the ACH agreement for a specific bank account.
      operationId: fiat.ach.agreement
      tags:
        - Fiat
      parameters:
        - name: bankId
          in: query
          schema:
            type: string
            minLength: 1
        - name: amount
          in: query
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  achAuthorizationLanguage:
                    type: object
                    required:
                      - reviewAuthorization
                      - accountInformation
                      - authorizationDetails
                      - acknowledgment
                    properties:
                      reviewAuthorization:
                        type: string
                        description: The authorization language for the ACH debit
                      accountInformation:
                        type: object
                        required:
                          - accountHolderName
                          - bankName
                          - accountNumber
                          - routingNumber
                          - accountType
                        properties:
                          accountHolderName:
                            type: string
                            description: Name of the account holder
                          bankName:
                            type: string
                            description: Name of the financial institution
                          accountNumber:
                            type: string
                            description: Masked account number
                          routingNumber:
                            type: string
                            description: Routing number of the financial institution
                          accountType:
                            type: string
                            description: Type of bank account (checking or savings)
                            enum:
                              - checking
                              - savings
                      authorizationDetails:
                        type: string
                        description: Details of the transaction being authorized
                      acknowledgment:
                        type: string
                        description: Legal acknowledgment text for the ACH transaction
                required:
                  - achAuthorizationLanguage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/accounts/v1/address:
    get:
      tags:
        - Fiat
      operationId: fiat.address.info
      summary: Get address format information
      description: |
        This endpoint serves two purposes:
        1. When called without a countryCode, it returns a list of all supported countries with their codes and full names
        2. When called with a specific countryCode, it returns the required address fields and format for that country

        This information is used to dynamically build address collection forms with the appropriate fields for each country.
      parameters:
        - name: countryCode
          in: query
          schema:
            type: string
            description: Optional ISO 3166-1 alpha-2 country code. If not provided, all supported countries will be returned.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CountryListResponse'
                  - $ref: '#/components/schemas/CountryAddressFormatResponse'
              examples:
                countryListResponse:
                  summary: Response when no countryCode is provided
                  value:
                    countries:
                      US: United States of America
                      CA: Canada
                      GB: United Kingdom
                      DE: Germany
                countryAddressFormatResponse:
                  summary: Response when a countryCode is provided
                  value:
                    rules:
                      country: US
                      address_line_1:
                        label: Street Address
                        required: true
                        type: text
                        maxLength: 100
                      city_locality:
                        label: City
                        required: true
                        type: text
                        maxLength: 50
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/v2/bankaccounts:
    get:
      tags:
        - Fiat
      summary: List bank accounts
      description: List all bank accounts associated with a BitGo enterprise.
      operationId: v2.bankaccount.list
      x-unknown-tags:
        tags: Fiat Accounts
      parameters:
        - name: bankAccountId
          in: query
          schema:
            type: string
            minLength: 1
        - name: bankAccountIdHash
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: enterpriseId
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: idHash
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
        - name: verificationState
          in: query
          schema:
            type: string
            enum:
              - approved
              - rejected
              - pending
              - removed
              - revise
        - name: trustOrg
          in: query
          schema:
            type: string
            enum:
              - BitGo Trust
              - BitGo New York
              - BitGo Germany
              - BitGo Switzerland
              - BitGo Europe ApS
              - Frankfurt DE Trust
              - BitGo Singapore
              - BitGo Korea
              - BitGo Custody MENA FZE
              - BitGo Sister Trust 1
        - name: type
          in: query
          schema:
            type: string
            enum:
              - wire
              - cbit
              - ach
              - blinc
              - swift
              - sepa
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetBankAccountsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
    post:
      tags:
        - Fiat
      summary: Add bank account
      description: Add a bank account to a BitGo enterprise so you can deposit and withdraw fiat.
      operationId: v2.bankaccount.add
      x-unknown-tags:
        tags: Fiat Accounts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBankAccountRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1CreateBankAccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/v2/bankaccounts/{bankAccountId}:
    delete:
      tags:
        - Fiat
      summary: Delete bank account
      description: Delete a bank account associated with a BitGo enterprise.
      operationId: v2.bankaccount.delete
      x-unknown-tags:
        tags: Fiat Accounts
      parameters:
        - name: bankAccountId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DeleteBankAccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
    get:
      tags:
        - Fiat
      summary: Get bank account
      description: Get a bank account associated with a BitGo enterprise by its ID.
      operationId: v2.bankaccount.get
      x-unknown-tags:
        tags: Fiat Accounts
      parameters:
        - name: bankAccountId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetBankAccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
    put:
      tags:
        - Fiat
      summary: Update bank account
      description: Update a bank account associated with a BitGo enterprise.
      operationId: v2.bankaccount.update
      x-unknown-tags:
        tags: Fiat Accounts
      parameters:
        - name: bankAccountId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                address:
                  type: string
                  minLength: 1
                ownerAddress:
                  type: string
                  minLength: 1
                shortCountryCode:
                  type: string
                  minLength: 1
                ownerName:
                  type: string
                  minLength: 1
                furtherCreditTo:
                  type: string
                  minLength: 1
                intermediaryBankName:
                  type: string
                  minLength: 1
                intermediaryBankId:
                  type: string
                  minLength: 1
                description:
                  type: string
                accountType:
                  type: string
                  enum:
                    - checking
                    - saving
                    - unknown
                address1:
                  type: string
                  minLength: 1
                address2:
                  type: string
                  minLength: 1
                address3:
                  type: string
                  minLength: 1
                owner:
                  type: object
                  properties:
                    address1:
                      $ref: '#/components/schemas/NullableString'
                    address2:
                      $ref: '#/components/schemas/NullableString'
                    address3:
                      $ref: '#/components/schemas/NullableString'
                    name:
                      type: string
                      minLength: 1
                ownerAddressLine1:
                  type: string
                  minLength: 1
                ownerAddressLine2:
                  type: string
                  minLength: 1
                ownerAddressCityLocality:
                  type: string
                  minLength: 1
                ownerAddressStateProvince:
                  type: string
                  minLength: 1
                ownerAddressPostalCode:
                  type: string
                  minLength: 1
                ownerAddressCountryCode:
                  type: string
                  minLength: 1
                bankAddressLine1:
                  type: string
                  minLength: 1
                bankAddressLine2:
                  type: string
                  minLength: 1
                bankAddressCityLocality:
                  type: string
                  minLength: 1
                bankAddressStateProvince:
                  type: string
                  minLength: 1
                bankAddressPostalCode:
                  type: string
                  minLength: 1
                bankAddressCountryCode:
                  type: string
                  minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1UpdateBankAccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/v2/bankaccounts/deposit/info:
    get:
      tags:
        - Fiat
      summary: Get deposit info
      description: Get BitGo's bank account information so you can deposit fiat into a Go Account.
      operationId: fiat.get.deposit.info
      x-unknown-tags:
        tags: Fiat Accounts
      parameters:
        - name: currency
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BackingFiatCoin'
        - name: goAccountId
          in: query
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetDepositBankAccountsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ErrorResponse'
  /api/stablecoin/v1/{token}/constants:
    get:
      summary: Get Token Constants
      description: Retrieves token constants.
      operationId: stablecoin.v1.token.constants.get
      tags:
        - Stablecoin
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenConstantsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /api/stablecoin/v1/assets:
    get:
      summary: List supported assets
      description: Returns a list of assets.
      operationId: stablecoin.v1.assets.get
      tags:
        - Stablecoin
      parameters:
        - name: ids
          description: Unique identifier for the asset.
          in: query
          schema:
            type: string
            example: d1c27189-764c-4197-af06-e2623658f410
            minLength: 1
            format: uuid
        - name: token
          description: Token symbol or identifier for the stablecoin.
          in: query
          schema:
            type: string
            example: eth:usd1
            minLength: 1
        - name: chain
          description: Blockchain network or chain name where the asset exists.
          in: query
          schema:
            type: string
            example: eth
            minLength: 1
        - name: isIssuedByBitgo
          description: Flag to filter assets based on whether they were issued by BitGo.
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /api/stablecoin/v1/enterprise/{enterpriseId}/order:
    post:
      summary: Create stablecoin order
      description: Creates a mint or burn order.
      operationId: stablecoin.v1.enterprise.order.post
      tags:
        - Stablecoin
      parameters:
        - name: enterpriseId
          description: Enterprise id
          in: path
          required: true
          schema:
            type: string
            example: 67bc4ae090e8af8f9b412d3d67e85252
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - mint
                    - burn
                  description: Type of order operation (mint or burn)
                  example: mint
                fromAssetId:
                  type: string
                  description: Source asset identifier
                  example: 9025338d-ed25-4da0-aff3-ad970be213a9
                  title: uuid
                fromAmount:
                  type: string
                  description: Amount to be transferred from source asset, specified in its lowest denomination.
                  example: '100'
                toAssetId:
                  type: string
                  description: Destination asset identifier
                  example: d634310c-3359-4fc3-b7d0-96e593f7660e
                  title: uuid
                destinationType:
                  type: string
                  enum:
                    - go_account
                    - address
                    - wallet
                  description: Type of destination for the order
                  example: go_account
                destinationWalletId:
                  type: string
                  description: Destination wallet identifier for go_account type
                  example: 8iMXoeSpS1d1ziEJ
                  minLength: 1
                destinationAddress:
                  type: string
                  description: Destination blockchain address
                  minLength: 1
                sourceWalletId:
                  type: string
                  minLength: 1
              required:
                - type
                - fromAssetId
                - fromAmount
                - toAssetId
                - destinationType
                - sourceWalletId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /api/stablecoin/v1/enterprise/{enterpriseId}/orders:
    get:
      summary: List stablecoin orders by enterprise
      description: Retrieves a list of orders for a specific enterprise.
      operationId: stablecoin.v1.enterprise.order.get
      tags:
        - Stablecoin
      parameters:
        - name: searchLabel
          description: SearchLabel can represent either an Order Id or a Transaction Id.
          in: query
          schema:
            type: string
            example: 512f64d10b5f358f6dbf3303f90013cfa46006b02a03282456d6bd6432cc5daf
            minLength: 1
        - name: ids
          description: Specific order identifiers
          in: query
          schema:
            type: string
            minLength: 1
        - name: stablecoinAssetId
          description: Stablecoin asset identifier
          in: query
          schema:
            type: string
            example: d1c27189-764c-4197-af06-e2623658f410
            minLength: 1
        - name: type
          description: Order type
          in: query
          schema:
            type: string
            enum:
              - mint
              - burn
              - reward
            example: mint
        - name: status
          description: Order processing status
          in: query
          schema:
            oneOf:
              - type: array
                items:
                  type: string
                  enum:
                    - created
                    - confirmed_fiat_deposit
                    - confirmed_token_deposit
                    - initiated_burn_token_transfer
                    - completed_burn_token_transfer
                    - approved_mint
                    - triggering_mint
                    - triggering_burn
                    - completed_burn
                    - approved_client_disbursal
                    - initiated_client_disbursal
                    - fulfilled
                    - failed_mint_initiation
                    - failed_mint_transaction
                    - failed_burn_transaction
                    - failed_burn_token_transfer
                    - failed_to_mint
                    - failed_to_burn
                    - failed_to_initiate_disbursal
                    - failed_to_complete_disbursal
              - type: string
                enum:
                  - created
                  - confirmed_fiat_deposit
                  - confirmed_token_deposit
                  - initiated_burn_token_transfer
                  - completed_burn_token_transfer
                  - approved_mint
                  - triggering_mint
                  - triggering_burn
                  - completed_burn
                  - approved_client_disbursal
                  - initiated_client_disbursal
                  - fulfilled
                  - failed_mint_initiation
                  - failed_mint_transaction
                  - failed_burn_transaction
                  - failed_burn_token_transfer
                  - failed_to_mint
                  - failed_to_burn
                  - failed_to_initiate_disbursal
                  - failed_to_complete_disbursal
            example: created
        - name: fromDate
          description: Start date for order search
          in: query
          schema:
            type: string
            example: '2025-05-24T07:28:17.042Z'
            format: date-time
            title: ISO Date String
        - name: toDate
          description: End date for order search
          in: query
          schema:
            type: string
            example: '2025-06-23T07:28:17.042Z'
            format: date-time
            title: ISO Date String
        - name: limit
          description: Maximum results per page
          in: query
          schema:
            type: string
            example: '10'
            format: number
        - name: skip
          description: Results to skip
          in: query
          schema:
            type: string
            example: '0'
            format: number
        - name: sortBy
          description: Field name for sorting
          in: query
          schema:
            type: string
        - name: sortOrder
          description: Sort direction
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            example: DESC
        - name: enterpriseId
          description: Enterprise id
          in: path
          required: true
          schema:
            type: string
            example: 67bc4ae090e8af8f9b412d3d67e85252
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        fromAssetId:
                          type: string
                          description: Source asset identifier
                          example: 08c1271e-b15d-4af8-8929-f75383903da4
                          format: uuid
                          title: uuid
                        fromAmount:
                          type: string
                          description: Amount to be transferred from source asset, specified in its lowest denomination.
                          example: '500'
                          minLength: 1
                        toAssetId:
                          type: string
                          description: Destination asset identifier
                          example: 49ff49ea-3355-4717-bbb0-5e8f5cae2202
                          format: uuid
                          title: uuid
                        toAmount:
                          type: string
                          description: Amount to be received in destination asset
                          example: '5000000'
                          minLength: 1
                        destinationType:
                          type: string
                          enum:
                            - go_account
                            - address
                            - wallet
                          description: Type of destination for the order
                          example: go_account
                        sourceWalletId:
                          type: string
                          description: Source wallet identifier for the order
                          example: 67bc4b038f5408faefbfc8edcf6e6577
                          minLength: 1
                          pattern: ^[0-9a-f]{32}$
                        destinationWalletId:
                          type: string
                          description: Destination wallet identifier for go_account type
                          example: 67bc4b038f5408faefbfc8edcf6e6577
                          pattern: ^[0-9a-f]{32}$
                        destinationAddress:
                          type: string
                          description: Destination blockchain address
                          example: default_address
                          minLength: 1
                        userId:
                          type: string
                          description: User identifier who initiated the order
                          example: 677cfdceca8396cf5f7534ddeb8d11e3
                          minLength: 1
                          pattern: ^[0-9a-f]{32}$
                        clientDepositTxHash:
                          type: string
                          description: Transaction hash of the client deposit
                          example: 512f64d10b5f358f6dbf3303f90013cfa46006b02a03282456d6bd6432cc5daf
                          minLength: 1
                        orderHistories:
                          type: array
                          items:
                            allOf:
                              - $ref: '#/components/schemas/OrderHistoryBase'
                            description: Array of order status changes with timestamps
                        transactions:
                          type: array
                          items:
                            type: object
                            properties:
                              txId:
                                type: string
                                description: Transaction identifier
                                example: 512f64d10b5f358f6dbf3303f90013cfa46006b02a03282456d6bd6432cc5daf
                                minLength: 1
                              orderId:
                                type: string
                                description: Associated order identifier
                                example: 95bdbd9c-9cdc-41a4-ae70-165387b7aa51
                                format: uuid
                                title: uuid
                              assetId:
                                type: string
                                description: Asset identifier involved in transaction
                                example: 08c1271e-b15d-4af8-8929-f75383903da4
                                format: uuid
                                title: uuid
                              type:
                                type: string
                                enum:
                                  - clientDeposit
                                  - mint
                                  - burn
                                  - burnTokenTransfer
                                  - clientDisbursement
                                  - treasuryMintTransfer
                                  - treasuryBurnTransfer
                                description: Type of transaction
                                example: clientDeposit
                              sender:
                                type: string
                                description: Sender identifier
                                example: client
                                minLength: 1
                              senderType:
                                type: string
                                enum:
                                  - go_account
                                  - address
                                  - wallet
                                description: Type of sender
                                example: go_account
                              senderId:
                                type: string
                                description: Unique identifier of sender
                                example: 67bc4b038f5408faefbfc8edcf6e6577
                                minLength: 1
                                pattern: ^[0-9a-f]{32}$
                              sendAmount:
                                type: string
                                description: Amount sent in transaction
                                example: '500'
                                minLength: 1
                              receiver:
                                type: string
                                description: Receiver identifier
                                example: trust
                                minLength: 1
                              receiverType:
                                type: string
                                enum:
                                  - go_account
                                  - address
                                description: Type of receiver
                                example: go_account
                              receiverId:
                                type: string
                                description: Unique identifier of receiver
                                example: 6698e670115059e2efe672436a3aea3b
                                minLength: 1
                                pattern: ^[0-9a-f]{32}$
                              receiveAmount:
                                type: string
                                description: Amount received in transaction
                                example: '500'
                                minLength: 1
                              status:
                                type: string
                                enum:
                                  - initiated
                                  - signed
                                  - unconfirmed
                                  - confirmed
                                  - rejected
                                  - failed
                                description: Current status of transaction
                                example: confirmed
                              createdAt:
                                type: string
                                description: Timestamp when transaction was created
                                example: '2025-04-04T09:26:21.600Z'
                              updatedAt:
                                type: string
                                description: Timestamp when transaction was last updated
                                example: '2025-04-04T09:26:21.600Z'
                              pendingApprovalId:
                                type: string
                                description: Pending approval id
                                minLength: 1
                            required:
                              - txId
                              - orderId
                              - assetId
                              - type
                              - sender
                              - senderType
                              - senderId
                              - sendAmount
                              - receiver
                              - receiverType
                              - receiverId
                              - receiveAmount
                              - status
                              - createdAt
                              - updatedAt
                              - pendingApprovalId
                            description: List of transactions associated with the order
                        metadata:
                          type: string
                          description: Additional metadata about the order
                          minLength: 1
                        createdAt:
                          type: string
                          description: Timestamp when the order was created
                          example: '2025-04-04T09:25:48.216Z'
                          format: date-time
                          title: ISO Date String
                        updatedAt:
                          type: string
                          description: Timestamp when the order was last updated
                          example: '2025-04-04T09:55:09.136Z'
                          format: date-time
                          title: ISO Date String
                      required:
                        - fromAssetId
                        - fromAmount
                        - toAssetId
                        - toAmount
                        - destinationType
                    - $ref: '#/components/schemas/OrderResponseBase'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /api/stablecoin/v1/enterprise/{enterpriseId}/orders/{orderId}:
    get:
      summary: Get stablecoin order by ID
      description: Retrieves a order by its ID for a specific enterprise.
      operationId: stablecoin.v1.enterprise.order.getById
      tags:
        - Stablecoin
      parameters:
        - name: enterpriseId
          description: Enterprise id
          in: path
          required: true
          schema:
            type: string
            example: 67bc4ae090e8af8f9b412d3d67e85252
            minLength: 1
        - name: orderId
          description: Order identifier
          in: path
          required: true
          schema:
            type: string
            example: ec84b11f-491b-465f-a118-403a3485452b
            title: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /api/v1/user/login:
    post:
      summary: Login Request
      operationId: user.login
      tags:
        - User
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the user
                extensible:
                  type: boolean
                otp:
                  type: string
                  description: The one-time password
                password:
                  type: string
                  description: The password
              required:
                - email
                - otp
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/key/{id}:
    get:
      summary: Get key
      description: |-
        Get Key using either the key id or the pub. When using the public key, it will only
        return the mandatory fields.
      operationId: v2.key.get
      tags:
        - Key
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: id
          description: The key ID or the public key
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/tss/pubkey:
    get:
      summary: Get Bitgo MPC GPG public key
      description: 'It is necessary to use correct MPC BitGo public GPG key when performing MPC operations. Different public keys might be necessary in different cases. This endpoint returns a valid GPG public key taking into account all factors, including: coin, user and enterprise feature flags. Using incorrect key may cause signing and wallet creation errors.'
      operationId: v2.tsspubkey.getbycoin
      tags:
        - Key
      parameters:
        - name: enterpriseId
          description: Filter by enterprise. Allows to take enterprise settings into consideration.
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BitgoTSSPublicKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/address:
    post:
      summary: Create address
      description: |-
        Creates a new receive address for a wallet. If you create a forwarder address, whenever it receives assets, BitGo automatically deploys a forwarder smart contract to flush the balance to the base address. See [Blockchain Reference](/coins/Agoric) topics to learn more about address management, fees, and consolidations for specific assets.
        **Note:** New Ethereum addresses require blockchain confirmation before you can consolidate from them.
      operationId: v2.wallet.newaddress
      tags:
        - Address
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                chain:
                  type: number
                  default: 1
                  example: 1
                forwarderVersion:
                  type: number
                  description: (ETH only) Specify forwarder version to use in address creation. To reduce the cost of creating ETH forwarders, BitGo uses a set  of forwarder contracts that deploy as a simple proxy to a single  implementation (https://eips.ethereum.org/EIPS/eip-1167).  Additionally, forwarders deploy using opcode, CREATE2, enabling  them to deploy only when needed (https://eips.ethereum.org/EIPS/eip-1014).  These forwarders otherwise operate identically to prior ETH forwarders. Use this flag to specify the forwarder contract version when  deploying a forwarder contract. Use 0 for the older forwarder  (https://github.com/BitGo/eth-multisig-v2). Use 1 for the new fee-improved  forwarder (https://github.com/BitGo/eth-multisig-v4). Use 2 for  NFT-supported forwarders and version 2 wallets. Use 3 for MPC wallets.  Use 4 for forwarders with the same functionality as v2 but with some changes. v4 is applicable for Arbitrum, Optimism, ZkSync, and other EVM-compatible chains that we will onboard in the future. Use 5 for new MPC based wallets with wallet-version 6
                  minimum: 0
                  maximum: 5
                referenceAddressId:
                  type: string
                onToken:
                  type: string
                  description: Create an address for the given token
                  example: ofcbtc
                label:
                  type: string
                  description: A human-readable label for the address
                  example: Bob's Hot Wallet Address
                  maxLength: 250
                lowPriority:
                  type: boolean
                  default: false
                  description: Whether the deployment of the address forwarder contract should use a low priority fee key (ETH only)
                gasPrice:
                  oneOf:
                    - type: string
                    - type: number
                  description: Explicit gas price to use when deploying the forwarder contract (ETH only). If not given, defaults to the current estimated network gas price.
                eip1559:
                  type: object
                  description: '(ETH forwarderVersion: 0 wallets only) Specify eip1559 fee parameters in forwarder creation transactions.'
                  properties:
                    maxFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens.
                    maxPriorityFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens.
                  required:
                    - maxFeePerGas
                    - maxPriorityFeePerGas
                format:
                  type: string
                  description: Format to use for the new address, if the coin which supports multiple formats for an address. Currently, Bitcoin Cash is the only coin which has support for multiple address formats. For Bitcoin Cash, BitGo supports both the base58 (legacy) address format, as well as the newer CashAddr format. The default address format is base58. To request a CashAddr formatted address instead, use the value 'cashaddr' as the format.
                  example: cashaddr
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletAddressUnion'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/address/{addressId}/deployment:
    post:
      summary: Deploy address
      description: This API call is to manually deploy an ETH address
      operationId: v2.wallet.deployForwarder
      tags:
        - Address
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: addressId
          description: Address or Id which will be used for information lookup
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                forceDeploy:
                  type: boolean
                  default: false
                  description: 'Use forceDeploy: true to deploy the forwarder even if pendingDeployment flag is set as false'
                gasPrice:
                  type: number
                  description: Explicit gas price to use when deploying the forwarder contract (ETH only). If not given, defaults to the current estimated network gas price.
                eip1559:
                  type: object
                  description: Specify eip1559 fee parameters in forwarder creation transactions.
                  properties:
                    maxFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens.
                    maxPriorityFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens.
                  required:
                    - maxFeePerGas
                    - maxPriorityFeePerGas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployAddressAndForwardTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/address/{addressId}/tokenforward:
    post:
      summary: Forward tokens from address
      description: This API call is to manually forward tokens from an ETH or CELO address
      operationId: v2.wallet.forwardToken
      tags:
        - Address
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: addressId
          description: Address or Id which will be used for information lookup
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tokenName:
                  type: string
                  description: Name of token that needs to be forwarded from the address
                forceFlush:
                  type: boolean
                  default: false
                  description: 'Use forceFlush: true to flush the tokens from forwarder irrespective of the balance of the forwarders'
                gasPrice:
                  type: number
                  description: Explicit gas price to use when forwarding token from the forwarder contract (ETH and Celo only). If not given, defaults to the current estimated network gas price.
                eip1559:
                  type: object
                  description: Specify eip1559 fee parameters in token forwarding transaction.
                  properties:
                    maxFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens.
                    maxPriorityFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens.
                  required:
                    - maxFeePerGas
                    - maxPriorityFeePerGas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployAddressAndForwardTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/address/{addressOrId}:
    get:
      summary: Get address
      description: Gets a receive address on a wallet
      operationId: v2.wallet.singlewalletaddress
      tags:
        - Address
      parameters:
        - name: dt
          description: For XRP addresses
          in: query
          schema:
            type: string
        - name: memoId
          description: For XLM addresses
          in: query
          schema:
            type: string
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: addressOrId
          description: The address or ID which will be used for information lookup
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletAddressUnion'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    put:
      summary: Update address
      description: Update a receive address on a wallet
      operationId: v2.wallet.updateaddress
      tags:
        - Address
      parameters:
        - name: dt
          description: For XRP addresses
          in: query
          schema:
            type: string
        - name: memoId
          description: For XLM addresses
          in: query
          schema:
            type: string
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: addressOrId
          description: Address or Id which will be used for information lookup
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  nullable: true
                  allOf:
                    - $ref: '#/components/schemas/AddressLabelString'
                  description: New label which should apply to this address. The caller needs admin permissions for the associated wallet if the label already has a value. Otherwise view or spend permissions are fine because the label has not been set yet. This is due to the fact that customers use address labels to associate addresses with their customers.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletAddress'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/address/{addressOrId}/proof:
    get:
      summary: Get proof of address ownership
      description: |-
        Gets proof of ownership for an address of a TRUST wallet. Returns a unique BTC proof that you can use with your
        travel-rule solutions. Only available for BTC.

        Before using this endpoint, BitGo must configure the VASP ID for your enterprise. Contact support@bitgo.com and
        provide your enterprise ID, environment (production or testnet), role at your company, and your VASP ID.
      operationId: v2.wallet.addressProof
      tags:
        - Address
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: addressOrId
          description: Address or Id which will be used for information lookup
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressProofResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/addresses:
    get:
      summary: List addresses
      description: List receive addresses on a wallet
      operationId: v2.wallet.addresses
      tags:
        - Address
      parameters:
        - name: includeBalances
          description: Whether to include address balances
          in: query
          schema:
            type: boolean
            default: false
        - name: includeTokens
          description: Whether to include token addresses
          in: query
          schema:
            type: boolean
            default: false
        - name: includeAllTokenAddresses
          description: Whether to include all token addresses for receiver addresses
          in: query
          schema:
            type: boolean
            default: false
        - name: labelContains
          description: A case-insensitive regular expression which will be used to filter returned addresses based on their address label.
          in: query
          schema:
            type: string
        - name: limit
          description: Maximum number of results to return
          in: query
          schema:
            type: string
            default: '25'
            minimum: 1
            maximum: 500
        - name: sort
          description: Sort order of returned addresses. (1 for ascending, -1 for descending)
          in: query
          schema:
            type: string
            default: '1'
        - name: sortedField
          description: The field by which addresses will be sorted, if not provided then sort by id by default
          in: query
          schema:
            type: string
            enum:
              - token
              - label
        - name: sortedFieldDirection
          description: Sort order of the returned addresses on the sortedField
          in: query
          schema:
            type: string
            enum:
              - '1'
              - '-1'
        - name: chains
          description: Filter by address chains
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - '0'
                - '1'
                - '10'
                - '11'
                - '20'
                - '21'
                - '30'
                - '31'
                - '40'
                - '41'
              description: Filter by address chains
              example: '1'
        - name: includeTotalAddressCount
          description: For large wallets (>100k addresses), include total count of addresses (including addresses pending on-chain) matching the query.
          in: query
          schema:
            type: boolean
            default: false
        - name: prevId
          description: Return the next batch of results, based on the nextBatchPrevId value from the previous batch
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: token
          description: This param is used to query and filter addresses by token names in case of ofc wallets
          in: query
          schema:
            type: array
            items:
              type: string
              description: This param is used to query and filter addresses by token names in case of ofc wallets
              example: ofctbtc
        - name: returnBalancesForToken
          description: Name of the token that the response should include balances for. (Eth and Celo only)
          in: query
          schema:
            type: string
        - name: pendingDeployment
          description: Filter the addresses based on their deployment status. Return the deployed addresses if this param is passed as false and return undeployed addresses if it is passed as true. (Eth only)
          in: query
          schema:
            type: string
        - name: segwit
          description: DEPRECATED. Mutually exclusive with 'chains'. Returns only 'p2shP2wsh' unspents/addresses on true. Returns only 'p2sh' unspents/addresses on false. Equivalent to passing 10 and 11 as the only value in 'chains' on true, 0 and 1 on false.
          in: query
          schema:
            type: boolean
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressQueryResult'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/addresses/balances:
    get:
      summary: List addresses sorted by balance
      description: |-
        List addresses by sorted balances on a wallet.
        Supported coins: TRX.
      operationId: v2.wallet.addresses.balances
      tags:
        - Address
      parameters:
        - name: page
          description: page number
          in: query
          schema:
            type: string
            default: '1'
            minimum: 1
            format: number
        - name: limit
          description: Maximum number of results to return
          in: query
          schema:
            type: string
            default: '500'
            minimum: 1
            maximum: 500
            format: number
        - name: sort
          description: Sort order of returned addresses based on balance. (1 for ascending, -1 for descending)
          in: query
          schema:
            type: string
            enum:
              - '1'
              - '-1'
            default: '-1'
        - name: token
          description: Name of the token for which the addresses need to be fetched
          in: query
          schema:
            type: string
        - name: nftCollectionId
          description: NFT collection ID for which the addresses need to be fetched
          in: query
          schema:
            type: string
        - name: nftId
          description: NFT ID for which the addresses need to be fetched
          in: query
          schema:
            type: string
        - name: coin
          description: A cryptocurrency symbol or token ticker symbol
          in: path
          required: true
          schema:
            type: string
            example: trx
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressWithBalanceQueryResult'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/allowance:
    get:
      summary: Get the token allowance for a specific token contract address
      operationId: v2.wallet.token.allowance
      tags:
        - Wallet
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenAllowanceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAddress'
  /api/v2/{coin}/wallet/{walletId}/crossChainUnspents:
    get:
      summary: Get Wallet Cross Chain Unspents
      description: |-
        Returns atomic cross-chain unspents that can be imported by the wallet.
        Supported coins: AVAX.
      operationId: v2.wallet.crosschainunspents
      tags:
        - Wallet
      parameters:
        - name: sourceChain
          description: Returns unspents exported from the source chain. If not provided, returns outputs from all chains.
          in: query
          schema:
            type: string
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletCrossChainUnspentResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/forwarders/balances:
    get:
      summary: List forwarder addresses and balances
      description: Lists all forwarder addresses and their balances for a wallet. By default, returns low-balance forwarder addresses. A forwarder address has a low balance if the number of assets in it is less than the balance times by the current gas price times the transaction gas limit.
      operationId: v2.wallet.forwarders.balance
      tags:
        - Wallet
      parameters:
        - name: minimumBalance
          description: Lower bound of balance range.
          in: query
          schema:
            type: string
            format: number
        - name: maximumBalance
          description: Upper bound of balance range.
          in: query
          schema:
            type: string
            format: number
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forwardersBalanceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
  /api/v2/{coin}/wallet/{walletId}/fundforwarders:
    post:
      summary: Send funds to forwarder
      description: Send funds from a fee address to forwarder. Only supports account-based coins and tokens (like ETH).
      operationId: v2.wallet.fundforwarders
      tags:
        - Wallet
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                forwarders:
                  type: array
                  items:
                    type: object
                    properties:
                      forwarderAddress:
                        type: string
                        description: Address of the forwarder to send funds to
                      amount:
                        type: string
                        description: Amount to send to the forwarder. If not given, defaults to sending an estimate of the amount needed for a fund recovery.
                    required:
                      - forwarderAddress
              required:
                - forwarders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        forwarderAddress:
                          type: string
                          description: Failed forwarder address
                        errMsg:
                          type: string
                      required:
                        - forwarderAddress
                        - errMsg
                  successTxIds:
                    type: array
                    items:
                      type: object
                      properties:
                        forwarderAddress:
                          type: string
                          description: Successful forwarder address
                        txId:
                          type: string
                          description: On-chain transaction ID
                      required:
                        - forwarderAddress
                        - txId
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/potentialStuckTxs:
    get:
      summary: Get list of potentially stuck transactions and their nonces for eth-like coins
      description: |-
        Gets a list of potentially problematic transactions, their nonces, the reason they
        are stuck, and possible solutions for a given wallet.
      operationId: v2.wallet.getpotentialstucktxs
      tags:
        - Wallet
      parameters:
        - name: expandSendTransferMetadata
          description: True, if expanding the send transfer for each stuck transaction if one is available.
          in: query
          schema:
            type: boolean
            default: false
        - name: txid
          description: The transaction ID of the stuck transaction.
          in: query
          schema:
            type: string
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPotentialStuckTxsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/sequenceIds:
    get:
      summary: List last 10 contract sequenceIds of a wallet
      description: |-
        Lists last 10 contract sequenceIds of the base address of a wallet alongwith
        their transaction ids.
      operationId: v2.wallet.getSequenceIds
      tags:
        - Wallet
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSequenceIdsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
  /api/v2/{coin}/wallet/{walletId}/token/approval/build:
    post:
      summary: Build an approval transaction for ERC20 token
      operationId: v2.wallet.token.approval.build
      tags:
        - Wallet
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tokenName:
                  type: string
                  minLength: 1
                amount:
                  type: string
                  minLength: 1
                gasLimit:
                  type: number
                gasPrice:
                  type: number
                eip1559:
                  type: object
                  properties:
                    maxFeePerGas:
                      type: number
                    maxPriorityFeePerGas:
                      type: number
                  required:
                    - maxFeePerGas
                    - maxPriorityFeePerGas
              required:
                - tokenName
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTokenApprovalResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/tx/changeFee:
    post:
      summary: Change Fee
      description: |-
        Change the fee rate of a transaction in an attempt to accelerate its confirmation.
        Supported by: ETH, ERC20 tokens, CELO, RSK, ETC

        Requirements:
        - Transaction gas price must increase by at least 10 Gwei or 20% higher than the original transaction fee
        - At least 15 minutes must have passed since original send
      operationId: v2.wallet.changefee
      tags:
        - Transfer
      parameters:
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                txid:
                  type: string
                  description: Transaction ID of the transaction for which we are changing the fee for.
                  example: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
                  minLength: 1
                fee:
                  type: number
                  description: The new fee for the transaction.
                eip1559:
                  type: object
                  description: EIP-1559 transaction parameters
                  properties:
                    maxFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens.
                    maxPriorityFeePerGas:
                      allOf:
                        - $ref: '#/components/schemas/NumberLike'
                      description: Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens.
                  required:
                    - maxFeePerGas
                    - maxPriorityFeePerGas
                txType:
                  type: string
                  description: Use `txType` to change fee of address initialization transaction for V5 wallets
                  example: AddressInitialization
              required:
                - txid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeFeeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/{walletId}/unspents:
    get:
      summary: List unspents on a wallet
      operationId: v2.wallet.unspents
      tags:
        - Wallet
      parameters:
        - name: limit
          description: Limit the number of results.
          in: query
          schema:
            type: string
            default: '25'
            minimum: 0
            maximum: 2000
            format: number
        - name: prevId
          description: Only return results created after this ID
          in: query
          schema:
            type: string
            minLength: 1
        - name: chains
          description: Filter by chains. May be given mutiple times
          in: query
          schema:
            type: array
            items:
              type: string
              format: number
              description: Filter by chains. May be given mutiple times
        - name: target
          description: The combined target value of the unspents
          in: query
          schema:
            type: string
            format: number
        - name: numRecipients
          description: number of recipients of the unspents
          in: query
          schema:
            type: string
            format: number
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinNonEmptyString'
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletUnspentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/{coin}/wallet/balances:
    get:
      summary: List total balances by coin
      description: Returns total balances by asset (including tokens and NFTs) across all wallets in an enterprise.
      operationId: v2.wallet.gettotalbalancesbycoin
      tags:
        - Wallet
      parameters:
        - name: allTokens
          description: Include balances for all subtokens (i.e. ERC20 Tokens, Stellar Tokens)
          in: query
          schema:
            type: boolean
        - name: enterprise
          description: Filter by enterprise ID
          in: query
          schema:
            oneOf:
              - $ref: '#/components/schemas/EnterpriseIdString'
              - type: array
                items:
                  type: string
                  example: 59cd72485007a239fb00282ed480da1f
                  pattern: ^[0-9a-f]{32}$
        - name: showAllWallets
          description: Include wallets that have 'deleted' or 'creationFailed' set to **true**
          in: query
          schema:
            type: boolean
            default: false
        - name: includeStakingBalances
          description: Include `stakingBalanceString` and `rewardBalanceString` properties for each staking wallet.
          in: query
          schema:
            type: boolean
            default: false
        - name: coin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CoinString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWalletBalancesByCoinResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/auditlog:
    get:
      summary: List audit logs
      operationId: v2.auditlog.list
      tags:
        - Audit log
      parameters:
        - name: allTokens
          description: Whether to include all tokens
          in: query
          schema:
            type: boolean
        - name: dateGte
          description: Date greater than or equal to
          in: query
          schema:
            type: string
            example: '2025-04-26T18:30:00.000Z'
        - name: dateLt
          description: Date less than
          in: query
          schema:
            type: string
            example: '2025-04-26T18:30:00.000Z'
        - name: enterpriseId
          description: The enterprise ID to filter by
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: includeV1
          description: Whether to include v1 audit logs
          in: query
          schema:
            type: boolean
        - name: limit
          description: Limit the number of results
          in: query
          schema:
            type: string
            format: number
        - name: prevId
          description: The ID of the previous audit log
          in: query
          schema:
            type: string
        - name: type
          description: The types of audit log to filter by
          in: query
          schema:
            oneOf:
              - $ref: '#/components/schemas/AuditLogType1'
              - type: array
                items:
                  type: string
        - name: userId
          description: The user ID to filter by
          in: query
          schema:
            type: string
        - name: walletId
          description: The wallet ID to filter by
          in: query
          schema:
            type: string
        - name: sharedPolicyRuleId
          description: The shared policy rule ID to filter by
          in: query
          schema:
            type: string
        - name: vaspId
          description: The VASPs ID to filter by
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuditLogsResponse'
  /api/v2/enterprise/{enterpriseId}/availableassets:
    get:
      summary: List available assets
      description: Lists all available assets for a given enterprise. Must have view permissions on the enterprise
      operationId: v2.enterprise.availableassets.get
      tags:
        - Enterprise
      parameters:
        - name: includeTokens
          description: True, if returning tokens.
          in: query
          schema:
            type: boolean
            default: false
        - name: excludeOfcCoins
          description: True, if excluding off-chain assets.
          in: query
          schema:
            type: boolean
            default: false
        - name: enterpriseId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                example:
                  - btc
                  - eth
                  - usdt
                  - sol
                  - ton
                items:
                  type: string
                  description: A list of cryptocurrency or token ticker symbols
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidEnterpriseId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/freeze:
    post:
      summary: Freeze the enterprise
      operationId: enterprise.freeze
      tags:
        - Enterprise
      parameters:
        - name: enterpriseId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                duration:
                  type: string
                  default: '3600'
                  description: Seconds to freeze the enterpise for
                  format: number
              required:
                - duration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Freeze'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidEnterpriseId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
  /api/v2/enterprise/{enterpriseId}/pin/count:
    get:
      summary: Get pinned wallet count
      description: Returns the count of pinned wallets for the current user on the specified enterprise.
      operationId: v2.enterprise.pin.count
      tags:
        - Wallet
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPinnedWalletsCountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidEnterpriseId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/points/optOut:
    put:
      summary: Opt out of points system
      operationId: v2.enterprise.points.optOut
      tags:
        - Enterprise
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
        - name: authorization
          description: The authorization header
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/regionalfeatures:
    get:
      summary: Get enterprise regional features
      description: Get the regional features available to an enterprise by its location.
      operationId: v2.enterprise.regional.features.get
      tags:
        - Enterprise
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionalFeatures'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/tssconfig:
    get:
      summary: Get enterprise MPC config
      description: This api fetches the enterprise MPC config if it exists. The caller of this API must have view permissions on the enterprise.
      operationId: v2.enterprise.tssconfig.get
      tags:
        - Enterprise
      parameters:
        - name: enterpriseId
          description: The enterprise ID
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TssConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidEnterpriseId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/tssconfig/ecdsa/challenge:
    put:
      summary: Update enterprise ECDSA MPC challenge
      description: This api is used to upload a new ECDSA challenge for the enterprise. This will replace the existing challenge if one exists.
      operationId: v2.enterprise.tssconfig.ecdsa.challenge.update
      tags:
        - Enterprise
      parameters:
        - name: enterpriseId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enterprise:
                  $ref: '#/components/schemas/UpdateEnterpriseChallenge'
                bitgoNitroHsm:
                  $ref: '#/components/schemas/UpdateBitgoChallenge'
                bitgoInstitutionalHsm:
                  $ref: '#/components/schemas/UpdateBitgoChallenge'
              required:
                - enterprise
                - bitgoNitroHsm
                - bitgoInstitutionalHsm
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePartyConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidEnterpriseId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/txrequests:
    get:
      summary: Get transaction requests by enterprise
      description: Get a paginated list of transaction requests filtered by enterprise.
      operationId: v2.enterprise.txrequest.get
      tags:
        - Transaction request
      parameters:
        - name: txRequestIds
          description: If provided, only the specified transaction requests will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              description: If provided, only the specified transaction requests will be returned.
        - name: idempotencyKeys
          description: If provided, only transaction requests with the matching idempotencyKeys will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              description: If provided, only transaction requests with the matching idempotencyKeys will be returned.
        - name: sequenceIds
          description: A "sequenceId" is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a "sequenceId" you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per "sequenceId" (and fails all subsequent attempts), you can retry sending without the risk of double spending. The "sequenceId" is only visible to users on the wallet and is not shared publicly.
          in: query
          schema:
            type: array
            items:
              type: string
              description: A "sequenceId" is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a "sequenceId" you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per "sequenceId" (and fails all subsequent attempts), you can retry sending without the risk of double spending. The "sequenceId" is only visible to users on the wallet and is not shared publicly.
        - name: states
          description: 'If provided, only transaction requests of the specified state will be returned. - `canceled`: Canceled by a wallet spender before approval or sending. - `delivered`: Inserted into the send queue (or rejected by BitGo through circuit breakers). This state is only used with apiVersion "full". - `failed` : Catch-all state indicating an unrecoverable failure (such as a duplicate key error when creating a transfer). - `initialized`: First state when a transaction request is created (before any policy evaluation occurs). - `pendingApproval`: Triggered a policy that requires approval to proceed. - `pendingDelivery`: Requires further action to proceed (such as pending signature, or accepting/rejecting due to triggering a circuit breaker). This state is only used with apiVersion "full". - `pendingUserCommitment`: Ready to receive your user commitments. This state is only used with apiVersion "lite" and EdDSA assets with commitment signing states. - `pendingUserGShare`: Ready to receive your gShare. - `pendingUserRShare`: Ready to receive your rShare. - `pendingUserSignature`: Ready to receive your user signature (get the unsigned transaction from BitGo and sign it). This state is only used with apiVersion "lite" and EdDSA assets without commitment signing states. - `readyToSend`: Ready send (share combination is complete). - `rejected`: Rejected by an approver. - `signed`: All transactions in the transaction request were signed. All future updates will be in the transfer document.'
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - pendingApproval
                - canceled
                - rejected
                - initialized
                - pendingDelivery
                - delivered
                - pendingUserSignature
                - pendingUserCommitment
                - pendingUserRShare
                - pendingUserGShare
                - readyToSend
                - signed
                - failed
              description: 'If provided, only transaction requests of the specified state will be returned. - `canceled`: Canceled by a wallet spender before approval or sending. - `delivered`: Inserted into the send queue (or rejected by BitGo through circuit breakers). This state is only used with apiVersion "full". - `failed` : Catch-all state indicating an unrecoverable failure (such as a duplicate key error when creating a transfer). - `initialized`: First state when a transaction request is created (before any policy evaluation occurs). - `pendingApproval`: Triggered a policy that requires approval to proceed. - `pendingDelivery`: Requires further action to proceed (such as pending signature, or accepting/rejecting due to triggering a circuit breaker). This state is only used with apiVersion "full". - `pendingUserCommitment`: Ready to receive your user commitments. This state is only used with apiVersion "lite" and EdDSA assets with commitment signing states. - `pendingUserGShare`: Ready to receive your gShare. - `pendingUserRShare`: Ready to receive your rShare. - `pendingUserSignature`: Ready to receive your user signature (get the unsigned transaction from BitGo and sign it). This state is only used with apiVersion "lite" and EdDSA assets without commitment signing states. - `readyToSend`: Ready send (share combination is complete). - `rejected`: Rejected by an approver. - `signed`: All transactions in the transaction request were signed. All future updates will be in the transfer document.'
        - name: latest
          description: If provided, only the latest transaction request version will be returned.
          in: query
          schema:
            type: boolean
        - name: limit
          description: Maximum number of results to return. If the result set is truncated, use the "nextBatchPrevId" value to get the next batch.
          in: query
          schema:
            type: string
            default: '25'
            minimum: 1
            maximum: 500
            format: number
        - name: prevId
          description: Return the next batch of results, based on the "nextBatchPrevId" value from the previous batch.
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: version
          in: query
          schema:
            type: string
            format: number
        - name: sortBy
          description: Sorts by specified field, default sorting by id.
          in: query
          schema:
            type: string
            enum:
              - id
              - createdDate
        - name: sortDirection
          description: Sorts order by field in specified sort direction, default ascending.
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionRequestsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/txrequests/bypermission:
    get:
      summary: Get transaction requests by enterprise filtering by wallet permissions
      description: Only supported for transaction request full
      operationId: v2.enterprise.txrequest.getByPermission
      tags:
        - Transaction request
      parameters:
        - name: walletTypes
          description: If present, filters transaction requests by the specified wallet types
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - backing
                - cold
                - custodial
                - custodialPaired
                - hot
                - trading
              description: If present, filters transaction requests by the specified wallet types
        - name: states
          description: 'If provided, only transaction requests of the specified state will be returned. - `canceled`: Canceled by a wallet spender before approval or sending. - `delivered`: Inserted into the send queue (or rejected by BitGo through circuit breakers). This state is only used with apiVersion "full". - `failed` : Catch-all state indicating an unrecoverable failure (such as a duplicate key error when creating a transfer). - `initialized`: First state when a transaction request is created (before any policy evaluation occurs). - `pendingApproval`: Triggered a policy that requires approval to proceed. - `pendingDelivery`: Requires further action to proceed (such as pending signature, or accepting/rejecting due to triggering a circuit breaker). This state is only used with apiVersion "full". - `pendingUserCommitment`: Ready to receive your user commitments. This state is only used with apiVersion "lite" and EdDSA assets with commitment signing states. - `pendingUserGShare`: Ready to receive your gShare. - `pendingUserRShare`: Ready to receive your rShare. - `pendingUserSignature`: Ready to receive your user signature (get the unsigned transaction from BitGo and sign it). This state is only used with apiVersion "lite" and EdDSA assets without commitment signing states. - `readyToSend`: Ready send (share combination is complete). - `rejected`: Rejected by an approver. - `signed`: All transactions in the transaction request were signed. All future updates will be in the transfer document.'
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - pendingApproval
                - canceled
                - rejected
                - initialized
                - pendingDelivery
                - delivered
                - pendingUserSignature
                - pendingUserCommitment
                - pendingUserRShare
                - pendingUserGShare
                - readyToSend
                - signed
                - failed
              description: 'If provided, only transaction requests of the specified state will be returned. - `canceled`: Canceled by a wallet spender before approval or sending. - `delivered`: Inserted into the send queue (or rejected by BitGo through circuit breakers). This state is only used with apiVersion "full". - `failed` : Catch-all state indicating an unrecoverable failure (such as a duplicate key error when creating a transfer). - `initialized`: First state when a transaction request is created (before any policy evaluation occurs). - `pendingApproval`: Triggered a policy that requires approval to proceed. - `pendingDelivery`: Requires further action to proceed (such as pending signature, or accepting/rejecting due to triggering a circuit breaker). This state is only used with apiVersion "full". - `pendingUserCommitment`: Ready to receive your user commitments. This state is only used with apiVersion "lite" and EdDSA assets with commitment signing states. - `pendingUserGShare`: Ready to receive your gShare. - `pendingUserRShare`: Ready to receive your rShare. - `pendingUserSignature`: Ready to receive your user signature (get the unsigned transaction from BitGo and sign it). This state is only used with apiVersion "lite" and EdDSA assets without commitment signing states. - `readyToSend`: Ready send (share combination is complete). - `rejected`: Rejected by an approver. - `signed`: All transactions in the transaction request were signed. All future updates will be in the transfer document.'
        - name: walletPermissions
          description: If present, filters transaction requests by wallet permissions. If not present will default to view permissions
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - admin
                - spend
              description: If present, filters transaction requests by wallet permissions. If not present will default to view permissions
        - name: limit
          description: ''
          in: query
          schema:
            type: string
            example: '5'
            format: number
        - name: prevId
          description: ''
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: sortBy
          description: Optional field to sort by.
          in: query
          schema:
            type: string
            enum:
              - id
              - createdDate
        - name: sortDirection
          description: Optional direction of sorting.
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: dateLt
          description: Optional get transaction requests less than date
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: dateGte
          description: Optional get transaction requests greater than or equal to date
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: enterpriseId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionRequestsWithWalletPermissionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/user/{userId}/signingkey:
    get:
      summary: Get enterprise user signing key
      description: Get the signing key for an enterprise user. The signing key is used to sign arbitrary messages, which other enterprise users can verify. The caller of this API must have view permissions on the enterprise.
      operationId: v2.enterprise.user.signingkey.get
      tags:
        - Enterprise
      parameters:
        - name: enterpriseId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: userId
          description: ''
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            pattern: ^([0-9a-f]{32}|me)$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEnterpriseUserSigningKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidEnterpriseId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/webhook/{webhookId}:
    delete:
      summary: Delete enterprise webhook
      description: |-
        Remove a webhook from the enterprise. This will permanently delete the webhook.
        To call this endpoint, you must have the user_manage scope on a short-lived
        access token created either in the web app or programmatically using
        the [Login](/api/user.login) endpoint.
      operationId: v2.enterprise.webhook.delete
      tags:
        - Enterprise Webhooks
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
        - name: webhookId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '204':
          description: No Content
          content:
            application/json: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/webhook/{webhookId}/bankaccount/{bankaccountId}/simulate:
    get:
      summary: Simulate bank account webhook
      description: Simulate a bank account webhook for testing purposes. To call this endpoint, you must have the user_manage scope on a short-lived access token created either in the web app or programmatically using the [Login](/api/user.login) endpoint.
      operationId: v2.enterprise.webhook.bankaccount.simulate
      tags:
        - Enterprise Webhooks
      parameters:
        - name: enterpriseId
          description: ''
          in: path
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/EnterpriseIdString'
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: webhookId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: bankaccountId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateEnterpriseWebhookResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/webhook/{webhookId}/simulate:
    get:
      summary: Simulate enterprise webhook
      description: Simulate a webhook for testing purposes. To call this endpoint, you must have the user_manage scope on a short-lived access token created either in the web app or programmatically using the [Login](/api/user.login) endpoint.
      operationId: v2.enterprise.webhook.simulate
      tags:
        - Enterprise Webhooks
      parameters:
        - name: enterpriseId
          description: ''
          in: path
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/EnterpriseIdString'
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: webhookId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: Simulate Enterprise Webhook Types
                  properties:
                    bankAccountId:
                      type: string
                      example: 59cd72485007a239fb00282ed480da1f
                      pattern: ^[0-9a-f]{32}$
                  required:
                    - bankAccountId
                - type: object
                  properties:
                    accessTokenId:
                      type: string
                      example: 59cd72485007a239fb00282ed480da1f
                      pattern: ^[0-9a-f]{32}$
                  required:
                    - accessTokenId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateEnterpriseWebhookResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/enterprise/{enterpriseId}/webhooks:
    get:
      summary: List enterprise webhooks
      description: List all webhooks for the specified enterprise.
      operationId: v2.enterprise.webhook.list
      tags:
        - Enterprise Webhooks
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum:
              - bankAccount
              - accessToken
              - policyBalanceChange
        - name: prevId
          in: query
          schema:
            type: string
            minLength: 1
        - name: limit
          in: query
          schema:
            type: string
            format: number
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEnterpriseWebhooksResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    post:
      summary: Create enterprise webhook
      description: |-
        Create a webhook that will fire for any bank account associated with the enterprise.
        Must be an organization or enterprise admin to perform this action. To call this
        endpoint, you must have the user_manage scope on a short-lived access token created
        either in the web app or programmatically using the [Login](/api/user.login) endpoint.
      operationId: v2.enterprise.webhook.add
      tags:
        - Enterprise Webhooks
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/EnterpriseWebhookType'
                url:
                  type: string
                  minLength: 1
                label:
                  type: string
              required:
                - type
                - url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/keys:
    get:
      summary: Get keys
      description: |-
        Retrieve user keys using wallet IDs.
        User must have spender permissions for the specified wallets.
      operationId: v2.wallet.key.list
      tags:
        - Keys
      parameters:
        - name: walletIds
          description: An array of wallet IDs. A maximum of 50 wallet ids are permitted.
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              example: 59cd72485007a239fb00282ed480da1f
              minLength: 1
              pattern: ^[0-9a-f]{32}$
              description: An array of wallet IDs. A maximum of 50 wallet ids are permitted.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/organization/{organizationId}/enterprise:
    get:
      summary: List enterprises for an organization
      description: List all enterprises in the specified organization.
      operationId: v2.organization.enterprise.list
      tags:
        - Enterprise Management
      parameters:
        - name: idempotencyKey
          description: A unique identifier used when creating the enterprise. Adding this query parameter will return the enterprise created with the given idempotency key.
          in: query
          schema:
            type: string
            title: uuid
        - name: limit
          description: Maximum number of results to return. If the result set is truncated, use the "nextBatchPrevId" value to get the next batch.
          in: query
          schema:
            type: string
            default: '25'
            minimum: 1
            maximum: 500
            format: number
        - name: prevId
          description: Return the next batch of results, based on the "nextBatchPrevId" value from the previous batch.
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterprisesPaginatedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    post:
      summary: Create an enterprise for an organization
      description: Create an enterprise in the specified organization. Also create a user if it doesn't already exist.
      operationId: v2.organization.enterprise.create
      tags:
        - Enterprise Management
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                idempotencyKey:
                  type: string
                  description: A unique identifier for the enterprise creation request. Multiple enterprises with the same organizationId and idempotencyKey will not be created.
                  title: uuid
                additionalAdmins:
                  type: array
                  items:
                    type: string
                    minLength: 1
                    example: 59cd72485007a239fb00282ed480da1f
                accountType:
                  type: string
                  enum:
                    - individual
                    - entity
                  description: The account type for the enterprise. Defaults to 'individual' if not specified. Only available when feature flag 'wp_kyb_enable-account-type-entity' is enabled.
                thirdPartyIdentifier:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Identifier of the third party
                        minLength: 1
                      label:
                        type: string
                        description: Label for the third party
                        minLength: 1
                    required:
                      - id
                      - label
              required:
                - email
                - idempotencyKey
                - additionalAdmins
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationEnterpriseResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/organization/{organizationId}/enterprise/{enterpriseId}/user:
    post:
      summary: Add a user to an enterprise within an organization
      description: Add an existing user to an enterprise under the specified organization.
      operationId: v2.organization.enterprise.user.add
      tags:
        - Enterprise Management
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
        - name: enterpriseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EnterpriseIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                permissions:
                  type: array
                  items:
                    type: string
                    enum:
                      - admin
                      - auditor
                    description: 'This type represents the permissions that can be assigned to a user when adding them to an enterprise 1. ''admin'': Add/remove users, Create wallets, Manage enterprise policies, Add Bank Accounts, Receive invitations to wallets 2. ''auditor'': View audit logs across the enterprise, Receive invitations to wallets'
              required:
                - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUserToOrganizationEnterpriseResponseC'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/organization/{organizationId}/reports:
    get:
      summary: List org-level reports
      description: Lists generated reports.
      operationId: v2.organization.reports.list
      tags:
        - Reports
      parameters:
        - name: limit
          description: Number of reports to return
          in: query
          schema:
            type: string
            default: '25'
            maximum: 500
            format: number
        - name: createdAtGt
          description: Only return reports created after this date
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: enterprise
          description: Only return reports that includes this enterprise
          in: query
          schema:
            type: string
            minLength: 1
        - name: wallet
          description: Only return reports for this wallet
          in: query
          schema:
            type: string
            minLength: 1
        - name: walletType
          description: Only return reports for this wallet type
          in: query
          schema:
            type: string
            minLength: 1
        - name: reportType
          description: Only return reports for this report type
          in: query
          schema:
            type: string
            enum:
              - holdings
              - transactions
              - quarterly
              - trades
              - staking
              - holdingsByAddress
              - organizationHoldings
              - organizationHoldingsByAddress
              - organizationTransactions
              - organizationTrades
              - organizationStaking
        - name: status
          description: Only return rports for this report status
          in: query
          schema:
            type: string
            enum:
              - pending
              - processing
              - completed
              - failed
        - name: prevId
          description: Only return reports created after this ID
          in: query
          schema:
            type: string
            minLength: 1
        - name: format
          description: Only return reports for this report format
          in: query
          schema:
            type: string
            enum:
              - csv
              - pdf
        - name: asset
          description: Only return reports for this report asset
          in: query
          schema:
            type: string
            minLength: 1
        - name: reportParams
          description: Only return reports for this report asset
          in: query
          schema: {}
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReportsJSON'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    post:
      summary: Generate org-level report
      description: Creates a new report in pending status.
      operationId: v2.organization.reports.create
      tags:
        - Reports
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/SnowflakeReportType'
                format:
                  $ref: '#/components/schemas/ReportFormatType'
                holdings:
                  type: object
                  description: Holdings report
                  properties:
                    byWallet:
                      type: boolean
                    enterprise:
                      type: string
                      description: ID of the enterprise
                      example: 59cd72485007a239fb00282ed480da1f
                      minLength: 1
                      pattern: ^[0-9a-f]{32}$
                    includeStaking:
                      type: boolean
                    snapshotDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                  required:
                    - enterprise
                    - snapshotDate
                transactions:
                  type: object
                  description: Transactions report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    isAddressReport:
                      type: boolean
                    isDetailed:
                      type: boolean
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - enterprise
                    - startDate
                quarterly:
                  type: object
                  description: Quarterly report
                  properties:
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                  required:
                    - endDate
                    - enterprise
                    - startDate
                trades:
                  type: object
                  description: Trades report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    isFillsReport:
                      type: boolean
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                  required:
                    - endDate
                    - enterprise
                    - startDate
                staking:
                  type: object
                  description: Staking report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    isBalanceReport:
                      type: boolean
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - enterprise
                    - startDate
                holdingsByAddress:
                  type: object
                  description: Address-level Holdings report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    enterprise:
                      type: string
                      minLength: 1
                    snapshotDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - enterprise
                    - snapshotDate
                organizationHoldings:
                  type: object
                  description: Organization-level Holdings report
                  properties:
                    byWallet:
                      type: boolean
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    includeStaking:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    snapshotDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                  required:
                    - organization
                    - snapshotDate
                organizationTransactions:
                  type: object
                  description: Organization-level Transactions report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    isAddressReport:
                      type: boolean
                    isDetailed:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    startDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - organization
                    - startDate
                organizationHoldingsByAddress:
                  type: object
                  description: Organization-level Holdings by Address report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    organization:
                      type: string
                      minLength: 1
                    snapshotDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - organization
                    - snapshotDate
                organizationStaking:
                  type: object
                  description: Organization-level Staking report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    isBalanceReport:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    startDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - organization
                    - startDate
                organizationTrades:
                  type: object
                  description: Organization-level Trades report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    isFillsReport:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    startDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                  required:
                    - endDate
                    - organization
                    - startDate
              required:
                - type
                - format
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportJSON'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/organization/{organizationId}/user:
    delete:
      summary: Remove a user from an organization
      description: Remove a user from an organization. Must be an organization manager to perform this action.
      operationId: v2.organization.user.remove
      tags:
        - User Management
      parameters:
        - name: userId
          description: ''
          in: query
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidOrganizationId'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    post:
      summary: Add a user to an organization
      description: |-
        Add a user in the organization with a specified role.
        Must be an organization manager to perform this action.
      operationId: v2.organization.user.create
      tags:
        - User Management
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user@email.com
                  format: email
                role:
                  type: string
                  enum:
                    - admin
                    - member
                  description: Role of the user in the organization
                  example: admin
              required:
                - username
                - role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidOrganizationId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    put:
      summary: Update users role in organization
      description: Modify a users role in the organization. Must be an organization manager to perform this action.
      operationId: v2.organization.user.update
      tags:
        - User Management
      parameters:
        - name: userId
          description: ''
          in: query
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: role
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationRole'
        - name: organizationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApproval'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidOrganizationId'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/organization/{organizationId}/webhook:
    get:
      summary: List webhooks for an organization
      description: List all webhooks for the specified organization.
      operationId: v2.organization.webhook.list
      tags:
        - Organization Webhooks
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum:
              - txRequest
              - txRequestTransaction
              - transfer
              - transaction
              - transactionRemoved
              - transactionExpire
              - pendingapproval
              - block
              - admin
              - address_confirmation
              - lowFee
              - circuitBreaker
              - lowFeeAddressBalance
              - wallet_confirmation
              - bankAccount
              - userKycState
              - enterpriseKycState
              - identityStatus
              - accessToken
              - accountCreated
              - contractSigned
              - fundsDeposited
              - kycResult
              - policyBalanceChange
              - transaction_finality_on_l1
        - name: prevId
          in: query
          schema:
            type: string
            minLength: 1
        - name: limit
          in: query
          schema:
            type: string
            format: number
        - name: organizationId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationWebhookResponseC'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    post:
      summary: Create a webhook for multiple assets
      description: |-
        Create a webhook that will fire for any transfer across the organization. Must be
        an organization manager to perform this action. To call this endpoint, you must
        have the user_manage scope on a short-lived access token created either in the
        web app or programmatically using the [Login](/api/user.login) endpoint.
      operationId: v2.organization.webhook.add
      tags:
        - Organization Webhooks
      parameters:
        - name: organizationId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: AddOrgnizationTransferWebhookBody
                  properties:
                    allToken:
                      type: boolean
                    coin:
                      type: string
                    includeRbf:
                      type: boolean
                    label:
                      type: string
                    listenToFailureStates:
                      type: boolean
                    numConfirmations:
                      type: number
                    type:
                      type: string
                      enum:
                        - transfer
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
                - type: object
                  title: AddOrganizationTxRequestWebhookBody
                  properties:
                    label:
                      type: string
                    txRequestStates:
                      type: array
                      items:
                        type: string
                        enum:
                          - pendingApproval
                          - canceled
                          - rejected
                          - initialized
                          - pendingDelivery
                          - delivered
                          - pendingUserSignature
                          - pendingUserCommitment
                          - pendingUserRShare
                          - pendingUserGShare
                          - readyToSend
                          - signed
                          - failed
                        description: If supplied, only transaction request state changes from the provided list will trigger notifications. If not provided, all transaction request state changes will trigger notifications.
                    type:
                      type: string
                      enum:
                        - txRequest
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
                - type: object
                  title: AddOrganizationTxRequestTransactionWebhookBody
                  properties:
                    label:
                      type: string
                    txRequestTransactionStates:
                      type: array
                      items:
                        type: string
                        enum:
                          - initialized
                          - pendingSignature
                          - eddsaPendingCommitment
                          - eddsaPendingRShare
                          - eddsaPendingGShare
                          - ecdsaMPCv2Round1
                          - ecdsaMPCv2Round2
                          - ecdsaMPCv2Round3
                          - readyToCombineShares
                          - signed
                          - held
                          - delivered
                          - invalidSignature
                          - rejected
                        description: If supplied, only transaction request transaction state changes from the provided list will trigger notifications. If not provided, all transaction request transaction state changes will trigger notifications.
                    type:
                      type: string
                      enum:
                        - txRequestTransaction
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
                - type: object
                  title: AddOrganizationPendingApprovalWebhookBody
                  properties:
                    allToken:
                      type: boolean
                    coin:
                      type: string
                    label:
                      type: string
                    type:
                      type: string
                      enum:
                        - pendingapproval
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
                - type: object
                  title: AddOrganizationBankAccountWebhookBody
                  properties:
                    label:
                      type: string
                    type:
                      type: string
                      enum:
                        - bankAccount
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
                - type: object
                  title: AddOrganizationIdentityStatusWebhookBody
                  properties:
                    label:
                      type: string
                    status:
                      type: array
                      items:
                        type: string
                        enum:
                          - created
                          - approved
                          - declined
                          - needs review
                          - input error
                          - ssn error
                          - gov id error
                          - ssn verified
                          - gov id verified
                          - enrichment
                          - awaiting document upload
                          - records uploaded
                          - in review
                          - incomplete verifications
                          - records uploaded 2
                          - awaiting signature
                          - signature submitted
                          - initiating
                          - additional information submitted
                    type:
                      type: string
                      enum:
                        - identityStatus
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
                - type: object
                  title: AddOrganizationUserKycStateWebhookBody
                  properties:
                    kycState:
                      type: array
                      items:
                        type: string
                        enum:
                          - approved
                          - rejected
                          - pending
                    label:
                      type: string
                    type:
                      type: string
                      enum:
                        - userKycState
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
                - type: object
                  title: AddOrganizationEnterpriseKycStateWebhookBody
                  properties:
                    kycState:
                      type: array
                      items:
                        type: string
                        enum:
                          - approved
                          - rejected
                          - pending
                    label:
                      type: string
                    type:
                      type: string
                      enum:
                        - enterpriseKycState
                    url:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/organization/{organizationId}/webhook/{webhookId}:
    delete:
      summary: Delete an organization webhook by id
      description: |-
        Remove a webhook from the organization. This will permanently delete the webhook.
        To call this endpoint, you must have the user_manage scope on a short-lived access
        token created either in the web app or programmatically using the
        [Login](/api/user.login) endpoint.
      operationId: v2.organization.webhook.delete
      tags:
        - Organization Webhooks
      parameters:
        - name: organizationId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: webhookId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '204':
          description: No Content
          content:
            application/json: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    get:
      summary: Get webhook by id
      description: Get an organization webhook by its id.
      operationId: v2.organization.webhook.get
      tags:
        - Organization Webhooks
      parameters:
        - name: organizationId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: webhookId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/organization/{organizationId}/webhook/{webhookId}/simulate:
    post:
      summary: Simulate a webhook
      description: |-
        Simulate a webhook for testing purposes. To call this endpoint, you must have
        the user_manage scope on a short-lived access token created either in the web
        app or programmatically using the [Login](/api/user.login) endpoint.
      operationId: v2.organization.webhook.simulate
      tags:
        - Organization Webhooks
      parameters:
        - name: organizationId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: webhookId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: Simulate Organization Webhook Types
                  properties:
                    transferId:
                      type: string
                      example: 59cd72485007a239fb00282ed480da1f
                      pattern: ^[0-9a-f]{32}$
                  required:
                    - transferId
                - type: object
                  properties:
                    txRequestId:
                      $ref: '#/components/schemas/TransactionRequestId'
                  required:
                    - txRequestId
                - type: object
                  properties:
                    pendingApprovalId:
                      type: string
                      example: 59cd72485007a239fb00282ed480da1f
                      pattern: ^[0-9a-f]{32}$
                  required:
                    - pendingApprovalId
                - type: object
                  properties:
                    bankAccountId:
                      type: string
                  required:
                    - bankAccountId
                - type: object
                  properties:
                    enterpriseId:
                      type: string
                      example: 59cd72485007a239fb00282ed480da1f
                      pattern: ^[0-9a-f]{32}$
                    kycState:
                      $ref: '#/components/schemas/VerifiedKycState1'
                  required:
                    - enterpriseId
                    - kycState
                - type: object
                  properties:
                    kycState:
                      $ref: '#/components/schemas/VerifiedKycState1'
                    userId:
                      type: string
                      example: 59cd72485007a239fb00282ed480da1f
                      pattern: ^[0-9a-f]{32}$
                  required:
                    - kycState
                    - userId
                - type: object
                  properties:
                    identityId:
                      type: string
                      format: UUID
                    identityStatus:
                      $ref: '#/components/schemas/IdentityStatusEnum'
                  required:
                    - identityId
                    - identityStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateOrganizationWebhookResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/pendingapprovals/bulkupdate:
    put:
      summary: Bulk update non-withdrawal pending approvals
      operationId: v2.pendingapprovals.bulkUpdate
      tags:
        - Pending approval
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                approvals:
                  type: array
                  items:
                    type: object
                    description: List of approvals to process
                    properties:
                      paId:
                        type: string
                        description: Pending approval ID
                        example: 59cd72485007a239fb00282ed480da1f
                        pattern: ^[0-9a-f]{32}$
                      status:
                        allOf:
                          - $ref: '#/components/schemas/ApprovalAction'
                        description: Approval action status
                    required:
                      - paId
                      - status
                bailOnError:
                  type: boolean
                  default: false
                  description: If true, stops processing on the first error. If false (default), continues processing all items.
              required:
                - approvals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/pendingapprovals/count:
    get:
      summary: List counts of pending approvals
      description: List counts of pending approvals by enterprises that the current user is a part of.
      operationId: v2.pendingapprovals.count.list
      tags:
        - Pending approval
      parameters:
        - name: actionable
          description: True, if returning pending approvals that are actionable by the current user.
          in: query
          schema:
            type: boolean
        - name: byOrganization
          description: True, if returning counts of pending approvals by organizations that the current user is a part of.
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPendingApprovalsCountByEnterpriseResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/reports:
    get:
      summary: List reports
      description: Lists generated reports.
      operationId: v2.reports.list
      tags:
        - Reports
      parameters:
        - name: limit
          description: Number of reports to return
          in: query
          schema:
            type: string
            default: '25'
            maximum: 500
            format: number
        - name: createdAtGt
          description: Only return reports created after this date
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: enterprise
          description: Only return reports for this enterprise
          in: query
          schema:
            type: string
            minLength: 1
        - name: wallet
          description: Only return reports for this wallet
          in: query
          schema:
            type: string
            minLength: 1
        - name: walletType
          description: Only return reports for this wallet type
          in: query
          schema:
            type: string
            minLength: 1
        - name: reportType
          description: Only return reports for this report type
          in: query
          schema:
            type: string
            enum:
              - holdings
              - transactions
              - quarterly
              - trades
              - staking
              - holdingsByAddress
              - organizationHoldings
              - organizationHoldingsByAddress
              - organizationTransactions
              - organizationTrades
              - organizationStaking
        - name: status
          description: Only return rports for this report status
          in: query
          schema:
            type: string
            enum:
              - pending
              - processing
              - completed
              - failed
        - name: prevId
          description: Only return reports created after this ID
          in: query
          schema:
            type: string
            minLength: 1
        - name: format
          description: Only return reports for this report format
          in: query
          schema:
            type: string
            enum:
              - csv
              - pdf
        - name: asset
          description: Only return reports for this report asset
          in: query
          schema:
            type: string
            minLength: 1
        - name: reportParams
          description: Only return reports for this report asset
          in: query
          schema: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReportsJSON'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    post:
      summary: Generate report
      description: Creates a new report in pending status.
      operationId: v2.reports.create
      tags:
        - Reports
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/SnowflakeReportType'
                format:
                  $ref: '#/components/schemas/ReportFormatType'
                holdings:
                  type: object
                  description: Holdings report
                  properties:
                    byWallet:
                      type: boolean
                    enterprise:
                      type: string
                      description: ID of the enterprise
                      example: 59cd72485007a239fb00282ed480da1f
                      minLength: 1
                      pattern: ^[0-9a-f]{32}$
                    includeStaking:
                      type: boolean
                    snapshotDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                  required:
                    - enterprise
                    - snapshotDate
                transactions:
                  type: object
                  description: Transactions report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    isAddressReport:
                      type: boolean
                    isDetailed:
                      type: boolean
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - enterprise
                    - startDate
                quarterly:
                  type: object
                  description: Quarterly report
                  properties:
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                  required:
                    - endDate
                    - enterprise
                    - startDate
                trades:
                  type: object
                  description: Trades report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    isFillsReport:
                      type: boolean
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                  required:
                    - endDate
                    - enterprise
                    - startDate
                staking:
                  type: object
                  description: Staking report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    enterprise:
                      $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
                    isBalanceReport:
                      type: boolean
                    startDate:
                      type: string
                      description: Date of the snapshot
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - enterprise
                    - startDate
                holdingsByAddress:
                  type: object
                  description: Address-level Holdings report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    enterprise:
                      type: string
                      minLength: 1
                    snapshotDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - enterprise
                    - snapshotDate
                organizationHoldings:
                  type: object
                  description: Organization-level Holdings report
                  properties:
                    byWallet:
                      type: boolean
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    includeStaking:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    snapshotDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                  required:
                    - organization
                    - snapshotDate
                organizationTransactions:
                  type: object
                  description: Organization-level Transactions report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    isAddressReport:
                      type: boolean
                    isDetailed:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    startDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - organization
                    - startDate
                organizationHoldingsByAddress:
                  type: object
                  description: Organization-level Holdings by Address report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    organization:
                      type: string
                      minLength: 1
                    snapshotDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - organization
                    - snapshotDate
                organizationStaking:
                  type: object
                  description: Organization-level Staking report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    isBalanceReport:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    startDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    wallets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                        example: 59cd72485007a239fb00282ed480da1f
                    walletTypes:
                      type: array
                      items:
                        type: string
                        minLength: 1
                  required:
                    - endDate
                    - organization
                    - startDate
                organizationTrades:
                  type: object
                  description: Organization-level Trades report
                  properties:
                    assets:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    endDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                    enterprises:
                      type: array
                      items:
                        type: string
                        minLength: 1
                    isFillsReport:
                      type: boolean
                    organization:
                      type: string
                      minLength: 1
                    startDate:
                      type: string
                      format: date-time
                      title: ISO Date String
                  required:
                    - endDate
                    - organization
                    - startDate
              required:
                - type
                - format
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportJSON'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/reports/{reportId}:
    get:
      summary: Get report
      description: Returns a single report by report ID.
      operationId: v2.reports.getById
      tags:
        - Reports
      parameters:
        - name: reportId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportJSON'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/reports/{reportId}/document:
    get:
      summary: Download report
      description: Returns binary data encoded based on report format (pdf/csv).
      operationId: v2.reports.download
      tags:
        - Reports
      parameters:
        - name: reportId
          description: ''
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/tss/settings:
    get:
      summary: Get MPC settings.
      description: Get the MPC settings for the user.
      operationId: v2.tss.setting
      tags:
        - Transaction request
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TssSettings'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/tssconfigs/ecdsa:
    delete:
      summary: Delete ECDSA MPC configurations
      description: Deletes the ECDSA MPC configurations from all enterprises the user is an admin of.
      operationId: v2.tssconfigs.ecdsa.delete
      tags:
        - Transaction request
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                createdBy:
                  type: string
                  description: The user who created the configurations
                  minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedCount:
                    type: number
                    description: The number of deleted configurations
                required:
                  - deletedCount
    get:
      summary: List ECDSA MPC configurations per enterprise
      description: List all ECDSA MPC configurations from all enterprises for a user. Returns an empty array if the user's enterprise doesn't have any ECDSA MPC configurations.
      operationId: v2.tssconfigs.ecdsa.get
      tags:
        - Transaction request
      parameters:
        - name: createdBy
          description: Filter by the user who created the config. Pass in "me" to filter by the current user's id.
          in: query
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    enterpriseId:
                      type: string
                      description: The enterprise ID
                      example: 5d1a61a5c30ae10025f9b2b3
                    ecdsa:
                      $ref: '#/components/schemas/EcdsaConfig'
                  required:
                    - enterpriseId
                    - ecdsa
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/user/freeze:
    post:
      summary: Freeze User
      description: |-
        Route for users to freeze their account. Requires the `user_manage` scope.
        Session must be unlocked using the [unlock](https://developers.bitgo.com/api/user.unlock) endpoint, prior to hitting this route.
        In the UI, call to this route is followed by a call to [logout](https://developers.bitgo.com/api/user.logout) endpoint.
      operationId: v2.user.freeze
      tags:
        - User
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/user/login:
    post:
      summary: Login
      description: Creates a short-lived (1 hour) access token for use with the API. BitGo doesn't recommend using this endpoint for scripting. Instead, use the SDK or the web UI to create long-lived access tokens. However, short-lived access tokens are the only access tokens with the "user_manage" scope that enables you to programmatically add users to your enterprise using the [Add User to Enterprise](/api/v2.enterprise.user.add) endpoint.
      operationId: v2.user.login
      tags:
        - User
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the user.
                  example: user@email.com
                  format: email
                extensible:
                  type: boolean
                  description: '"true" if the session is extensible beyond a one-hour duration'
                  example: false
                otp:
                  type: string
                  description: Second factor authentication token.
                  example: '123456'
                password:
                  type: string
                  example: secret
              required:
                - email
                - otp
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/user/logout:
    get:
      summary: Logout
      description: Disables an access token
      operationId: user.logout
      tags:
        - User
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/user/recoverycodes/{recoveryCodeSetId}:
    get:
      summary: Get Recovery Codes
      description: |-
        Get the recovery codes for the given recovery code set ID. Requires the `user_manage` scope.
        Session must be unlocked using the [unlock](https://developers.bitgo.com/api/user.unlock)
        endpoint, prior to hitting this route.
      operationId: v2.user.recoveryCodes.getById
      tags:
        - User
      parameters:
        - name: recoveryCodeSetId
          description: The ID of the recovery code set
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoveryCodesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/user/validatepasswordresettoken:
    get:
      summary: Validate Password Reset Token
      description: Route to validate a user's password reset token.
      operationId: v2.user.validatepasswordresettoken
      tags:
        - User
      parameters:
        - name: token
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}:
    get:
      summary: Get wallet by ID
      description: Get one wallet by its 'walletId'. One 'walletId' can map to multiple receive addresses.
      operationId: v2.wallet.getbyid
      tags:
        - Wallet
      parameters:
        - name: allTokens
          description: Include data for all subtokens (i.e. ERC20 Tokens, Stellar Tokens)
          in: query
          schema:
            type: boolean
        - name: unspentCount
          description: True, if including unspent count for UTXO-based coins.
          in: query
          schema:
            type: boolean
        - name: includeRbf
          description: True, if including Replace-By-Fee (RBF) transactions in the total balance amount.
          in: query
          schema:
            type: boolean
        - name: expandAdvancedWhitelist
          description: True, if including the advanced whitelist wallet address in the response. The address is annotated as part of the whitelist entry metadata
          in: query
          schema:
            type: boolean
        - name: includeStakingBalances
          description: Includes the staked balance and reward balance of the wallet
          in: query
          schema:
            type: boolean
        - name: includeBalance
          description: Omit trying to fetch the wallet balance
          in: query
          schema:
            type: boolean
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/liability-proofs:
    get:
      summary: Get liability proofs
      description: Get liability proofs for a Go Account. Liability proofs are zero-knowledge proofs (ZKPs) that you can use with BitGo's open-source verification tool to verify that assets held in a specific Go Account are part of the total liabilities published by BitGo. To learn more about the verification tool, see https://github.com/BitGo/proof-of-solvency.
      operationId: v2.wallet.proofs.liability.get
      tags:
        - Liabilities
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVerificationElements'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/lightning/invoice:
    get:
      summary: Fetch lightning invoices
      description: |-
        This API call is used to fetch current lightning invoices which are
        used for requesting and receiving payments over the lightning network.
      operationId: v2.wallet.lightning.invoice.list1
      tags:
        - Lightning
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum:
              - open
              - settled
              - canceled
        - name: limit
          in: query
          schema:
            type: string
            format: number
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: prevId
          in: query
          schema:
            type: string
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInvoicesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidWalletId1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
    post:
      summary: Create a lightning invoice
      description: |-
        This API call is used to create a new lightning invoice which can be
        used for requesting and receiving payments over the lightning network.
      operationId: v2.wallet.lightning.invoice.create
      tags:
        - Lightning
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                valueMsat:
                  type: string
                  description: The value of the invoice in millisatoshis
                  example: '50000000'
                  format: number
                memo:
                  type: string
                  description: Optional memo or description for the invoice
                  example: Payment for services
                expiry:
                  type: number
                  description: Optional expiry time in seconds
                  example: 3600
              required:
                - valueMsat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LightningInvoice'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidWalletId1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/lightning/invoice/{paymentHash}:
    get:
      summary: Fetch lightning invoice for a payment hash
      description: |-
        This API call is used to fetch lightning invoice for a given payment hash.
        Payment hash is a unique identifier for a lightning invoice.
      operationId: v2.wallet.lightning.invoice.get
      tags:
        - Lightning
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: paymentHash
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LightningInvoice'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
                  - $ref: '#/components/schemas/InvalidPaymentHash'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidWalletId1'
                  - $ref: '#/components/schemas/InvalidPaymentHash'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/lightning/payment:
    get:
      summary: Fetch lightning payments
      description: This API call is used to fetch current lightning payments over the lightning network.
      operationId: v2.wallet.lightning.payment.list
      tags:
        - Lightning
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum:
              - in_flight
              - settled
              - failed
        - name: limit
          in: query
          schema:
            type: string
            format: number
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: paymentHash
          in: query
          schema:
            type: string
        - name: prevId
          in: query
          schema:
            type: string
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidWalletId1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/lightning/payment/{paymentId}:
    get:
      summary: Fetch lightning payment for a payment id
      description: This API call is used to fetch lightning payment for a given payment id.
      operationId: v2.wallet.lightning.payment.get
      tags:
        - Lightning
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
                  - $ref: '#/components/schemas/InvalidPaymentId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidWalletId1'
                  - $ref: '#/components/schemas/InvalidPaymentId'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/lightning/transaction:
    get:
      summary: Fetch lightning onchain transactions
      description: This API call is used to fetch current lightning onchain transactions.
      operationId: v2.wallet.lightning.transaction.list
      tags:
        - Lightning
      parameters:
        - name: blockHeight
          in: query
          schema:
            type: string
            format: number
        - name: limit
          in: query
          schema:
            type: string
            format: number
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
            title: ISO Date String
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Transaction details
                  properties:
                    id:
                      type: string
                    normalizedTxHash:
                      type: string
                    blockHeight:
                      type: number
                    inputIds: {}
                    entries: {}
                    inputs: {}
                    outputs: {}
                    size:
                      type: number
                    date:
                      type: string
                      format: date-time
                      title: ISO Date String
                    fee:
                      type: number
                    feeString:
                      type: string
                    hex:
                      type: string
                    confirmations:
                      type: number
                    blockHash:
                      type: string
                    blockPosition:
                      type: number
                    label:
                      type: string
                  required:
                    - id
                    - normalizedTxHash
                    - blockHeight
                    - inputIds
                    - entries
                    - inputs
                    - outputs
                    - size
                    - date
                    - fee
                    - feeString
                    - hex
                    - confirmations
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidWalletId1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/lightning/transaction/{txid}:
    get:
      summary: Fetch lightning onchain transaction for a txid
      description: This API call is used to fetch lightning onchain transaction for a given txid.
      operationId: v2.wallet.lightning.transaction.get
      tags:
        - Lightning
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: txid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformError'
                  - $ref: '#/components/schemas/InvalidWalletId1'
                  - $ref: '#/components/schemas/InvalidTxId'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidWalletId1'
                  - $ref: '#/components/schemas/InvalidTxId'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/msgrequests:
    post:
      summary: Create message-based transaction request
      description: Create a transaction request for signing a message with the wallet keys.
      operationId: v2.wallet.msgrequests.create
      tags:
        - Wallet
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                intent:
                  $ref: '#/components/schemas/MessageIntent'
                apiVersion:
                  $ref: '#/components/schemas/TransactionRequestApiVersion'
                preview:
                  type: boolean
                idempotencyKey:
                  type: string
              required:
                - intent
                - apiVersion
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRequest1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/pin:
    put:
      summary: Pin or unpin a wallet
      description: Pins or unpins a wallet and returns updated pinned wallets for the current user's enterprise.
      operationId: v2.wallet.pin
      tags:
        - Wallet
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isPinned:
                  type: boolean
              required:
                - isPinned
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePinnedWalletsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/tss/updatereadiness:
    get:
      summary: Check if a GG18 Wallet is ready to update to DKLS.
      operationId: v2.wallet.mpcv2migrationstatus
      tags:
        - Wallet
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletMPCv2MigrationStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/{txRequestId}:
    put:
      summary: Update Transaction Request For Wallet
      description: Route to update transaction request for wallet
      operationId: v2.wallet.txrequest.update
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
        - name: txRequestId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TransactionRequestId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  enum:
                    - canceled
                  description: For transaction request full, the current state must be "pendingApproval" or "pendingDelivery". For transaction request lite, the current state must be "pendingApproval", "pendingUserCommitment", "pendingUserGShare", "pendingUserRShare", or "pendingUserSignature".
                cancellationReason:
                  type: string
                  description: The reason for the cancellation
              required:
                - state
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRequest1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/{txRequestId}/{resource}/{resourceIndex}/send:
    post:
      summary: Send a transaction request.
      description: For MPC wallets - Combine all signature shares and submit the signed transaction for broadcast.
      operationId: v2.wallet.txrequest.send
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: txRequestId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TransactionRequestIdNonEmptyString'
        - name: resource
          in: path
          required: true
          schema:
            type: string
            enum:
              - messages
              - transactions
        - name: resourceIndex
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRequest1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/{txRequestId}/{resource}/{resourceIndex}/sign:
    post:
      summary: Sign transaction request
      description: Request BitGo to co-sign a resource (message or transaction) in a transaction request.
      operationId: v2.wallet.txrequest.sign
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: txRequestId
          description: The transaction request ID
          in: path
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/TransactionRequestIdNonEmptyString'
        - name: resource
          description: The resource type (messages or transactions)
          in: path
          required: true
          schema:
            type: string
            enum:
              - messages
              - transactions
        - name: resourceIndex
          description: The index of the resource
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    signatureShares:
                      type: array
                      items:
                        type: object
                        properties:
                          from:
                            allOf:
                              - $ref: '#/components/schemas/SignatureShareType'
                            description: The source of the signature share.
                          share:
                            type: string
                            description: The signature share
                          to:
                            allOf:
                              - $ref: '#/components/schemas/SignatureShareType'
                            description: The recipient of the signature share.
                        required:
                          - from
                          - share
                          - to
                        description: The array of signature shares without VSS proof
                    signerGpgPublicKey:
                      type: string
                      description: The GPG public key of the signer
                      minLength: 1
                    type:
                      type: string
                      enum:
                        - ecdsaMpcV2
                      description: The type of the request body
                  required:
                    - signatureShares
                    - signerGpgPublicKey
                    - type
                - type: object
                  properties:
                    signatureShares:
                      type: array
                      items:
                        type: object
                        properties:
                          from:
                            allOf:
                              - $ref: '#/components/schemas/SignatureShareType'
                            description: The source of the signature share.
                          share:
                            type: string
                            description: The signature share
                          to:
                            allOf:
                              - $ref: '#/components/schemas/SignatureShareType'
                            description: The recipient of the signature share.
                        required:
                          - from
                          - share
                          - to
                        description: The array of signature shares without VSS proof
                    signerShare:
                      type: string
                      description: The share of the signer
                    type:
                      type: string
                      enum:
                        - eddsaMpcV1
                      description: The type of the request body
                  required:
                    - signatureShares
                    - type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRequest1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/{txRequestId}/commit:
    post:
      summary: Exchange commitments for EdDSA transactions (lite)
      description: |-
        Exchange commitments for signing EdDSA transactions. This route is only valid
        for transaction request lite. You must call this endpoint before calling
        [Create a signature share for the transaction request](/api/v2.wallet.txrequest.signatureshare.create).
      operationId: v2.wallet.txrequest.commitment.exchange
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: txRequestId
          description: The ID of the transaction request
          in: path
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/TransactionRequestIdNonEmptyString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commitmentShare:
                  allOf:
                    - $ref: '#/components/schemas/CommitmentShare1'
                  description: The user or backup to the commitment share.
                encryptedSignerShare:
                  allOf:
                    - $ref: '#/components/schemas/EncryptedShare'
                  description: The encrypted signer share.
              required:
                - commitmentShare
                - encryptedSignerShare
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeEddsaCommitmentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/{txRequestId}/messages/{messageIdx}/challenge:
    post:
      summary: Create ECDSA MPC challenge for message
      description: |-
        Create the challenge required for signing ECDSA transactions. You must call this
        endpoint before calling [Create a signature share for the transaction request](/api/v2.wallet.txrequest.signatureshare.create).
      operationId: v2.wallet.txrequest.message.challenge.create
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: txRequestId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TransactionRequestIdNonEmptyString'
        - name: messageIdx
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paillierModulus:
                  type: string
                  description: The 'n' value from an ECDSA wallets paillier public key. Retrieved from xShare.n.
                  minLength: 1
              required:
                - paillierModulus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBitgoChallengeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/{txRequestId}/transactions/{transactionIdx}/challenge:
    post:
      summary: Create ECDSA MPC challenge for transaction
      description: |-
        Create the challenge required for signing ECDSA transactions. You must call this
        endpoint before calling [Create a signature share for the transaction request](/api/v2.wallet.txrequest.signatureshare.create).
      operationId: v2.wallet.txrequest.transaction.challenge.create
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: txRequestId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TransactionRequestIdNonEmptyString'
        - name: transactionIdx
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paillierModulus:
                  type: string
                  description: The 'n' value from an ECDSA wallets paillier public key. Retrieved from xShare.n.
                  minLength: 1
              required:
                - paillierModulus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBitgoChallengeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/{txRequestId}/transactions/{transactionIdx}/commit:
    post:
      summary: Exchange commitments for EdDSA transactions (full)
      description: |-
        Exchange commitments for signing EdDSA transactions. This route is only valid for
        transaction request full. You must call this endpoint before calling [Create a signature share for the transaction request](/api/v2.wallet.txrequest.signatureshare.create).
      operationId: v2.wallet.txrequest.transaction.commitment.exchange
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: txRequestId
          description: The ID of the transaction request
          in: path
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/TransactionRequestIdNonEmptyString'
        - name: transactionIdx
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commitmentShare:
                  allOf:
                    - $ref: '#/components/schemas/CommitmentShare1'
                  description: The user or backup to the commitment share.
                encryptedSignerShare:
                  allOf:
                    - $ref: '#/components/schemas/EncryptedShare'
                  description: The encrypted signer share.
              required:
                - commitmentShare
                - encryptedSignerShare
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeEddsaCommitmentsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/awaitingsignature:
    get:
      summary: Get transaction requests ready for signature
      operationId: v2.wallet.txrequest.awaitingsignature.list
      tags:
        - Transaction request
      parameters:
        - name: limit
          description: Maximum number of results to return. If the result set is truncated, use the "nextBatchPrevId" value to get the next batch.
          in: query
          schema:
            oneOf:
              - type: string
              - type: string
                format: number
            default: '25'
            minimum: 1
            maximum: 500
        - name: txRequestIds
          description: If provided, only the specified transaction requests will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
              description: If provided, only the specified transaction requests will be returned.
        - name: walletPermissions
          description: If provided, the result will be filtered by the users wallet permissions.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - admin
                - spend
              description: If provided, the result will be filtered by the users wallet permissions.
        - name: signingStage
          description: If provided, only transaction requests in a particular signing stage will be returned.
          in: query
          schema:
            type: string
            enum:
              - 1-eddsa
              - 2-eddsa
              - 3-eddsa
              - 4-eddsa
              - 1-ecdsa
              - 2-ecdsa
              - 3-ecdsa
              - 1-ecdsa-mpcv2
              - 2-ecdsa-mpcv2
              - 3-ecdsa-mpcv2
              - 4-ecdsa-mpcv2
        - name: prevId
          description: Return the next batch of results, based on the "nextBatchPrevId" value from the previous batch.
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: sortBy
          description: Sorts by specified field, default sorting by id.
          in: query
          required: true
          schema:
            nullable: true
            type: string
            enum:
              - id
              - createdDate
        - name: sortDirection
          description: Sorts order by field in specified sort direction, default ascending.
          in: query
          required: true
          schema:
            nullable: true
            type: string
            enum:
              - ASC
              - DESC
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTxRequestAwaitingSignatureForWalletResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/txrequests/rebuild:
    post:
      summary: Rebuild transaction requests
      description: Rebuild multiple transaction requests for a wallet. This is for convenience. The txRequests rebuild in sequential order based on creation date.
      operationId: v2.wallet.txrequests.rebuild
      tags:
        - Transaction request
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdString'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                txRequestIds:
                  type: array
                  items:
                    type: string
                    description: Rebuilds all transaction requests for the given txRequestIds.
              required:
                - txRequestIds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/TransactionRequestLite2'
                    - $ref: '#/components/schemas/TransactionRequestFull'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/wirewithdrawals/{transferId}/confirm:
    put:
      summary: Update wire withdrawal
      description: |-
        Approve or reject a pending wire withdrawal. If approving, the `state` updates to `confirmed`, enabling
        BitGo Trust to wire transfer the funds. If rejecting, the `state` updates to `rejected`, canceling
        the pending wire transfer.
      operationId: v2.wallet.wireWithdrawals.confirm
      tags:
        - Transfer
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
        - name: transferId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  allOf:
                    - $ref: '#/components/schemas/WireWithdrawalConfirmationAction'
                  description: The action to take on a wire withdrawal confirmation. "approve" to confirm the withdrawal, "reject" to reject it.
                coin:
                  type: string
                  enum:
                    - tfiatusd
                    - tfiateuro
                    - tfiatgbp
                    - tfiataed
                    - tfiatsgd
                    - fiatusd
                    - fiateuro
                    - fiatgbp
                    - fiataed
                    - fiatsgd
                amount:
                  type: string
                  description: String representation of the amount to send in base units of the currency.
                  example: '2000000'
                  pattern: ^-?\d+$
                address:
                  type: string
                  description: The address to send to.
                  example: 2MvrwRYBAuRtPTiZ5MyKg42Ke55W3fZJfZS
                  maxLength: 250
              required:
                - action
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer1'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/{walletId}/wirewithdrawals/confirm:
    get:
      summary: List account wire withdrawals
      description: List wire withdrawals for a specific Go Account wallet.
      operationId: v2.wallet.wireWithdrawals.get
      tags:
        - Transfer
      parameters:
        - name: state
          description: Filter by wire withdrawal state.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - confirmationPending
                - confirmationApproved
                - confirmationRejected
              description: Filter by wire withdrawal state.
        - name: coin
          description: Filter by supported fiat currency.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - tfiatusd
                - tfiateuro
                - tfiatgbp
                - tfiataed
                - tfiatsgd
                - fiatusd
                - fiateuro
                - fiatgbp
                - fiataed
                - fiatsgd
              description: Filter by supported fiat currency.
        - name: limit
          description: Maximum number of results to return. If the result set is truncated, use the "nextBatchPrevId" value to get the next batch.
          in: query
          schema:
            type: string
            default: '25'
            minimum: 1
            maximum: 500
            format: number
        - name: prevId
          description: Return the next batch of results, based on the "nextBatchPrevId" value from the previous batch.
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
        - name: walletId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WalletIdNonEmptyString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WireWithdrawalsPaginatedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/balances:
    get:
      summary: List total balances
      description: Returns total balances by asset across all wallets in an enterprise.
      operationId: v2.wallet.gettotalbalances
      tags:
        - Wallet
      parameters:
        - name: allTokens
          description: Include balances for all subtokens (i.e. ERC20 Tokens, Stellar Tokens)
          in: query
          schema:
            type: boolean
        - name: coin
          description: Filter by coin
          in: query
          schema:
            oneOf:
              - $ref: '#/components/schemas/CoinNonEmptyString'
              - type: array
                items:
                  type: string
                  description: A cryptocurrency symbol or token ticker symbol
                  example: btc
                  minLength: 1
            example: btc | ['btc', 'eth']
        - name: deleted
          description: Filter by deleted state
          in: query
          schema:
            type: boolean
            default: false
        - name: enterprise
          description: Filter by enterprise ID
          in: query
          schema:
            oneOf:
              - $ref: '#/components/schemas/EnterpriseIdString'
              - type: array
                items:
                  type: string
                  example: 59cd72485007a239fb00282ed480da1f
                  pattern: ^[0-9a-f]{32}$
        - name: excludeEmptyBalances
          description: Exclude tokens with zero balance. When allTokens is passed, then every token supported by BitGo will be included, regardless of balance.
          in: query
          schema:
            type: boolean
            default: false
        - name: excludeSpendableBalances
          description: Skip spendable balance calculations and only include confirmed balances. If absent, defaults to false.
          in: query
          schema:
            type: boolean
            default: false
        - name: expandCustodialWallet
          description: Whether balances of linked custodial wallets should be included
          in: query
          schema:
            type: boolean
            default: false
        - name: id
          description: Filter by wallet ID
          in: query
          schema:
            oneOf:
              - $ref: '#/components/schemas/WalletIdString'
              - type: array
                items:
                  type: string
                  example: 59cd72485007a239fb00282ed480da1f
                  pattern: ^[0-9a-f]{32}$
        - name: includeStakingBalances
          description: Include `stakingBalanceString` and `rewardBalanceString` properties for each staking wallet.
          in: query
          schema:
            type: boolean
            default: false
        - name: labelContains
          description: Filter by label substring
          in: query
          schema:
            type: string
        - name: skipPendingTxs
          description: Do not include pending withdrawals when determining total balances. By default, pending withdrawals will be considered.
          in: query
          schema:
            type: boolean
            default: false
        - name: skipTxCounts
          description: True, if excluding transfer counts when calculating total balances. If absent, defaults to false.
          in: query
          schema:
            type: boolean
            default: false
        - name: type
          description: Filter by wallet type
          in: query
          schema:
            oneOf:
              - $ref: '#/components/schemas/WalletType'
              - type: array
                items:
                  type: string
                  enum:
                    - backing
                    - cold
                    - custodial
                    - custodialPaired
                    - hot
                    - trading
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWalletBalanceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallet/solvency-data:
    get:
      summary: Get proof of solvency data
      description: Get proof of solvency data for Go Accounts. This data consists of the list of supported assets (for proof of solvency), the total liabilities for those assets, BitGo's total reserves for those assets, and the ratio of reserves to liabilities for each asset.
      operationId: v2.wallet.solvency.data.get
      tags:
        - Solvency
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolvencyData'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallets:
    get:
      summary: List wallets
      description: |-
        Lists all wallets you can access when the enterprise ID is provided, including:
        - Wallets you have a role on (admin, spender, or viewer).
        - Wallets in enterprises you belong to that have the `View All Wallets` option enabled
        from the enterprise settings.

        If the enterprise ID is not provided, lists only the wallets you have a role on.
      operationId: v2.wallet.list
      tags:
        - Wallet
      parameters:
        - name: id
          description: Filter by ID
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Filter by ID
              pattern: ^[0-9a-f]{32}$
              example: '"59cd72485007a239fb00282ed480da1f"'
        - name: coin
          description: Filter by coin
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by coin
              example: '"btc"'
        - name: enterprise
          description: Filter by enterprise.
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by enterprise.
              pattern: ^[0-9a-f]{32}$
              example: '"59cd72485007a239fb00282ed480da1f"'
        - name: type
          description: Filter by wallet type
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by wallet type
        - name: subType
          description: Filter by wallet sub-type
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by wallet sub-type
        - name: deleted
          description: Filter by deleted state
          in: query
          schema:
            type: boolean
        - name: prevId
          description: Return the next batch of results, based on the "nextBatchPrevId" value from the previous batch.
          in: query
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
        - name: labelContains
          description: Filter by label substring.
          in: query
          schema:
            type: string
        - name: expandBalance
          description: Add "balanceString", "confirmedBalanceString" and "spendableBalanceString" to each wallet
          in: query
          schema:
            type: boolean
            default: false
        - name: excludeSpendableBalance
          in: query
          schema:
            type: boolean
        - name: expandPolicy
          in: query
          schema:
            type: boolean
        - name: expandCustodialWallet
          description: Whether linked custodial wallets should be expanded inline
          in: query
          schema:
            type: boolean
        - name: ignoreErrors
          in: query
          schema:
            type: boolean
        - name: includeStakingBalances
          description: Include `stakingBalanceString` and `rewardBalanceString` properties for each staking wallet. Requires `expandBalance` to be set to true.
          in: query
          schema:
            type: boolean
            default: false
        - name: limit
          description: Maximum number of results to return. If the result set is truncated, use the "nextBatchPrevId" value to get the next batch.
          in: query
          schema:
            type: string
            default: '25'
            format: number
        - name: offset
          description: Number of documents to skip for offset-based pagination.
          in: query
          schema:
            type: string
            default: '0'
            format: number
        - name: skipReceiveAddress
          description: Do not add "receiveAddress" to each wallet
          in: query
          schema:
            type: boolean
            default: false
        - name: permission
          description: Return only wallets for which the user has the given permission
          in: query
          schema:
            type: string
            enum:
              - admin
              - view
              - spend
        - name: pinnedWallets
          description: Return only pinned wallets ("pinnedOnly") or only unpinned wallets ("pinnedExcluded"), exclude to return both
          in: query
          schema:
            type: string
            enum:
              - pinnedOnly
              - pinnedExcluded
        - name: bitgoOrg
          description: Return only wallets belong to the BitGo trust org
          in: query
          schema:
            type: string
            enum:
              - BitGo Trust
              - BitGo New York
              - BitGo Germany
              - BitGo Switzerland
              - BitGo Europe ApS
              - Frankfurt DE Trust
              - BitGo Singapore
              - BitGo Korea
              - BitGo Custody MENA FZE
              - BitGo India
              - BitGo Sister Trust 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/wallets/count:
    get:
      summary: Get wallets count
      description: |-
        Get a count of all wallets you can access, including:
        - Wallets you have a role on (admin, spender, or viewer).
        - Wallets in enterprises you belong to that have the `View All Wallets` option
        enabled from the enterprise settings.

        You can use this endpoint in conjunction with the <b>List wallets</b> endpoint to
        enable paginating a list of wallets. For example, once you get the wallets count,
        you can use the total count to calculate the number of pages you need in order to
        display all the wallets.
      operationId: v2.wallet.count
      tags:
        - Wallet
      parameters:
        - name: id
          description: Filter by ID.
          in: query
          schema:
            type: array
            items:
              type: string
              minLength: 1
              description: Filter by ID.
              pattern: ^[0-9a-f]{32}$
              example: 59cd72485007a239fb00282ed480da1f
        - name: coin
          description: Filter by coin
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by coin
              example: btc
        - name: enterprise
          description: Filter by enterprise
          in: query
          schema:
            type: array
            items:
              type: string
              description: Filter by enterprise
              pattern: ^[0-9a-f]{32}$
              example: 59cd72485007a239fb00282ed480da1f
        - name: type
          description: Filter by wallet type.
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - backing
                - cold
                - custodial
                - custodialPaired
                - hot
                - trading
              description: Filter by wallet type.
        - name: deleted
          description: Filter by deleted state.
          in: query
          schema:
            type: boolean
        - name: labelContains
          description: Filter by label substring
          in: query
          schema:
            type: string
        - name: bitgoOrg
          description: Return only wallets belong to the BitGo trust org
          in: query
          schema:
            type: string
            enum:
              - BitGo Trust
              - BitGo New York
              - BitGo Germany
              - BitGo Switzerland
              - BitGo Europe ApS
              - Frankfurt DE Trust
              - BitGo Singapore
              - BitGo Korea
              - BitGo Custody MENA FZE
              - BitGo India
              - BitGo Sister Trust 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletCountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/walletsharerequests:
    get:
      summary: List wallet share requests
      description: |-
        Lists all wallet share requests:
        - List of the wallets and the users for which wallet share request is present.
      operationId: v2.walletsharerequests.list
      tags:
        - Wallet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWalletShareRequestResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/walletshares/count:
    get:
      summary: List counts of wallet shares
      description: List counts of wallet shares by enterprises that the current user is the receiver
      operationId: v2.walletshares.count.list
      tags:
        - Wallet share
      parameters:
        - name: state
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/WalletShareState'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWalletSharesCountByEnterpriseResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/webhook/{webhookId}/verify:
    post:
      summary: Verify Webhook Notification
      description: |-
        Verify that a webhook notification comes from BitGo based on webhook signature and payload.
        If X-Signature-SHA256 header is not present in the notification, please use the [v2.webhook.secret.create](https://developers.bitgo.com/api/v2.webhook.secret.create) endpoint to generate a secret for your enterprise or organization.
        The requester must be an admin of the specified enterprise or organization.
      operationId: v2.webhook.notification.verify
      tags:
        - Webhook
      parameters:
        - name: webhookId
          description: Webhook public id
          in: path
          required: true
          schema:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            minLength: 1
            pattern: ^[0-9a-f]{32}$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  type: string
                  description: Webhook notification signature calculated based on the payload and webhook secret. Found in the HTTP header X-Signature-SHA256 of the notification.
                  example: f34538037a1ae6f79bd7cee9d9a5552f21bee3027983d7730f424d94d9bab04a
                  pattern: ^[0-9a-f]{64}$
                notificationPayload:
                  type: string
                  description: Webhook notification payload as JSON string
                  example: '{"userId":"66cd72485007a239fb00282ed480da1f","username":"username@email.com","tokenCreateTime":"2024-09-18T14:36:41.793Z","59cd72485007a239fb00282ed480da1f"}"'
              required:
                - signature
                - notificationPayload
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyWebhookNotificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
  /api/v2/webhook/secret:
    post:
      summary: Create webhook secret
      description: |-
        Create a webhook secret for a specified enterprise or organization.
        This secret will be used to generate webhook notification signatures so that you can verify that the notification comes from BitGo using the v2.webhook.notification.verify endpoint.
        The secret can be rotated by calling this endpoint again at a cadence of once every 5 minutes.
        You must specify exactly one of `enterpriseId` or `organizationId`.
        The requester must be an admin of the specified enterprise or organization.
      operationId: v2.webhook.secret.create
      tags:
        - Webhook
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enterpriseId:
                  type: string
                  example: 59cd72485007a239fb00282ed480da1f
                  pattern: ^[0-9a-f]{32}$
                organizationId:
                  type: string
                  example: 59cd72485007a239fb00282ed480da1f
                  pattern: ^[0-9a-f]{32}$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWebhookSecretResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformError'
components:
  callbacks: {}
  examples:
    ActionsExample:
      summary: Touchpoint Actions
      description: A successful response with 3 Touchpoint Actions.
      value:
        actions:
          - name: approvals.always.deny
            label: Deny
            description: Automatically reject
            status: ACTIVE
            adminOnly: false
            parameters: []
          - name: approvals.customer.walletAdmin
            label: Wallet Admin
            description: Require approval from wallet admins
            status: ACTIVE
            adminOnly: false
            parameters:
              - name: minRequired
                label: Approvals Required
                description: Minimum required number of approvers
                type: NON_NEGATIVE_NUMBER
                required: OPTIONAL
                allowMultiple: false
                values: []
          - name: approvals.customer.finalApproval
            label: Require final approval from wallet users
            description: Require final approval from wallet users
            status: ACTIVE
            adminOnly: false
            parameters:
              - name: userIds
                label: Users
                description: List of users for final approval
                type: BITGO_ID
                required: ONE_OR_MORE
                allowMultiple: true
                values: []
    AvaxPDelegationResultsExample:
      summary: AvaxP Delegation Results Example
      value:
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '0'
            coin: avaxp
            walletId: 63110fc78b108e00071df2d3c3879dd0
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '1000'
            apy: '6.5100'
            unstakeable: false
        page: 1
        totalPages: 1
        totalElements: 1
    AvaxPStakingRequestPOSTBodyExample:
      summary: AvaxP Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000'
        type: STAKE
        durationSeconds: 604800
    AvaxPStakingRequestWithTransactionsExample:
      summary: AvaxP UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        durationSeconds: 604800
        walletType: custodial
        type: STAKE
        coin: avaxp
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: READY
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            delegated: '10012000000'
            status: ACTIVE
            rewards: '12000000'
            lockedRewards: '0'
            pendingUnstake: '10012000000'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '1000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: READY
            amount: '1012'
            transactionType: delegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
          - id: p0500adbc-55b43-5tta-9a9d-726a05bca0dr
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: WAITING
            amount: '10012000000'
            transactionType: withdraw_undelegated
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '10012000000'
    AvaxPStakingRequestWithoutDelegationsExample:
      summary: AvaxP Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        durationSeconds: 604800
        walletType: hot
        type: STAKE
        coin: avaxp
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '10000000000'
    AvaxPWalletStakingStateAttributesExamples:
      summary: AvaxP Wallet Staking Attributes
      value:
        disclaimer:
          staking:
            info:
              - Minimum staking period is 14 days. Maximum staking period is 1 year (365 days). Minimum to stake is 2000 AVAX. Maximum to stake is 3M AVAX.
            transactionsNeeded: 1
            rewardPercentageRate: '2'
            rewardsCompounding: false
          unstaking:
            info:
              - Once staked you CANNOT unstake. It will auto-unstake at the end of your staking period.
            transactionsNeeded: 0
        permission:
          staking:
            enabled: true
            allowClientToUseOwnValidator: true
          unstaking:
            enabled: false
            disabledReason: AVAXP is auto-unstaked
          wallet:
            hasEnoughAdmins: true
            numberOfRequiredAdmins: 1
        spendable:
          staking:
            fee: '0'
            max: '13995243325'
            min: '1000000000'
            netMax: '13995243325'
            netMin: '1000000000'
            isStakingDurationNeeded: true
            minStakeMore: '0'
            minDuration: '86400'
            maxDuration: '31536000'
          unstaking:
            fee: '0'
            max: '0'
            min: '0'
            multipleDelegations: false
    BeraStakingRequestPOSTBodyExample:
      summary: BERA Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000000000000000000'
        type: STAKE
        subType: INFRARED_LIQUID_STAKE
        gasPrice: '1000000000000000'
    BeraUnStakingRequestPOSTBodyExample:
      summary: BERA UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
        amount: '1000000000000000000'
    BtcStakingRequestPOSTBodyExample:
      summary: BTC Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '10000000'
        type: STAKE
        validator: '0x1234567890abcdef1234567890abcdef12345678'
        coredao:
          expireAt: 2025-01-01T00:00:00.000Z
          rewardAddress: '0x1234567890abcdef1234567890abcdef12345678'
    BtcUnStakingRequestPOSTBodyExample:
      summary: BTC UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
    CreatePolicyRuleExample:
      summary: A create policy rule request
      value:
        name: Get approval if transferring more than 2 BTC in a minute
        adminOnly: false
        clauses:
          - conditions:
              - name: transfer.velocity.limit
                parameters:
                  amount: '2000000'
                  timeWindow: '60'
                  coin: btc
            actions:
              - name: approvals.customer.walletAdmin
                parameters: {}
        filteringConditions:
          - name: wallet.ids
            parameters:
              walletId:
                - 643f146bb13653000765c478a384a656
        lockType: LOCK_AFTER_DATE
        lockDate: '2023-11-13T14:49:48.830522Z'
    DotDelegationResultsExample:
      summary: Dot Delegation Results Example
      value:
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '0'
            coin: dot
            walletId: 63110fc78b108e00071df2d3c3879dd0
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '1000'
            apy: '6.5100'
            unstakeable: false
        page: 1
        totalPages: 1
        totalElements: 1
    DotStakingRequestPOSTBodyExample:
      summary: Dot Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '10000000000'
        type: STAKE
    DotStakingRequestWithTransactionsExample:
      summary: Dot Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: STAKE
        coin: dot
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            delegated: '10000000000'
            status: ACTIVE
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '1000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: CONFIRMED
            amount: '10000000000'
            transactionType: delegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '10000000000'
    DotStakingRequestWithoutDelegationsExample:
      summary: Dot Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: STAKE
        coin: dot
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '10000000000'
    DotStakingRequestsListResponseExample:
      summary: Dot Staking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            walletType: custodial
            type: STAKE
            coin: dot
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: string
                withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
                delegated: '10000000000'
                status: ACTIVE
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '0'
                pendingStaking: '0'
                apy: '8.3'
                unstakingFee: '1000000'
                unstakingMin: '0'
            transactions:
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: CONFIRMED
                amount: '10000000000'
                transactionType: delegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            amount: '10000000000'
    DotUnStakingRequestPOSTBodyExample:
      summary: Dot UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
        amount: '10000000000'
    DotUnStakingRequestWithTransactionsExample:
      summary: Dot UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: UNSTAKE
        coin: dot
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            delegated: '10012000000'
            status: ACTIVE
            rewards: '12000000'
            lockedRewards: '0'
            pendingUnstake: '10012000000'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '1000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: READY
            amount: '1012'
            transactionType: undelegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
          - id: p0500adbc-55b43-5tta-9a9d-726a05bca0dr
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: WAITING
            amount: '10012000000'
            transactionType: withdraw_undelegated
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '10012000000'
    DotUnStakingRequestWithoutDelegationsExample:
      summary: Dot UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: UNSTAKE
        coin: dot
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '10012000000'
    DotUnStakingRequestsListResponseExample:
      summary: Dot UnStaking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            walletType: custodial
            type: UNSTAKE
            coin: dot
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: string
                withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
                delegated: '10012000000'
                status: ACTIVE
                rewards: '12000000'
                lockedRewards: '0'
                pendingUnstake: '10012000000'
                pendingStake: '0'
                apy: '8.3'
                unstakingFee: '1000000'
                unstakingMin: '0'
            transactions:
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: READY
                amount: '1012'
                transactionType: undelegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
              - id: p0500adbc-55b43-5tta-9a9d-726a05bca0dr
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: WAITING
                amount: '10012000000'
                transactionType: withdraw_undelegated
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            amount: '10012000000'
    DotWalletStakingStateAttributesExamples:
      summary: Dot Wallet Staking Attributes
      value:
        disclaimer:
          staking:
            info:
              - 'Minimum staking period is: 1 day.'
              - Once staked, the unstaking takes 28 eras (about 28 days).
              - |
                'Unstaking requires approving 2 transactions: the transaction to unstake and the transaction to claim your staking balance plus rewards.'
            transactionsNeeded: 1
            stakeWarmupPeriodDesc: '172800'
            rewardPercentageRate: '13.92'
            rewardsCompounding: true
          unstaking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unbond and the transaction to claim your staking amount. The network has to confirm the unbonding transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 2
            unStakeCooldownPeriodDesc: '2419200'
        permission:
          staking:
            enabled: false
            disabledReason: Wallet 63a1d3892f03840007e056e3880391ee has insufficient funds
            allowClientToUseOwnValidator: false
          unstaking:
            enabled: true
          wallet:
            hasEnoughAdmins: true
            numberOfRequiredAdmins: 0
        spendable:
          staking:
            fee: '12923673972'
            max: '0'
            min: '1000000000000'
            netMax: '0'
            netMin: '1012923673972'
            isStakingDurationNeeded: false
            minStakeMore: '0'
          unstaking:
            fee: '45410610588'
            max: '20384805835211'
            min: '1000000000000'
            multipleDelegations: false
    EnterpriseStakeableCoinsResultExample:
      summary: Enterprise Stakeable Coins Result Example
      value:
        - symbol: tmatic
          disclaimer:
            staking:
              rewardPercentageRate: '4.2'
        - symbol: gteth
          disclaimer:
            staking:
              rewardPercentageRate: '6.5100'
    EthDelegationResultsExample:
      summary: Ethereum Delegation Results Example
      value:
        page: 1
        totalPages: 1
        totalElements: 2
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '3200000000000000000'
            status: ACTIVE
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '3200000000000000000'
            pendingStake: '0'
            apy: '8.3'
            coin: eth
            walletId: 2032e75g451052000636831abd797bd3
            unstakingFee: '100000000000000'
            unstakingMin: '0'
          - id: e0225adbc-55b43-5tta-9a9d-726a05bca0ai
            delegationAddress: 0x3b6406c9710f588ca733360bfa8033d0ef9ecre4
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '3200000000000000000'
            status: ACTIVE
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '0'
            apy: '8.3'
            coin: eth
            walletId: 2032e75g451052000636831abd797bd3
            permissionAttributes:
              staking:
                enabled: false
                disabledReason: 'Wallet 2032e75g451052000636831abd797bd3 has insufficient funds. Available: 0 eth. Minimum spendable required: 32 eth'
                allowClientToUseOwnValidator: false
              unstaking:
                enabled: true
            unstakingFee: '1000000000000000'
            unstakingMin: '0'
          - id: dca8af33-e882-455b-a0d6-fb93c8a17ca3
            delegationAddress: '0x3508a952176b3c15387c97be809eaffb1982176a'
            withdrawalAddress: '0x05a252537385b7218902f9225b44bb266347ccdc'
            provider: Lido
            delegated: '501344121663000672'
            status: ACTIVE
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '0'
            apy: '8.3'
            coin: hteth
            walletId: 2702688762b9a7b5b27d4ca3a0c3d3c1
            permissionAttributes:
              staking:
                enabled: true
                allowClientToUseOwnValidator: false
              unstaking:
                enabled: true
            spendableAttributes:
              unstaking:
                fee: '59002357275690000'
                max: '501344121663000672'
                min: '1000000000000000'
                multiplier: '1'
                multipleDelegations: false
                breakdown:
                  balance: '100000000000000000000'
                  unstakingFee: '-18197924962200000'
                  maxSpendable: '100000000000000000000'
                  unstakeable:
                    stakedBalance: '501344121663000672'
                    pendingUnstake: '0'
                    maxUnstakeable: '501344121663000672'
            requiresAmount: true
            requiresDelegationId: true
            requiresDelegationIds: false
    EthStakingRequestPOSTBodyExample:
      summary: Ethereum Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '64000000000000000000'
        gasPrice: '1000000000000000'
        type: STAKE
    EthStakingRequestWithTransactionsExample:
      summary: Ethereum Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        walletType: custodial
        type: STAKE
        coin: eth
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '3200000000000000000'
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '3200000000000000000'
            pendingStake: '0'
            apy: '8.3'
            coin: eth
            walletId: 2032e75g451052000636831abd797bd3
            unstakingFee: '100000000000000'
            unstakingMin: '0'
          - id: e0225adbc-55b43-5tta-9a9d-726a05bca0ai
            delegationAddress: 0x3b6406c9710f588ca733360bfa8033d0ef9ecre4
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '3200000000000000000'
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '3200000000000000000'
            pendingStake: '0'
            apy: '8.3'
            coin: eth
            walletId: 2032e75g451052000636831abd797bd3
            unstakingFee: '1000000000000000'
            unstakingMin: '0'
        transactions:
          - id: d0355adbc-55b43-5tta-9a9d-726a05bca0ai
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: PENDING
            amount: '3200000000000000000'
            transactionType: delegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            buildParams:
              recipients:
                amount: '3200000000000000000'
                address: '0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b'
                data: fds0934rnnio390nw
              stakingParams:
                requestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                amount: '3200000000000000000'
                validator: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
                actionType: delegate
              gasPrice: '1000000000000000'
              gasLimit: '3000000000000000'
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: PENDING
            amount: '3200000000000000000'
            transactionType: delegate
            delegationId: e0225adbc-55b43-5tta-9a9d-726a05bca0ai
            buildParams:
              recipients:
                amount: '3200000000000000000'
                address: '0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b'
                data: fds0934rnnio390nw
              stakingParams:
                requestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                amount: '3200000000000000000'
                validator: 0x3b6406c9710f588ca733360bfa8033d0ef9ecre4
                actionType: delegate
              gasPrice: '1000000000000000'
              gasLimit: '3000000000000000'
        amount: '6400000000000000000'
        gasPrice: '1000000000000000'
    EthStakingRequestWithoutDelegationsExample:
      summary: Ethereum Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        walletType: custodial
        type: STAKE
        coin: eth
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
        amount: '6400000000000000000'
        gasPrice: '1000000000000000'
    EthStakingRequestsListResponseExample:
      summary: Ethereum Staking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            walletType: custodial
            type: STAKE
            coin: eth
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
                withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
                delegated: '3200000000000000000'
                status: PENDING
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '3200000000000000000'
                pendingStake: '0'
                apy: 8.3
                coin: eth
                walletId: 2032e75g451052000636831abd797bd3
                unstakingFee: '100000000000000'
                unstakingMin: '0'
              - id: e0225adbc-55b43-5tta-9a9d-726a05bca0ai
                delegationAddress: 0x3b6406c9710f588ca733360bfa8033d0ef9ecre4
                withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
                delegated: '3200000000000000000'
                status: PENDING
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '3200000000000000000'
                pendingStake: '0'
                apy: '8.3'
                coin: eth
                walletId: 2032e75g451052000636831abd797bd3
                unstakingFee: '1000000000000000'
                unstakingMin: '0'
            transactions:
              - id: d0355adbc-55b43-5tta-9a9d-726a05bca0ai
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: PENDING
                amount: '3200000000000000000'
                transactionType: delegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                buildParams:
                  recipients:
                    amount: '3200000000000000000'
                    address: '0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b'
                    data: fds0934rnnio390nw
                  stakingParams:
                    requestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                    amount: '3200000000000000000'
                    validator: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
                    actionType: delegate
                  gasPrice: '1000000000000000'
                  gasLimit: '3000000000000000'
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: PENDING
                amount: '3200000000000000000'
                transactionType: delegate
                delegationId: e0225adbc-55b43-5tta-9a9d-726a05bca0ai
                buildParams:
                  recipients:
                    amount: '3200000000000000000'
                    address: '0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b'
                    data: fds0934rnnio390nw
                  stakingParams:
                    requestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                    amount: '3200000000000000000'
                    validator: 0x3b6406c9710f588ca733360bfa8033d0ef9ecre4
                    actionType: delegate
                  gasPrice: '1000000000000000'
                  gasLimit: '3000000000000000'
            amount: '6400000000000000000'
            gasPrice: '1000000000000000'
    EthStakingResultsExample:
      summary: Ethereum Staking Request Results Example
      value:
        page: 1
        totalPages: 1
        totalElements: 1
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            walletType: custodial
            type: STAKE
            coin: eth
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
                withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
                delegated: '3200000000000000000'
                status: PENDING
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '3200000000000000000'
                pendingStake: '0'
                apy: '8.3'
                coin: eth
                walletId: 2032e75g451052000636831abd797bd3
                unstakingFee: '100000000000000'
                unstakingMin: '0'
              - id: e0225adbc-55b43-5tta-9a9d-726a05bca0ai
                delegationAddress: 0x3b6406c9710f588ca733360bfa8033d0ef9ecre4
                withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
                delegated: '3200000000000000000'
                status: PENDING
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '3200000000000000000'
                pendingStake: '0'
                apy: '8.3'
                coin: eth
                walletId: 2032e75g451052000636831abd797bd3
                unstakingFee: '1000000000000000'
                unstakingMin: '0'
            transactions:
              - id: d0355adbc-55b43-5tta-9a9d-726a05bca0ai
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: PENDING
                amount: '3200000000000000000'
                transactionType: delegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                buildParams:
                  recipients:
                    amount: '3200000000000000000'
                    address: '0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b'
                    data: fds0934rnnio390nw
                  stakingParams:
                    requestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                    amount: '3200000000000000000'
                    validator: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
                    actionType: delegate
                  gasPrice: '1000000000000000'
                  gasLimit: '3000000000000000'
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: PENDING
                amount: '3200000000000000000'
                transactionType: delegate
                delegationId: e0225adbc-55b43-5tta-9a9d-726a05bca0ai
                buildParams:
                  recipients:
                    amount: '3200000000000000000'
                    address: '0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b'
                    data: fds0934rnnio390nw
                  stakingParams:
                    requestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                    amount: '3200000000000000000'
                    validator: 0x3b6406c9710f588ca733360bfa8033d0ef9ecre4
                    actionType: delegate
                  gasPrice: '1000000000000000'
                  gasLimit: '3000000000000000'
            amount: '6400000000000000000'
            gasPrice: '1000000000000000'
    EvaluationExample:
      summary: Evaluation
      description: A successful evaluation response.
      value:
        id: 7b0e0c89-180a-47d1-a855-586f480def21
        idempotencyKey: 744d7578-a921-47b5-8259-2fb8d04f0427
        scope: wallet.segregated
        touchpoint: wallet.segregated.transfer
        clientRequest:
          coin: tnear
          amount: '2e+23'
          outputs:
            - value: '2e+23'
              address: 35baf313ddabd2904c4bf0f26153201f62d3bf3fb542893c4518214bad72c0a3
              isVerified: true
              walletWhitelistedAddress: true
          bitgoOrg: BitGo Trust
          walletId: 649dd0d990a1fd0007e6ab1b229ffe7f
          initiator: 63cf101298470200073bbae71add80d5
          requestId: 9bd3c62016761e5bca6b-0000
          coinIsFiat: false
          walletType: custodial
          enterpriseId: 63c86bf4555aba000652d5c59aff2866
          waiveVideoId: true
          usdCentAmount: '161.16'
          idempotencyKey: 744d7578-a921-47b5-8259-2fb8d04f0427
          transactionTypes: []
          hasUnvalidatedData: false
          walletWhitelistExists: true
          enterpriseWhitelistExists: false
        status: DENIED
        evaluatedPolicyRules:
          - id: 73bb6587-4f4d-44ce-b189-e8f61e96e544
            status: NOT_TRIGGERED
            filteringConditionInputs:
              walletType: custodial
            policyRuleId: 00000000-0000-0000-0000-000000000001
            version: 1
            clauses:
              - id: 5c39f31d-5c16-48a1-96ec-449b3831a2d1
                policyRuleClauseId: 00000000-0000-0000-0000-000000000001
                status: NOT_TRIGGERED
                conditions:
                  - id: 52c4c3b6-6cc5-4826-9b28-2741bde3c97f
                    policyConditionId: 00000000-0000-0000-0000-000000000001
                    name: transfer.destination.type
                    status: NOT_TRIGGERED
                    inputs:
                      coin: tnear
                      amount: '2e+23'
                      ruleId: 00000000-0000-0000-0000-000000000001
                      outputs:
                        - value: '2e+23'
                          address: 35baf313ddabd2904c4bf0f26153201f62d3bf3fb542893c4518214bad72c0a3
                          isVerified: true
                          walletWhitelistedAddress: true
                      bitgoOrg: BitGo Trust
                      walletId: 649dd0d990a1fd0007e6ab1b229ffe7f
                      initiator: 63cf101298470200073bbae71add80d5
                      requestId: 9bd3c62016761e5bca6b-0000
                      coinIsFiat: false
                      walletType: custodial
                      enterpriseId: 63c86bf4555aba000652d5c59aff2866
                      waiveVideoId: true
                      usdCentAmount: '161.16'
                      idempotencyKey: 744d7578-a921-47b5-8259-2fb8d04f0427
                      transactionTypes: []
                      hasUnvalidatedData: false
                      walletWhitelistExists: true
                      enterpriseWhitelistExists: false
                    parameters:
                      type: nonWhitelistedAddress
                    evaluationMetadata: {}
                    evaluationMessage:
                      messageTemplate: The destination address was whitelisted on the wallet whitelist.
                      variables: []
                      message: The destination address was whitelisted on the wallet whitelist.
                actions:
                  - name: approvals.always.deny
                    parameters: {}
          - id: b9f3062d-983f-4b8f-8e95-43064da22d99
            status: TRIGGERED
            filteringConditionInputs:
              walletType: custodial
            policyRuleId: c1437a69-b701-4783-abd2-cf0a22185323
            version: 1
            clauses:
              - id: 5a4fae05-022d-4633-ac93-c33348c13311
                policyRuleClauseId: d5246645-94e4-4a2d-9a9e-8b112e7c8470
                status: TRIGGERED
                conditions:
                  - id: 4020abef-012f-4d57-9b7b-f2e102d85dd9
                    policyConditionId: fb41229b-c54f-4a80-b1e7-82b9a47dc7ef
                    name: trust.transfer.velocity.limit
                    status: TRIGGERED
                    inputs:
                      coin: tnear
                      amount: '2e+23'
                      ruleId: 9d52414e-781c-4a5f-961b-1556af08abeb
                      outputs:
                        - value: '2e+23'
                          address: 35baf313ddabd2904c4bf0f26153201f62d3bf3fb542893c4518214bad72c0a3
                          isVerified: true
                          walletWhitelistedAddress: true
                      bitgoOrg: BitGo Trust
                      walletId: 649dd0d990a1fd0007e6ab1b229ffe7f
                      initiator: 63cf101298470200073bbae71add80d5
                      requestId: 9bd3c62016761e5bca6b-0000
                      coinIsFiat: false
                      walletType: custodial
                      enterpriseId: 63c86bf4555aba000652d5c59aff2866
                      waiveVideoId: true
                      usdCentAmount: '161.16'
                      idempotencyKey: 744d7578-a921-47b5-8259-2fb8d04f0427
                      transactionTypes: []
                      hasUnvalidatedData: false
                      walletWhitelistExists: true
                      enterpriseWhitelistExists: false
                    parameters:
                      coin: tnear
                      scope: wallet
                      amount: '1000000000000000000000000'
                      timeWindow: 15
                    evaluationMetadata:
                      spending: '1100000000000000000000000'
                    evaluationMessage:
                      messageTemplate: The velocity calculation reached {spendingAmount} with this transaction, exceeding the wallet limit of {limitAmount} over {timeWindow}.
                      variables:
                        - name: spendingAmount
                          value: '1100000000000000000000000'
                          coin: tnear
                          type: COIN_AMOUNT
                        - name: limitAmount
                          value: '1000000000000000000000000'
                          coin: tnear
                          type: COIN_AMOUNT
                        - name: timeWindow
                          value: '15'
                          unit: seconds
                          type: TIME_DURATION
                      message: The velocity calculation reached 1100000000000000000000000 tnear with this transaction, exceeding the wallet limit of 1000000000000000000000000 tnear over 15 seconds.
                actions:
                  - name: approvals.customer.walletAdmin
                    parameters:
                      minRequired: '1'
        actions:
          - id: 31a68c61-f98b-49cc-9e4d-b9f5bfbf618c
            status: CANCELLED
            action:
              name: approvals.customer.walletAdmin
              parameters:
                minRequired: '1'
            resolution:
              reason: Rejected by user
              pendingApproval: 664ed267aad92c62a183ac5f28883495
          - id: aa371c4c-6adc-4039-ba88-5f9a3e807ca3
            status: CANCELLED
            action:
              name: approvals.bitgo.custodialSigning
              parameters: {}
            resolution:
              reason: Rejected by user
              pendingApproval: 664ed267aad92c62a183ac5f28883495
        resolutionOrder:
          - actions:
              - 31a68c61-f98b-49cc-9e4d-b9f5bfbf618c
          - actions:
              - aa371c4c-6adc-4039-ba88-5f9a3e807ca3
        createdDate: '2024-05-23T05:21:41.805829Z'
    FilteringConditionsExample:
      summary: Filtering Conditions
      description: A successful response with two Filtering Conditions.
      value:
        conditions:
          - name: wallet.type
            label: Wallet Type
            description: Allows creating a condition based on the Wallet Type
            status: ACTIVE
            parameters:
              - name: walletType
                label: Type
                description: The Wallet Type
                type: ENUMERATED
                required: ALWAYS
                allowMultiple: true
                values:
                  - value: custodial
                    label: Custodial Wallet
                    description: A custodial wallet
                  - value: hot
                    label: Hot Wallet
                    description: A hot wallet
                  - value: cold
                    label: Cold Wallet
                    description: A cold wallet
                  - value: trading
                    label: Trading Wallet
                    description: A trading wallet
                  - value: custodialPaired
                    label: Hot Wallet paired with a Custodial Wallet
                    description: A hot wallet that is paired with a custodial wallet
                  - value: backing
                    label: Backing Wallet
                    description: A backing wallet
          - name: wallet.ids
            label: Wallet Ids
            description: Allows creating a condition based on the Wallet Id
            status: ACTIVE
            parameters:
              - name: walletId
                label: Wallet Id
                description: The Wallet Ids
                type: BITGO_WALLET_ID
                required: ALWAYS
                allowMultiple: false
                values: []
    InactivePolicyRuleExample:
      summary: An `INACTIVE` policy rule
      value:
        uniqueId: c5a818c7-1831-4fe2-8363-d469378bb106
        id: 4fa8326b-4f5f-4065-8cfc-85a08c290c49
        name: Get approval if transferring more than 2 BTC in a minute
        status: INACTIVE
        version: 1
        adminOnly: false
        touchpointLabel: Transfer from a Segregated Wallet
        scopeLabel: Wallet
        clauses:
          - actions:
              - name: approvals.customer.walletAdmin
                parameters: {}
            conditions:
              - name: transfer.velocity.limit
                parameters:
                  amount: '2000000'
                  timeWindow: '60'
                  coin: btc
        filteringConditions:
          - parameters:
              walletId:
                - 643f146bb13653000765c478a384a656
            name: wallet.ids
        locked: true
        lockType: LOCK_AFTER_DATE
        lockDate: '2023-11-13T14:49:48.830522Z'
        enterpriseId: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        lastTriggeredDate: '2023-11-13T14:49:48.830522Z'
        lastTriggeredEvaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
        createdBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        modifiedBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        evaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
    LicenseResultsExample:
      summary: Staking License Result Example
      value:
        enterpriseId: 61c0ff41174c4e0007ae78b2a0bea1ec
        fees:
          - coin: near
            fee: '4'
          - coin: sol
            fee: '5'
        defaultFee: '10'
    MMIBalanceEventNoErrorExample:
      value:
        - type: MMI
          subtype: BALANCE
          timeEventOccurred: 2021-12-02T00:00:01.000Z
          timeEventSent: 2021-01-10T00:00:17.000Z
          source: defi-service
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: i28e44259cf048638a293e7850594e39
          AUDGroupId: g34e4425-ccf0-2863-1a29-457850594e37
          chainId: '137'
          asset: SNX
          amountDelta: '30289390048741049'
          totalAUD: '70770742.03999998'
          totalAUDCurrency: USD
          object: token
          objectAddress: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f'
          objectName: Synthetix Network Token
          symbol: SNX
          decimals: 18
          iconUrl: https://assets.coingecko.com/coins/images/3406/large/SNX.png
          coingeckoId: havven
          rawBalance: '30289390048741049'
          balance: 0.03028939004874105
          valueBalanceDate: 2021-12-01T23:59:59.000Z
          valueBlockNumber: '13724084'
          valueVsCurrency: USD
          valueTokenName: Synthetix Network Token
          valueTimestamp: 1638400406610
          valuePrice: 7.361103870620357
          valueError: false
          valueErrorMessage: ''
    MMIBalanceEventWithErrorExample:
      value:
        - type: MMI
          subtype: BALANCE
          timeEventOccurred: 2021-12-02T00:00:01.000Z
          timeEventSent: 2021-01-10T00:00:17.000Z
          source: defi-service
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: h28e44259cf048638a293e7850594e39
          AUDGroupId: g34e4425-ccf0-2863-1a29-457850594e37
          chainId: '137'
          asset: SNX
          amountDelta: '30289390048741049'
          totalAUD: '70770742.03999998'
          totalAUDCurrency: USD
          object: token
          objectAddress: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f'
          objectName: Synthetix Network Token
          symbol: SNX
          decimals: 18
          iconUrl: https://assets.coingecko.com/coins/images/3406/large/SNX.png
          coingeckoId: ''
          rawBalance: '30289390048741049'
          balance: 0.03028939004874105
          valueBalanceDate: ''
          valueBlockNumber: ''
          valueVsCurrency: ''
          valueTokenName: ''
          valueTimestamp: 0
          valuePrice: 0
          valueError: true
          valueErrorMessage: Missing coingeckoId, unable to calculate price
    MMIDailyRollupEventExample:
      value:
        - type: MMI
          subtype: ROLLUP
          timeEventOccurred: 2021-12-02T00:00:01.000Z
          timeEventSent: 2021-01-10T00:00:17.000Z
          source: defi-service
          asset: USD
          amountDelta: '70770742.03999998'
          AUDGroupId: g28e4425-9cf0-4863-8a29-3e7850594e39
          rollupPeriod: daily
          fromDate: 2021-12-01T00:00:00.000Z
          toDate: 2021-12-02T00:00:00.000Z
          totalAUD: '70770742.03999998'
          totalAUDCurrency: USD
          averageAUD: '60770742.03999998'
          averageAUDCurrency: 48dd72485007a239fb00282ed480da1f
          usersAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: g28e44259cf048638a293e7850594e39
          chainId: '137'
    MMIMonthlyRollupEventExample:
      value:
        - type: MMI
          subtype: ROLLUP
          timeEventOccurred: 2021-12-02T00:00:01.000Z
          timeEventSent: 2021-01-10T00:00:17.000Z
          source: defi-service
          asset: USD
          amountDelta: '70770742.03999998'
          AUDGroupId: g28e4425-9cf0-4863-8a29-3e7850594e39
          rollupPeriod: monthly
          fromDate: 2021-12-01T00:00:00.000Z
          toDate: 2022-01-01T00:00:00.000Z
          totalAUD: '900077074.03999998'
          totalAUDCurrency: USD
          averageAUD: '60770742.03999998'
          averageAUDCurrency: USD
          walletId: 48dd72485007a239fb00282ed480da1f
          usersAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          idempotencyKey: a28e4425-9cf0-4863-8a29-3e7850594e39
          chainId: '137'
    MMITransactionEventExample:
      value:
        - type: MMI
          subtype: TRANSACTION
          timeEventOccurred: 2022-01-10T17:32:28.000Z
          timeEventSent: 2022-01-10T17:33:28.000Z
          source: defi-service
          asset: ETH
          amountDelta: '-60000003247'
          decimals: 18
          marketPrice: 7.361103870620357
          usersAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          idempotencyKey: f28e44259cf048638a293e7850594e39
          walletId: 48dd72485007a239fb00282ed480da1f
          enterpriseId: 61b8e0043daafc65a85d4bd36b4649d4
          txid: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
          txState: CONFIRMED
    MaticDelegationResultsExample:
      summary: Matic Delegation Results Example
      value:
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '0'
            coin: matic
            walletId: 63110fc78b108e00071df2d3c3879dd0
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '1000'
            apy: '6.5100'
            unstakeable: false
        page: 1
        totalPages: 1
        totalElements: 1
    MaticStakingRequestPOSTBodyExample:
      summary: Matic Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '10000000000000000000'
        gasPrice: '50000000000000'
        type: STAKE
    MaticStakingRequestWithTransactionsExample:
      summary: Matic Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestingUserId: 6092e75c451052000636831deb797bd1
        type: STAKE
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        walletType: custodial
        withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
        coin: matic
        status: NEW
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        createdDate: 2022-01-10T14:32:28.000Z
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '3200000000000000000'
            coin: matic
            walletId: 2032e75g451052000636831abd797bd3
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '3200000000000000000'
            pendingStake: '1000'
            apy: '8.3'
            unstakeable: false
        transactions:
          - id: d0355adbc-55b43-5tta-9a9d-726a05bca0ai
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            transactionType: delegate
            status: PENDING
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            amount: '3200000000000000000'
            gasPrice: '1000000000000000'
        totalStaked: '0'
        amount: '3200000000000000000'
        gasPrice: '1000000000000000'
    MaticStakingRequestWithoutDelegationsExample:
      summary: Matic Staking Request Example
      value:
        id: 0b7e6e7e-5041-49d8-9598-0a4a3f3f234e
        clientId: e055adbc-66a3-4ccd-9b9d-726b05dca0cf
        requestingUserId: 61c0ee3803715c00088d2c85b533b732
        type: STAKE
        enterpriseId: 61c0ff41174c4e0007ae78b2a0bea1ec
        walletId: 63110fc78b108e00071df2d3c3879dd0
        walletType: hot
        withdrawalAddress: '0xf5b9becc5e7e68173a5fc1906a2a5574e884da40'
        coin: matic
        status: NEW
        statusModifiedDate: '2022-12-05T17:11:30.748165Z'
        createdDate: '2022-12-05T17:11:30.748159Z'
        delegations: []
        transactions: []
        totalStaked: '0'
        amount: '1000000000000'
        gasPrice: '500000000000'
    MaticStakingRequestsListResponseExample:
      summary: Matic Staking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestingUserId: 6092e75c451052000636831deb797bd1
            type: STAKE
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            walletType: custodial
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            coin: matic
            status: NEW
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            createdDate: 2022-01-10T14:32:28.000Z
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
                withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
                delegated: '3200000000000000000'
                coin: matic
                walletId: 2032e75g451052000636831abd797bd3
                status: PENDING
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '3200000000000000000'
                pendingStake: '1000'
                apy: '8.3'
                unstakeable: false
            transactions:
              - id: d0355adbc-55b43-5tta-9a9d-726a05bca0ai
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                transactionType: delegate
                status: PENDING
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                amount: '3200000000000000000'
                gasPrice: '1000000000000000'
            totalStaked: '0'
            amount: '3200000000000000000'
            gasPrice: '1000000000000000'
    MaticUnStakingRequestWithTransactionsExample:
      summary: Matic UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestingUserId: 6092e75c451052000636831deb797bd1
        type: UNSTAKE
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        walletType: custodial
        withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
        coin: matic
        status: NEW
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        createdDate: 2022-01-10T14:32:28.000Z
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '1600000000000000000'
            coin: matic
            walletId: 2032e75g451052000636831abd797bd3
            status: PENDING
            rewards: '1000000000000000'
            lockedRewards: '0'
            pendingUnstake: '4800000000000000000'
            pendingStake: '1000'
            apy: '8.3'
            unstakeable: false
        transactions:
          - id: d0355adbc-55b43-5tta-9a9d-726a05bca0ai
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            transactionType: delegate
            status: PENDING
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            amount: '3200000000000000000'
            gasPrice: '1000000000000000'
        totalStaked: '0'
        amount: '6400000000000000000'
        gasPrice: '1000000000000000'
    MaticUnStakingRequestWithoutDelegationsExample:
      summary: Matic UnStaking Request Example
      value:
        id: 0b7e6e7e-5041-49d8-9598-0a4a3f3f234e
        clientId: e055adbc-66a3-4ccd-9b9d-726b05dca0cf
        requestingUserId: 61c0ee3803715c00088d2c85b533b732
        type: UNSTAKE
        enterpriseId: 61c0ff41174c4e0007ae78b2a0bea1ec
        walletId: 63110fc78b108e00071df2d3c3879dd0
        walletType: hot
        withdrawalAddress: '0xf5b9becc5e7e68173a5fc1906a2a5574e884da40'
        coin: matic
        status: NEW
        statusModifiedDate: '2022-12-05T17:11:30.748165Z'
        createdDate: '2022-12-05T17:11:30.748159Z'
        delegations: []
        transactions: []
        totalStaked: '0'
        amount: '500000000000'
        gasPrice: '200000000000'
    MaticUnStakingRequestsListResponseExample:
      summary: Matic Staking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestingUserId: 6092e75c451052000636831deb797bd1
            type: UNSTAKE
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            walletType: custodial
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            coin: matic
            status: NEW
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            createdDate: 2022-01-10T14:32:28.000Z
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
                withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
                delegated: '1600000000000000000'
                coin: matic
                walletId: 2032e75g451052000636831abd797bd3
                status: PENDING
                rewards: '1000000000000000'
                lockedRewards: '0'
                pendingUnstake: '4800000000000000000'
                pendingStake: '1000'
                apy: '8.3'
                unstakeable: false
            transactions:
              - id: d0355adbc-55b43-5tta-9a9d-726a05bca0ai
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                transactionType: delegate
                status: PENDING
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                amount: '3200000000000000000'
                gasPrice: '1000000000000000'
            totalStaked: '0'
            amount: '6400000000000000000'
            gasPrice: '1000000000000000'
    MaticUnstakingRequestPOSTBodyExample:
      summary: Matic UnStaking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '2000000000000000000'
        gasPrice: '50000000000000'
        type: UNSTAKE
    MaticWalletStakingStateAttributesExamples:
      summary: Matic Wallet Staking Attributes
      value:
        disclaimer:
          staking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 2
            stakeWarmupPeriodDesc: tbd
            rewardPercentageRate: '6.5100'
            rewardsCompounding: false
          unstaking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 2
            unStakeCooldownPeriodDesc: tbd
        permission:
          staking:
            enabled: true
            allowClientToUseOwnValidator: false
          unstaking:
            enabled: true
          wallet:
            hasEnoughAdmins: true
            numberOfRequiredAdmins: 2
        spendable:
          staking:
            fee: '888546618800000'
            max: '2010492598925385321'
            min: '1'
            netMax: '2009604052306585321'
            netMin: '888546618800001'
            isStakingDurationNeeded: false
            minStakeMore: '0'
          unstaking:
            multipleDelegations: true
    NearDelegationResultsExample:
      summary: Near Delegation Results Example
      value:
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '0'
            coin: near
            walletId: 63110fc78b108e00071df2d3c3879dd0
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '1000'
            apy: '6.5100'
            unstakeable: false
        page: 1
        totalPages: 1
        totalElements: 1
    NearStakingRequestPOSTBodyExample:
      summary: Near Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '12000000000000000000'
        type: STAKE
    NearStakingRequestWithTransactionsExample:
      summary: Near Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
        walletType: custodial
        type: STAKE
        coin: near
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
            delegated: '1300000000000000000'
            status: ACTIVE
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '1300000000000000000'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '100000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            amount: '1300000000000000000'
            transactionType: delegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1300000000000000000'
    NearStakingRequestWithoutDelegationsExample:
      summary: Near Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
        walletType: custodial
        type: STAKE
        coin: near
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '1300000000000000000'
    NearStakingRequestsListResponseExample:
      summary: Near Staking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
            walletType: custodial
            type: STAKE
            coin: near
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: string
                withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
                delegated: '1300000000000000000'
                status: ACTIVE
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '1300000000000000000'
                pendingStake: '0'
                apy: '8.3'
                unstakingFee: '100000000'
                unstakingMin: '0'
            transactions:
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: NEW
                amount: '1300000000000000000'
                transactionType: delegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            amount: '1300000000000000000'
    NearUnStakingRequestPOSTBodyExample:
      summary: Near UnStaking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '12000000000000000000'
        type: UNSTAKE
    NearUnStakingRequestWithTransactionsExample:
      summary: Near UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
        walletType: custodial
        type: UNSTAKE
        coin: near
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
            delegated: '1310000000000000000'
            status: ACTIVE
            rewards: '100000000000000000'
            lockedRewards: '0'
            pendingUnstake: '1310000000000000000'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '100000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            amount: '1300000000000000000'
            transactionType: delegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1300000000000000000'
    NearUnStakingRequestWithoutDelegationsExample:
      summary: Near UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
        walletType: custodial
        type: UNSTAKE
        coin: near
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '1310000000000000000'
    NearUnStakingRequestsListResponseExample:
      summary: Near UnStaking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
            walletType: custodial
            type: UNSTAKE
            coin: near
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: string
                withdrawalAddress: b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55
                delegated: '1310000000000000000'
                status: ACTIVE
                rewards: '100000000000000000'
                lockedRewards: '0'
                pendingUnstake: '1310000000000000000'
                pendingStake: '0'
                apy: '8.3'
                unstakingFee: '100000000'
                unstakingMin: '0'
            transactions:
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: NEW
                amount: '1300000000000000000'
                transactionType: delegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            amount: '1300000000000000000'
    NearWalletStakingStateAttributesExamples:
      summary: Near Wallet Staking Attributes
      value:
        disclaimer:
          staking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 2
            stakeWarmupPeriodDesc: tbd
            rewardPercentageRate: '6.5100'
            rewardsCompounding: false
          unstaking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 2
            unStakeCooldownPeriodDesc: tbd
        permission:
          staking:
            enabled: true
            allowClientToUseOwnValidator: false
          unstaking:
            enabled: true
          wallet:
            hasEnoughAdmins: true
            numberOfRequiredAdmins: 2
        spendable:
          staking:
            fee: '888546618800000'
            max: '2010492598925385321'
            min: '1'
            netMax: '2009604052306585321'
            netMin: '888546618800001'
            isStakingDurationNeeded: false
            minStakeMore: '0'
          unstaking:
            multipleDelegations: true
    PolicyRuleExample:
      summary: A policy rule
      description: A successful policy rule details response.
      value:
        uniqueId: c3ff569e-e30a-4405-8b76-38de240c724a
        id: 4fa8326b-4f5f-4065-8cfc-85a08c290c49
        name: Get approval if transferring more than 2 BTC in a minute
        status: ACTIVE
        version: 1
        adminOnly: false
        touchpointLabel: Transfer from a Segregated Wallet
        scopeLabel: Wallet
        clauses:
          - actions:
              - name: approvals.customer.walletAdmin
                parameters: {}
            conditions:
              - name: transfer.velocity.limit
                parameters:
                  amount: '2000000'
                  timeWindow: '60'
                  coin: btc
        filteringConditions:
          - parameters:
              walletId:
                - 643f146bb13653000765c478a384a656
            name: wallet.ids
        locked: true
        lockType: PERMANENT
        enterpriseId: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        lastTriggeredDate: '2023-11-13T14:49:48.830522Z'
        lastTriggeredEvaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
        createdBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        modifiedBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        evaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
    PolicyRulesResultsExample:
      summary: Policy Rules.
      description: A successful response with 3 Policy Rules.
      value:
        rules:
          - id: 81d00054-72b5-4e7c-95cf-74d4f1f7d946
            name: Get final approval on custodial wallets
            status: ACTIVE
            version: 5
            adminOnly: false
            touchpointLabel: Transfer from a Segregated Wallet
            scopeLabel: Wallet
            clauses:
              - actions:
                  - name: approvals.customer.finalApproval
                    parameters:
                      userIds:
                        - 63f949ed0d96f8000718b29585ce0765
                conditions: []
            filteringConditions:
              - parameters:
                  walletType: custodial
                name: wallet.type
          - id: 4fa8326b-4f5f-4065-8cfc-85a08c290c49
            name: Get approval if transferring more than 2 BTC in a minute
            status: ACTIVE
            version: 1
            adminOnly: false
            touchpointLabel: Transfer from a Segregated Wallet
            scopeLabel: Wallet
            clauses:
              - actions:
                  - name: approvals.customer.walletAdmin
                    parameters: {}
                conditions:
                  - name: transfer.velocity.limit
                    parameters:
                      amount: '2000000'
                      timeWindow: '60'
                      coin: btc
            filteringConditions:
              - parameters:
                  walletId:
                    - 643f146bb13653000765c478a384a656
                name: wallet.ids
          - id: 4bbe1f5c-12e3-4648-aab1-c1dc1da4cdb5
            name: Test Rule
            status: ACTIVE
            version: 1
            adminOnly: false
            touchpointLabel: Get approval when transferring to a non enterprise whitelisted destination
            scopeLabel: Wallet
            clauses:
              - actions:
                  - name: approvals.customer.walletAdmin
                    parameters: {}
                conditions:
                  - name: transfer.destination.type
                    parameters:
                      type: nonWhitelistedAddress
            filteringConditions:
              - parameters:
                  walletId:
                    - 643f146bb13653000765c478a384a656
                name: wallet.ids
        nextBatchPrevId: 3
    PolicyRulesResultsExample1:
      summary: policy rules.
      description: A successful response with 3 policy rules.
      value:
        rules:
          - uniqueId: cb4e0a0a-2768-4024-904a-178ca6d2cd54
            id: 81d00054-72b5-4e7c-95cf-74d4f1f7d946
            name: Get final approval on custodial wallets
            status: ACTIVE
            version: 5
            adminOnly: false
            touchpointLabel: Transfer from a Segregated Wallet
            scopeLabel: Wallet
            clauses:
              - actions:
                  - name: approvals.customer.finalApproval
                    parameters:
                      userIds:
                        - 63f949ed0d96f8000718b29585ce0765
                conditions: []
            filteringConditions:
              - parameters:
                  walletType: custodial
                name: wallet.type
            locked: true
            lockType: LOCK_AFTER_DATE
            lockDate: '2023-11-13T14:49:48.830522Z'
            enterpriseId: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            lastTriggeredDate: '2023-11-13T14:49:48.830522Z'
            lastTriggeredEvaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
            createdBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            modifiedBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            lockModifiedBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            evaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
          - uniqueId: c57851e0-4cab-4d50-9dc4-3d58a1a34e34
            id: 4fa8326b-4f5f-4065-8cfc-85a08c290c49
            name: Get approval if transferring more than 2 BTC in a minute
            status: ACTIVE
            version: 1
            adminOnly: false
            touchpointLabel: Transfer from a Segregated Wallet
            scopeLabel: Wallet
            clauses:
              - actions:
                  - name: approvals.customer.walletAdmin
                    parameters: {}
                conditions:
                  - name: transfer.velocity.limit
                    parameters:
                      amount: '2000000'
                      timeWindow: '60'
                      coin: btc
            filteringConditions:
              - parameters:
                  walletId:
                    - 643f146bb13653000765c478a384a656
                name: wallet.ids
            locked: true
            lockType: PERMANENT
            enterpriseId: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            lastTriggeredDate: '2023-11-13T14:49:48.830522Z'
            lastTriggeredEvaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
            createdBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            modifiedBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            evaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
          - uniqueId: b06b4009-cbc8-4926-9984-9ed30a7b6cbe
            id: 4bbe1f5c-12e3-4648-aab1-c1dc1da4cdb5
            name: Test Rule
            status: ACTIVE
            version: 1
            adminOnly: false
            touchpointLabel: Get approval when transferring to a non whitelisted destination
            scopeLabel: Wallet
            clauses:
              - actions:
                  - name: approvals.customer.walletAdmin
                    parameters: {}
                conditions:
                  - name: transfer.destination.type
                    parameters:
                      type: nonWhitelistedAddress
            filteringConditions:
              - parameters:
                  walletId:
                    - 643f146bb13653000765c478a384a656
                name: wallet.ids
            locked: true
            lockType: PERMANENT
            enterpriseId: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            lastTriggeredDate: '2023-11-13T14:49:48.830522Z'
            lastTriggeredEvaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
            createdBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            modifiedBy: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
            evaluationId: 306258df-dcab-489e-a9fe-ff28ce9fa312
        nextBatchPrevId: 5
    ScopeTouchpointsExample:
      summary: scope Touchpoints
      description: A successful response with one Touchpoint.
      value:
        touchpoints:
          - id: 0441ea9f-cd66-4d60-a52a-471aecd3e54e
            name: wallet.segregated.transfer
            status: ACTIVE
            label: Transfer from a Segregated Wallet
            description: When transferring from a BitGo Segregated Wallet
            adminOnly: false
        page: 1
        totalPages: 1
        totalElements: 1
    ScopesExample:
      summary: scopes
      description: A successful response with one scope.
      value:
        scopes:
          - id: c8234a0f-7722-44d7-bedc-bfded7bd24a7
            name: wallet.segregated
            label: Wallet
            description: A BitGo Wallet
            conditions:
              - name: wallet.type
                label: Wallet Type
                description: Allows creating a condition based on the Wallet Type
                status: ACTIVE
                parameters:
                  - name: walletType
                    label: Type
                    description: The Wallet Type
                    type: ENUMERATED
                    required: ALWAYS
                    allowMultiple: true
                    values:
                      - value: custodial
                        label: Custodial Wallet
                        description: A custodial wallet
                      - value: hot
                        label: Hot Wallet
                        description: A hot wallet
              - name: wallet.ids
                label: Wallet Ids
                description: Allows creating a condition based on the Wallet Id
                status: ACTIVE
                parameters:
                  - name: walletId
                    label: Wallet Id
                    description: The Wallet Ids
                    type: BITGO_ID
                    required: ALWAYS
                    allowMultiple: true
                    values: []
    SolDelegationResultsExample:
      summary: Sol Delegation Results Example
      value:
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '0'
            coin: sol
            walletId: 63110fc78b108e00071df2d3c3879dd0
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '1000'
            apy: '6.5100'
            unstakeable: false
        page: 1
        totalPages: 1
        totalElements: 1
    SolStakingRequestPOSTBodyExample:
      summary: Sol Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000'
        type: STAKE
    SolStakingRequestWithTransactionsExample:
      summary: Sol Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: STAKE
        coin: sol
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            delegated: '1000000000'
            status: ACTIVE
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '1000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: CONFIRMED
            amount: '1000000000'
            transactionType: delegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000000000'
    SolStakingRequestWithoutDelegationsExample:
      summary: Sol Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: STAKE
        coin: sol
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '1000000000'
    SolStakingRequestsListResponseExample:
      summary: Sol Staking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            walletType: custodial
            type: STAKE
            coin: sol
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: string
                withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
                delegated: '1000000000'
                status: ACTIVE
                rewards: '0'
                lockedRewards: '0'
                pendingUnstake: '0'
                pendingStaking: '0'
                apy: '8.3'
                unstakingFee: '1000000'
                unstakingMin: '0'
            transactions:
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: CONFIRMED
                amount: '1000000000'
                transactionType: delegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            amount: '1000000000'
    SolStakingValidatorsResultsExample:
      summary: Solana Staking Validators Results Example
      value:
        page: 1
        totalPages: 1
        totalElements: 1
        validators:
          delegationAddress: BAGUCfvdwdioWSR8rqJKqJXHk4ZkQcUfvMLfM9QinZFY
          coin: sol
          delegated: '40026861'
          rewards: '26861'
          apy: '5.71'
          type: Unknown
    SolUnStakingRequestPOSTBodyExample:
      summary: Sol UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
    SolUnStakingRequestWithTransactionsExample:
      summary: Sol UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: UNSTAKE
        coin: sol
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            delegated: '1012000000'
            status: ACTIVE
            rewards: '12000000'
            lockedRewards: '0'
            pendingUnstake: '1012000000'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '1000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: READY
            amount: '1012'
            transactionType: undelegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
          - id: p0500adbc-55b43-5tta-9a9d-726a05bca0dr
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: WAITING
            amount: '1012000000'
            transactionType: withdraw_undelegated
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1012000000'
    SolUnStakingRequestWithoutDelegationsExample:
      summary: Sol UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: UNSTAKE
        coin: sol
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '1012000000'
    SolUnStakingRequestsListResponseExample:
      summary: Sol UnStaking Request List Response Example
      value:
        requests:
          - id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
            requestUserId: 6092e75c451052000636831deb797bd1
            enterpriseId: 1032e75c451052000436831deb797af1
            walletId: 2032e75g451052000636831abd797bd3
            withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
            walletType: custodial
            type: UNSTAKE
            coin: sol
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: NEW
            delegations:
              - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
                delegationAddress: string
                withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
                delegated: '1012000000'
                status: ACTIVE
                rewards: '12000000'
                lockedRewards: '0'
                pendingUnstake: '1012000000'
                pendingStake: '0'
                apy: '8.3'
                unstakingFee: '1000000'
                unstakingMin: '0'
            transactions:
              - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: READY
                amount: '1012'
                transactionType: undelegate
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
              - id: p0500adbc-55b43-5tta-9a9d-726a05bca0dr
                stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
                createdDate: 2022-01-10T14:32:28.000Z
                statusModifiedDate: 2022-01-10T14:32:28.000Z
                status: WAITING
                amount: '1012000000'
                transactionType: withdraw_undelegated
                delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            amount: '1012000000'
    SolWalletStakingStateAttributesExamples:
      summary: Sol Wallet Staking Attributes
      value:
        disclaimer:
          staking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 1
            stakeWarmupPeriodDesc: 3 to 6 days
            rewardPercentageRate: '2'
            rewardsCompounding: false
          unstaking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 2
            unStakeCooldownPeriodDesc: 3 to 6 days
        permission:
          staking:
            enabled: false
            disabledReason: Wallet 62fba335ff37ad00079d56a8b4fd3ebe has insufficient funds
            allowClientToUseOwnValidator: false
          unstaking:
            enabled: false
            disabledReason: Wallet 62fba335ff37ad00079d56a8b4fd3ebe doesn't have active delegation
          wallet:
            hasEnoughAdmins: true
            numberOfRequiredAdmins: 1
        spendable:
          staking:
            fee: '10000'
            max: '0'
            min: '2282880'
            netMax: '0'
            netMin: '2292880'
            isStakingDurationNeeded: false
            minStakeMore: '0'
          unstaking:
            fee: '10000'
            max: '0'
            min: '0'
            multipleDelegations: false
    StakeableCoinsResultExample:
      summary: Stakeable Coins Result Example
      value:
        coins:
          - symbol: tmatic
            baseUnit: wei
            isToken: true
            isMultiSig: true
            isTss: false
            l1Chain: gteth
          - symbol: gteth
            baseUnit: wei
            isToken: false
            isMultiSig: true
            isTss: false
        page: 1
        totalPages: 1
        totalElements: 2
    StakingClaimEventExample:
      value:
        - type: STAKING
          subtype: CLAIM
          timeEventOccurred: 2022-01-10T14:32:28.000Z
          timeEventSent: 2022-01-10T15:32:28.000Z
          source: staking-service
          asset: eth
          unit: wei
          amountDelta: '30000000000000000000'
          stakedDelta: '0'
          totalStaked: '0'
          rewardsBalance: '0'
          apy: '8.2'
          address: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          validatorAddress: ''
          delegationId: 4c8b80da-8d26-4481-83fe-5ea7f4744f2e
          txRequestId: c22769a4-731a-411e-a7fc-4a0ab87f6d5b
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: a28e44259cf048638a293e7850594e39
          txid: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
    StakingDelegateEventExample:
      value:
        - type: STAKING
          subtype: DELEGATE
          timeEventOccurred: 2022-01-10T14:32:28.000Z
          timeEventSent: 2022-01-10T15:32:28.000Z
          source: staking-service
          asset: eth
          unit: wei
          amountDelta: '-32000000000000000000'
          stakedDelta: '32000000000000000000'
          totalStaked: '32000000000000000000'
          rewardsBalance: '0'
          apy: '8.2'
          address: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          validatorAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          stakingRequestId: a28e4425-9cf0-4863-8a29-3e7850594e39
          delegationId: 4c8b80da-8d26-4481-83fe-5ea7f4744f2e
          txRequestId: c22769a4-731a-411e-a7fc-4a0ab87f6d5b
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: p28e44259cf048638a293e7850594e39
          txid: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
    StakingRewardEventExample:
      value:
        - type: STAKING
          subtype: REWARD
          timeEventOccurred: 2022-01-10T14:32:28.000Z
          timeEventSent: 2022-01-10T15:32:28.000Z
          source: staking-service
          asset: eth
          unit: wei
          amountDelta: '0'
          stakedDelta: '50000000000000000000'
          totalStaked: '32000000000000000000'
          rewardsBalance: '50000000000000000000'
          apy: '8.2'
          address: ''
          validatorAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          delegationId: 4c8b80da-8d26-4481-83fe-5ea7f4744f2e
          txRequestId: c22769a4-731a-411e-a7fc-4a0ab87f6d5b
          walletId: 48dd72485007a239fb00282ed480da1f
          uuid: q28e44259cf048638a293e7850594e39
          txid: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
    StakingSlashEventExample:
      value:
        - type: STAKING
          subtype: SLASH
          timeEventOccurred: 2022-01-10T14:32:28.000Z
          timeEventSent: 2022-01-10T15:32:28.000Z
          source: staking-service
          asset: eth
          unit: wei
          amountDelta: '0'
          stakedDelta: '-4000000000000000000'
          totalStaked: '32000000000000000000'
          rewardsBalance: '1000000000000000000'
          apy: '8.2'
          address: ''
          validatorAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          delegationId: 4c8b80da-8d26-4481-83fe-5ea7f4744f2e
          txRequestId: c22769a4-731a-411e-a7fc-4a0ab87f6d5b
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: s28e44259cf048638a293e7850594e39
          txid: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
    StakingSlashEventNegativeBalanceExample:
      value:
        - type: STAKING
          subtype: SLASH
          timeEventOccurred: 2022-01-10T14:32:28.000Z
          timeEventSent: 2022-01-10T15:32:28.000Z
          source: staking-service
          asset: eth
          unit: wei
          amountDelta: '0'
          stakedDelta: '-3000000000000000000'
          totalStaked: '32000000000000000000'
          rewardsBalance: '-2000000000000000000'
          apy: '8.2'
          address: ''
          validatorAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          delegationId: 4c8b80da-8d26-4481-83fe-5ea7f4744f2e
          txRequestId: c22769a4-731a-411e-a7fc-4a0ab87f6d5b
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: f28e4425-9cf0-4863-8a29-3e7850594e39
          txid: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
    StakingUndelegateEventExample:
      value:
        - type: STAKING
          subtype: UNDELEGATE
          timeEventOccurred: 2022-01-10T14:32:28.000Z
          timeEventSent: 2022-01-10T15:32:28.000Z
          source: staking-service
          asset: eth
          unit: wei
          amountDelta: '0'
          stakedDelta: '-30000000000000000000'
          totalStaked: '0'
          rewardsBalance: '0'
          apy: '8.2'
          address: ''
          validatorAddress: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          delegationId: 4c8b80da-8d26-4481-83fe-5ea7f4744f2e
          txRequestId: c22769a4-731a-411e-a7fc-4a0ab87f6d5b
          walletId: 48dd72485007a239fb00282ed480da1f
          idempotencyKey: v28e44259cf048638a293e7850594e39
          txid: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
    StxStakingRequestPOSTBodyExample:
      summary: STX Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000000000000000'
        type: STAKE
        subType: STACK
        duration: '100'
        btcRewardAddress: bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq
        contractName: pox-4
    StxUnStakingRequestPOSTBodyExample:
      summary: STX UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
    SuiStakingPartneredValidatorsResultsExample:
      summary: SUI Staking Partnered Validators Results Example
      value:
        page: 1
        totalPages: 1
        totalElements: 1
        validators:
          delegationAddress: '0x22b35a7481fb136e5585c43421cf8ab49d0e219e902dedc40c2778acdcc7bc9c'
          type: FIGMENT
          totalStaked: '100000000'
          reward: '300000000'
          apy: '9.999'
          commission: '0.999'
          coin: tsui
    TaoDelegationResultsExample:
      summary: Tao Delegation Results Example
      value:
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: 0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5
            withdrawalAddress: '0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c'
            delegated: '0'
            coin: tao
            walletId: 63110fc78b108e00071df2d3c3879dd0
            status: PENDING
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '1000'
            apy: '6.5100'
            unstakeable: false
        page: 1
        totalPages: 1
        totalElements: 1
    TaoStakingRequestPOSTBodyExample:
      summary: Tao Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000'
        type: STAKE
    TaoStakingRequestWithTransactionsExample:
      summary: Tao Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 5EKXEL1PnSxvBennEDin56yj5KgmcX3AW27sr1uqm9tBmKpn
        walletType: custodial
        type: STAKE
        coin: tao
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: 5EKXEL1PnSxvBennEDin56yj5KgmcX3AW27sr1uqm9tBmKpn
            delegated: '1000000000'
            status: ACTIVE
            rewards: '0'
            lockedRewards: '0'
            pendingUnstake: '0'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '1000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: CONFIRMED
            amount: '1000000000'
            transactionType: delegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000000000'
    TaoStakingRequestWithoutDelegationsExample:
      summary: Tao Staking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: STAKE
        coin: tao
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '1000000000'
    TaoUnStakingRequestPOSTBodyExample:
      summary: Tao UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
    TaoUnStakingRequestWithTransactionsExample:
      summary: Tao UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 5EKXEL1PnSxvBennEDin56yj5KgmcX3AW27sr1uqm9tBmKpn
        walletType: custodial
        type: UNSTAKE
        coin: tao
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        delegations:
          - id: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
            delegationAddress: string
            withdrawalAddress: 5EKXEL1PnSxvBennEDin56yj5KgmcX3AW27sr1uqm9tBmKpn
            delegated: '1012000000'
            status: ACTIVE
            rewards: '12000000'
            lockedRewards: '0'
            pendingUnstake: '1012000000'
            pendingStake: '0'
            apy: '8.3'
            unstakingFee: '1000000'
            unstakingMin: '0'
        transactions:
          - id: i0500adbc-55b43-5tta-9a9d-726a05bca0op
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: READY
            amount: '1012'
            transactionType: undelegate
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
          - id: p0500adbc-55b43-5tta-9a9d-726a05bca0dr
            stakingRequestId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
            createdDate: 2022-01-10T14:32:28.000Z
            statusModifiedDate: 2022-01-10T14:32:28.000Z
            status: WAITING
            amount: '1012000000'
            transactionType: withdraw_undelegated
            delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1012000000'
    TaoUnStakingRequestWithoutDelegationsExample:
      summary: Tao UnStaking Request Example
      value:
        id: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        clientId: f054adbc-26a3-4acd-8a9d-726a05bca0dr
        requestUserId: 6092e75c451052000636831deb797bd1
        enterpriseId: 1032e75c451052000436831deb797af1
        walletId: 2032e75g451052000636831abd797bd3
        withdrawalAddress: 3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i
        walletType: custodial
        type: UNSTAKE
        coin: tao
        createdDate: 2022-01-10T14:32:28.000Z
        statusModifiedDate: 2022-01-10T14:32:28.000Z
        status: NEW
        amount: '1012000000'
    TonStakingRequestPOSTBodyExample:
      summary: TON Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000000000'
        type: STAKE
        subType: MULTI_NOMINATOR_STAKE
        validator: EQCi7ER3y9j-FFY3M31JNtJuVM-04Y4lDd4pykDVyQRhlUMH
    TonUnStakingRequestPOSTBodyExample:
      summary: TON UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
    TouchpointConditionsExample:
      summary: Touchpoint Conditions
      description: A successful response with 5 Touchpoint Conditions.
      value:
        conditions:
          - name: transfer.destination.type
            label: Destination
            description: Allows creating a condition based on the type of the funds destination
            status: ACTIVE
            parameters:
              - name: type
                label: Type
                description: The type of destination this condition will match
                type: ENUMERATED
                required: ALWAYS
                allowMultiple: false
                values:
                  - value: whitelistedAddress
                    label: Whitelisted address
                    description: The destination is whitelisted
                  - value: nonWhitelistedAddress
                    label: Non-whitelisted address
                    description: The destination is not whitelisted
              - name: coin
                label: Asset
                description: The asset this condition applies to. Optional.
                type: COIN
                required: OPTIONAL
                allowMultiple: false
                values: []
          - name: transfer.initiators
            label: Transfer Initiated By
            description: Allows creating a condition based on whether the transfer initiator is a listed user
            status: ACTIVE
            parameters:
              - name: userIds
                label: User Ids
                description: The list of user ids to check the transfer initiator against.
                type: BITGO_USER_ID
                required: ALWAYS
                allowMultiple: true
                values: []
          - name: transfer.webhook
            label: Transfer Webhook
            description: Allows creating a Condition based on whether the transfer webhook post call returns a 200 status code
            status: ACTIVE
            parameters:
              - name: webhookUrl
                label: Webhook Url
                description: The webhook url to post transfer payload to
                type: FREE_FORM
                required: ALWAYS
                allowMultiple: false
                values: https://webhook.site/91561f7b-4141-4ee2-8336-e10650cd000f
              - name: coin
                label: Asset
                description: The asset this condition applies to.
                type: COIN
                required: OPTIONAL
                allowMultiple: false
                values: btc
          - name: transfer.velocity.limit
            label: Spending Limit
            description: Allows creating a condition based on the amount of coin or USD that can be spent over a period of time
            status: ACTIVE
            parameters:
              - name: amount
                label: Amount
                description: The amount that can be spend withing the time window
                type: NON_NEGATIVE_NUMBER
                required: ALWAYS
                allowMultiple: false
                values: []
              - name: timeWindow
                label: time window
                description: The period of time this condition covers, in seconds
                type: NON_NEGATIVE_NUMBER
                required: ALWAYS
                allowMultiple: false
                values: []
              - name: coin
                label: Unit
                description: The unit that the amount is denoted in, can be a coin or a fiat currency
                type: COIN_OR_USD
                required: ALWAYS
                allowMultiple: false
                values: []
              - name: scope
                label: scope
                description: Entities that will be included in the velocity calculation
                type: ENUMERATED
                required: ALWAYS
                allowMultiple: false
                values:
                  - value: wallet
                    label: Wallet
                    description: Only spending from the transferring wallet will be included
                  - value: enterprise
                    label: Enterprise
                    description: Spending from the entire transferring wallet's enterprise will be included
          - name: transfer.amount
            label: Spending limit
            description: Allows creating a condition based on the Transfer Amount
            status: ACTIVE
            parameters:
              - name: operator
                label: Comparison Operator
                description: The comparison operator to use when comparing the transfer amount with the given limit
                type: ENUMERATED
                required: ALWAYS
                allowMultiple: false
                values:
                  - value: '>'
                    label: Greater than
                    description: The transfer amount must be greater than the given limit for the condition to trigger
                  - value: '>='
                    label: Greater than or equal to
                    description: The transfer amount must be greater than or equal to the given limit for the condition to trigger
                  - value: <
                    label: Less than
                    description: The transfer amount must be less than the given limit for the condition to trigger
                  - value: <=
                    label: Less than or equal to
                    description: The transfer amount must be less than or equal to the given limit for the condition to trigger
              - name: amount
                label: The amount to compare to
                description: The transfer amount will be compared with this limit
                type: NON_NEGATIVE_NUMBER
                required: ALWAYS
                allowMultiple: false
                values: []
              - name: coin
                label: Currency
                description: This condition only applies to transfers of this currency (USD applies to all transfers)
                type: COIN_OR_USD
                required: ALWAYS
                allowMultiple: false
                values: []
    WalletStakingStateAttributesExamples:
      summary: Wallet Staking Attributes
      value:
        disclaimer:
          staking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 1
            stakeWarmupPeriodDesc: 3 to 6 days
            rewardPercentageRate: '2'
            rewardsCompounding: false
          unstaking:
            info:
              - |
                'Unstaking broadcasts 2 transactions: the transaction to unstake and the transaction to claim your reward. The network has to confirm the unstaking transaction then the claim transaction will be automatically created.'
            transactionsNeeded: 2
            unStakeCooldownPeriodDesc: 3 to 6 days
        permission:
          staking:
            enabled: true
            allowClientToUseOwnValidator: false
          unstaking:
            enabled: false
            disabledReason: Wallet 62f502fbd19a040007cae8d3fa0e6660 doesn't have active delegation
          wallet:
            hasEnoughAdmins: true
            numberOfRequiredAdmins: 1
        spendable:
          staking:
            fee: '10000'
            max: '997547864'
            min: '2282880'
            netMax: '997537864'
            netMin: '2292880'
            isStakingDurationNeeded: false
            minStakeMore: '0'
          unstaking:
            fee: '10000'
            max: '0'
            min: '0'
            multipleDelegations: false
    WctStakingRequestPOSTBodyExample:
      summary: WCT Staking Request POST Body Example
      value:
        clientId: e055adbc-66a3-4ccd-9a9d-726a05bca0cf
        amount: '1000000000000000000'
        type: STAKE
        subType: WCT_STAKE
        validator: '0x1234567890abcdef1234567890abcdef12345678'
    WctUnStakingRequestPOSTBodyExample:
      summary: WCT UnStaking Request POST Body Example
      value:
        clientId: d055adbc-66a3-4ccd-9a9d-726a05bca0cf
        delegationId: e0225adbc-66a3-4ccd-9a9d-726a05bca0cf
        type: UNSTAKE
  headers: {}
  links: {}
  parameters:
    Base:
      name: base
      in: query
      required: true
      description: The asset or currency to compare to the quote asset or currency (case insensitive).
      example: btc
      schema:
        type: string
    CreatedDateGte:
      name: createdDateGte
      in: query
      description: |
        The date and time of the earliest policy rule creation to return. The date and time must be in ISO 8601 format.
      schema:
        type: string
        format: date-time
      example: '2023-11-13T14:49:48.830522Z'
    CreatedDateLte:
      name: createdDateLte
      in: query
      description: |
        The date and time of the latest policy rule creation to return. The date and time must be in ISO 8601 format.
      schema:
        type: string
        format: date-time
      example: '2023-11-13T14:49:48.830522Z'
    End:
      name: end
      in: query
      required: false
      description: End time for the pricing data range. If not provided, defaults to the current time.
      schema:
        type: string
        format: date-time
        example: '2019-05-02T15:27:35.773Z'
    Enterprise:
      name: enterpriseId
      in: path
      description: Your Enterprise Id.
      required: true
      schema:
        type: string
      example: 63c86bf4555aba000652d5c59aff2866
    EvaluationId:
      name: evaluationId
      in: query
      description: The id of the Evaluation.
      required: false
      schema:
        type: string
      example: c8234a0f-7722-44d7-bedc-bfded7bd24a7
    EvaluationStatus:
      name: evaluationStatus
      in: query
      description: Status of the Evaluation
      required: false
      schema:
        type: string
        enum:
          - TRIGGERED
          - NOT_TRIGGERED
      example: TRIGGERED
    FilteringConditionName:
      name: filteringCondition
      in: path
      description: The name of the Filtering condition to be used when creating or updating a policy rule. Not all Touchpoint Actions are compatible with all Filtering Conditions.
      required: true
      schema:
        type: string
      example: wallet.all
    FilteringConditionParameterNameAndValue:
      name: filteringConditionParameterName
      in: query
      description: |
        You can retrieve the policy rules that match a given set of Filtering Conditions by providing the
        parameter name and value of the Filtering Conditions you are interested in. See also Filtering Conditions.
        In addition, you could add Dynamic parameter for filtering rules based on specific criteria.
        Format: <table>.<property>.parameters.<key>=<values>
        - <table>: (Required) The table name. Valid values are filteringCondition, action, or condition.
        - <property>: (Optional) The name of the property.
        - parameters: (Fixed) Indicates parameters section.
        - <key>: (Required) The key in the table's parameters column to search against.
        - <values>: (Optional) Comma-separated list of values to match.
      required: false
      schema:
        type: string
      example: |
        walletType=custodial
        filteringCondition.wallet.ids.parameters.walletId=testWalletId1,testWalletId2
        filteringCondition.wallet.type.parameters.walletType=hot,cold
        filteringCondition.wallet.all.parameters
        condition.transfer.amount.parameters.ruleId=ruleCondition1
        condition.parameters.number=1
        condition.parameters.userIds=user1,user2
        action.approvals.always.deny.parameters.actionId=ruleAction1
        action.parameters.bool=true
        action.parameters.userIds=user1,user2
    Interval:
      name: interval
      in: query
      required: true
      description: Unit of time.
      example: hour
      schema:
        type: string
        enum:
          - minute
          - hour
          - day
    Limit:
      name: limit
      in: query
      description: |
        How many policy rules to return per page of results. Default: 20, Maximum: 100.
      required: false
      schema:
        type: integer
      example: 20
    PolicyRuleId:
      name: id
      in: path
      description: Id of the policy rule.
      required: true
      schema:
        type: string
      example: c8234a0f-7722-44d7-bedc-bfded7bd24a7
    PolicyRuleIdQuery:
      name: id
      in: query
      description: Id of the policy rule.
      required: false
      schema:
        type: string
      example: c8234a0f-7722-44d7-bedc-bfded7bd24a7
    PolicyRuleName:
      name: name
      in: query
      description: |
        A string to match the names of the policy rules against.
      required: false
      schema:
        type: string
      example: My policy rule
    PolicyRuleStatus:
      name: status
      in: query
      description: Statuses of the returned policy rules, one or more may be provided.
      required: false
      schema:
        type: string
        enum:
          - ACTIVE
          - INACTIVE
          - DENIED
          - PENDING_APPROVAL
    PolicyRuleVersion:
      name: version
      in: query
      description: Version of the policy rule to return.
      required: false
      schema:
        type: number
      example: 3
    PrevId:
      name: prevId
      in: query
      description: The nextBatchPrevId returned by the last call to the same API. Used to retrieve the next page of results.
      required: false
      schema:
        type: integer
      example: 1
    Quote:
      name: quote
      in: query
      required: true
      description: The asset or currency to compare to the base asset or currency (case insensitive).
      example: eth
      schema:
        type: string
    ScopeName:
      name: scopes
      in: query
      description: |
        scopes of the returned policy rules. One or more may be provided. For example, the All Wallets scope.
        See also the List scopes API.
      required: false
      schema:
        type: string
        enum:
          - wallet.segregated
          - policies.management
      example: wallet.segregated
    Start:
      name: start
      in: query
      required: false
      description: Start time for the pricing data range. If not provided, defaults to 1 interval before to the current time.
      schema:
        type: string
        format: date-time
        example: '2019-05-02T15:27:35.773Z'
    TouchpointId:
      name: touchpointId
      in: path
      description: The id of a Touchpoint.
      required: true
      schema:
        type: string
      example: 0441ea9f-cd66-4d60-a52a-471aecd3e54e
    TouchpointName:
      name: touchpointName
      in: path
      description: The name of the Touchpoint.
      required: true
      schema:
        type: string
      example: wallet.segregated.transfer
    Touchpoints:
      name: touchpoints
      in: query
      description: The Touchpoints of the returned policy rules. One or more may be provided. For example, the Transfer from a Wallet Touchpoint. See also the List scope Touchpoints API.
      required: false
      schema:
        type: string
      example: wallet.segregated.transfer
    address:
      name: address
      in: query
      description: Filter by address string
      schema:
        $ref: '#/components/schemas/AddressString3'
    allTokens:
      name: allTokens
      schema:
        type: boolean
      in: query
      example: true
      description: Include data for all subtokens (i.e. ERC20 Tokens, Stellar Tokens)
    coin:
      name: coin
      in: query
      description: Filter by coin
      schema:
        $ref: '#/components/schemas/Coin'
    coin1:
      name: coin
      in: query
      description: Filter by coin.
      schema:
        title: Coin
        description: A cryptocurrency or token ticker symbol.
        type: string
        example: eth
    coinArray:
      name: coin
      in: query
      description: Filter by coin
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Coin'
    coinSingleOrList:
      name: coin
      in: query
      description: Filter by coin(s)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Coin'
    dateGte:
      name: dateGte
      in: query
      description: Return transfers with a `date` that is greater than or equal to the given timestamp
      schema:
        type: string
        format: date-time
    dateLt:
      name: dateLt
      in: query
      description: Return transfers with a `date` that is less than the given timestamp
      schema:
        type: string
        format: date-time
    destinationTag:
      name: destinationTag
      required: false
      in: query
      schema:
        type: string
      description: |
        Required when sending to a BitGo wallet.
    enforceMinConfirmsForChange:
      name: enforceMinConfirmsForChange
      in: query
      description: Enforces `minConfirms` on change inputs
      schema:
        type: boolean
    enterprise:
      name: enterprise
      in: query
      description: Filter by enterprise
      schema:
        $ref: '#/components/schemas/Id'
    enterpriseId:
      name: enterpriseId
      in: query
      description: Filter by enterprise
      schema:
        $ref: '#/components/schemas/Id'
    excludeSpendableBalance:
      name: excludeSpendableBalance
      schema:
        type: boolean
      in: query
      example: true
      description: |
        Skip spendable balance calculations and only include confirmed balances. If absent, defaults to false.
    expandAddressLabels:
      name: expandAddressLabels
      description: |
        If true, adds `addressLabels` to each returned pending approval associated with recipient's addresses
      in: query
      schema:
        type: boolean
    feeRate:
      name: feeRate
      in: query
      schema:
        type: integer
        minimum: 0
    height:
      name: height
      in: query
      description: The block or ledger height
      schema:
        $ref: '#/components/schemas/IntegerString'
    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 25
      description: Maximum number of results to return.  If the result set is truncated, use the `nextBatchPrevId` value to get the next batch.
    maxFeeRate:
      name: maxFeeRate
      in: query
      schema:
        type: integer
        minimum: 0
    maxValue:
      name: maxValue
      in: query
      description: Maximum value of each unspent in base units (e.g. satoshis). For doge, only string is allowed.
      schema:
        $ref: '#/components/schemas/IntegerOrIntegerString'
    minConfirms:
      name: minConfirms
      in: query
      description: Minimum number of confirmations for the collected inputs. Only applies to external unspents. Use `enforceMinConfirmsForChange` to filter change as well.
      schema:
        type: integer
        minimum: 0
    minHeight:
      name: minHeight
      in: query
      description: Minimum block height of the unspents
      schema:
        type: number
        minimum: 0
    minValue:
      name: minValue
      in: query
      description: Minimum value of each unspent in base units (e.g. satoshis). For doge, only string is allowed.
      schema:
        $ref: '#/components/schemas/IntegerOrIntegerString'
    numBlocks:
      name: numBlocks
      in: query
      schema:
        type: integer
        default: 2
        minimum: 1
        maximum: 1000
      description: |
        (BTC only) The number of blocks required to confirm a transaction. You can use `numBlocks` to estimate the fee rate by targeting confirmation within a given number of blocks. If both `feeRate` and `numBlocks` are absent, the transaction defaults to 2 blocks for confirmation.

        Note: The `maxFeeRate` limits the fee rate generated by `numBlocks`.
    organizationId:
      name: organizationId
      in: query
      description: Filter by organization
      schema:
        $ref: '#/components/schemas/Id'
    pathAddress:
      name: address
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/AddressString3'
    pathAlgorand:
      name: coin
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ConsolidationCoins'
    pathApprovalId:
      name: approvalId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    pathBitcoin:
      name: coin
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Bitcoin'
    pathCoin:
      name: coin
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Coin'
    pathCoin1:
      name: coin
      in: path
      description: The staking asset.
      required: true
      schema:
        type: string
        oneOf:
          - type: string
            enum:
              - ADA
              - AVAXP
              - BERA
              - BTC
              - DOT
              - ETH
              - MATIC
              - NEAR
              - SOL
              - STX
              - TON
              - WCT
          - type: string
    pathEnterpriseId:
      name: enterpriseId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    pathId:
      name: id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    pathLightningCoin:
      name: coin
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/LightningCoin'
    pathSequenceId:
      name: sequenceId
      in: path
      required: true
      schema:
        type: string
      description: |
        A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly.
    pathShareId:
      name: shareId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    pathTransferId:
      name: transferId
      in: path
      required: true
      description: a transfer or transaction id
      example: f5d8ee39a430901c91a5917b9f2dc19d6d1a0e9cea205b009ca73dd04470b9a5 or 585951a5df8380e0e3063e9f12345678
      schema:
        oneOf:
          - $ref: '#/components/schemas/Id'
          - $ref: '#/components/schemas/TxId'
    pathUserId:
      name: userId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    pathWalletId:
      name: walletId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    pathWalletId1:
      name: walletId
      in: path
      description: The wallet ID.
      required: true
      schema:
        $ref: '#/components/schemas/WalletId'
    pathWalletShareId:
      name: walletShareId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    pathWebhookId:
      name: webhookId
      required: true
      in: path
      schema:
        $ref: '#/components/schemas/Id'
    prevId:
      in: query
      name: prevId
      schema:
        $ref: '#/components/schemas/Id'
      description: Return the next batch of results, based on the `nextBatchPrevId` value from the previous batch.
    queryCoins:
      name: coin
      in: query
      description: Filter by one or more staking assets.
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Coin1'
    queryFederationQ:
      name: q
      in: query
      required: true
      example: test*bitgo.com
      schema:
        type: string
    queryFederationType:
      name: type
      in: query
      required: true
      example: name
      schema:
        type: string
        enum:
          - name
          - id
    queryLabel:
      name: label
      in: query
      description: The label of the wallet where the staking request was created.
      required: false
      schema:
        type: string
    queryPage:
      name: page
      in: query
      description: The page number for pagination.
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
    queryPageSize:
      name: pageSize
      in: query
      description: The page size for pagination.
      required: false
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
    querySortByCreatedDate:
      name: sortBy
      in: query
      description: Sort By field
      required: false
      schema:
        type: string
        default: '-createdDate'
        enum:
          - '-createdDate'
          - createdDate
    querySortByDate:
      name: sortBy
      in: query
      description: Sort By field
      required: false
      schema:
        type: string
        default: '-date'
        enum:
          - '-date'
          - date
    reverse:
      name: reverse
      in: query
      description: True, if returning results in reverse order.
      schema:
        type: boolean
    scope:
      name: scopeId
      in: path
      description: The id of the scope.
      required: true
      schema:
        type: string
      example: c8234a0f-7722-44d7-bedc-bfded7bd24a7
    searchLabelWallets:
      name: searchLabel
      in: query
      example: My very first wallet
      description: Query for `Wallets` with a label containing this string
      schema:
        type: string
    showAllWallets:
      name: showAllWallets
      description: Include wallets that have `deleted` or `creationFailed` set to **true**
      in: query
      schema:
        type: boolean
    sortBy:
      name: sortBy
      in: query
      description: Customize sort order for the transfers by specifying the sort key.
      schema:
        type: string
        enum:
          - heightId
          - id
    state:
      name: state
      description: |
        The status of the transfer.
          • `confirmed` indicates the transaction is confirmed on chain.
          • `failed` indicates the transaction failed. `initialized` is the first state of a transaction and indicates the transaction is initialized.
          • `pendingApproval` indicates the transaction is initialized and pending approval.
          • `rejected` indicates the transaction was rejected by an approver.
          • `removed` indicates the transaction was reorganized from the mempool (it's still possible recieve confirmation in another block).
          • `replaced` indicates the transaction was replaced with a new transaction with higher fees.
          • `signed` indicates the transaction is signed and pending on-chain confirmation.
          • `unconfirmed` indicates the transaction is pending on-chain confirmation.
      in: query
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TransferState'
    transactionIdx:
      name: transactionIdx
      in: path
      required: true
      schema:
        type: string
    txRequestSortDirection:
      name: sortDirection
      in: query
      description: Sorts order by field in specified sort direction, default ascending.
      schema:
        type: string
        enum:
          - ASC
          - DESC
    type:
      name: type
      in: query
      description: Filter on sending or receiving `Transfers`
      schema:
        type: string
        enum:
          - send
          - receive
    unspentIds:
      name: unspentIds
      in: query
      schema:
        type: array
        minItems: 1
        items:
          $ref: '#/components/schemas/UnspentId'
    valueGte:
      name: valueGte
      in: query
      description: Return transfers with a `value` that is greater than or equal to the given number
      schema:
        type: integer
    valueLt:
      name: valueLt
      in: query
      description: Return transfers with a `value` that is less than the given number
      schema:
        type: integer
    walletId:
      name: walletId
      description: Filter by wallet
      in: query
      schema:
        $ref: '#/components/schemas/Id'
  requestBodies: {}
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/GeneralError'
              - $ref: '#/components/schemas/ValidationError'
          example:
            code: BadRequest
            message: Bad Request
            status: 400
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          example:
            code: AccessDenied
            message: License not added for enterprise
            status: 403
    Forbidden1:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          example:
            code: AccessDenied
            message: Access is denied
            status: 403
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          example:
            code: NotFound
            message: Touchpoint not found
            status: 404
    NotFound1:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          example:
            code: NotFound
            message: The specified resource was not found
            status: 404
    ServerError:
      description: Server Error - Transient error please try again
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          example:
            code: Internal_Server_Error
            message: Database is down
            status: 500
    ServerError1:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          example:
            code: InternalServerError
            message: An unexpected error occurred
            status: 500
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          example:
            code: Unauthorized
            message: Unauthorized
            status: 401
  schemas:
    AccelerationIntent:
      title: AccelerationIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - acceleration
            txid:
              type: string
          required:
            - intentType
            - txid
        - $ref: '#/components/schemas/BaseIntent'
    AccessTokenResponse:
      title: AccessTokenResponse
      type: object
      properties:
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        isExtensible:
          type: boolean
        bitgoAdminPermissions:
          type: array
          items:
            type: string
        client:
          type: string
        created:
          type: string
          format: date-time
          title: ISO Date String
        enterprise:
          type: string
        expires:
          type: string
          format: date-time
          title: ISO Date String
        extensionAddress:
          type: string
        ip:
          type: string
          description: IP address of the client that requested this access token
          example: 127.0.0.1
          format: ipv4
        ipRestrict:
          type: array
          items:
            type: string
            description: IP addresses of clients that are allowed to use this token
        label:
          type: string
        origin:
          type: string
          description: BitGo environment that issued this token
          example: test.bitgo.com
        token:
          type: string
        scope:
          type: array
          example:
            - crypto_compare
            - user_manage
            - openid
            - profile
            - wallet_create
            - wallet_manage_all
            - wallet_approve_all
            - wallet_spend_all
            - wallet_edit_all
            - wallet_view_all
          items:
            type: string
            description: Session permissions
        unlock:
          allOf:
            - type: object
              properties:
                spendingLimits:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      txCount:
                        type: number
                        description: The transaction count limit for the coin
                      txValue:
                        type: number
                        description: The transaction value limit for the coin
                      txValueLimit:
                        type: number
                        description: The maximum transaction value limit for the coin
                allErc20TokensLimit:
                  $ref: '#/components/schemas/AllErc20TokenLimit'
            - $ref: '#/components/schemas/Unlock'
        user:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        oauth:
          type: object
          properties:
            oauthRequired:
              type: boolean
            expires:
              type: string
              format: date-time
              title: ISO Date String
      required:
        - id
        - isExtensible
    Account:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      example:
        id: f230fdebfa084ffebc7e00515f54603f
        name: Uncle MoneyPenny's Trading Wallet
    AccountBalance:
      required:
        - currency
        - balance
        - heldBalance
        - tradableBalance
        - withdrawableBalance
      type: object
      properties:
        currency:
          type: string
          description: Currency symbol
        balance:
          type: string
          format: decimal
          description: The total balance in the account
        heldBalance:
          type: string
          format: decimal
          description: The total balance reserved for some purpose, e.g. a pending withdrawal
        tradableBalance:
          type: string
          format: decimal
          description: The total balance available for trading
        withdrawableBalance:
          type: string
          format: decimal
          description: The total balance available for withdrawal
      example:
        currencyId: 6016e0a9-545a-45fb-8370-caab1680956a
        currency: BTC
        balance: '100.0'
        heldBalance: '10.0'
        tradableBalance: '90.0'
    AccountBalanceRecord:
      title: AccountBalanceRecord
      type: object
      additionalProperties:
        type: object
        properties:
          available:
            type: string
            description: Amount of the specified currency available in the specified account. The amount is represented as a non-negative integer string in the currency's base units.
          held:
            type: string
            description: Amount of the specified currency held (encumbered) in the specified account. The amount is represented as a non-negative integer string in the currency's base units.
        required:
          - available
          - held
    AccountBalances:
      type: array
      items:
        $ref: '#/components/schemas/AccountBalance'
    AccountBaseBuildOptions:
      title: AccountBaseBuildOptions
      type: object
      properties:
        nonce:
          oneOf:
            - type: string
            - type: number
    AccountBaseBuildOptions2:
      type: object
      properties:
        nonce:
          type: string
    AccountBaseConsolidateIntent:
      title: AccountBaseConsolidateIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - consolidate
            receiveAddress:
              type: string
            senderAddressIndex:
              $ref: '#/components/schemas/optionalNumber'
            consolidateId:
              $ref: '#/components/schemas/optionalString'
            recipients:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      tokenData:
                        $ref: '#/components/schemas/TokenData'
                  - $ref: '#/components/schemas/RecipientEntry'
            keepAlive:
              $ref: '#/components/schemas/optionalBoolean'
          required:
            - intentType
            - receiveAddress
        - $ref: '#/components/schemas/AccountBaseBuildOptions'
    AccountBaseCreateAccountIntent:
      title: AccountBaseCreateAccountIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - createAccount
            name:
              $ref: '#/components/schemas/optionalString'
          required:
            - intentType
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/AccountBaseBuildOptions'
    AccountType:
      title: AccountType
      type: string
      enum:
        - individual
        - entity
    Accounts:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    AchAccountResponseProps:
      title: AchAccountResponseProps
      type: object
      properties:
        type:
          type: string
          enum:
            - ach
        routingNumber:
          $ref: '#/components/schemas/RoutingNumberString'
        accountType:
          $ref: '#/components/schemas/OptionalAccountType'
      required:
        - type
        - routingNumber
        - accountType
    AchBankAccountRequest:
      title: AchBankAccountRequest
      description: Request schema for creating an ACH bank account
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - ach
              description: Must be 'ach' for ACH accounts
            routingNumber:
              type: string
              description: Routing number for the ACH account
          required:
            - type
            - routingNumber
        - $ref: '#/components/schemas/BankAccountRequest1'
    AchBankAccountResponse:
      title: AchBankAccountResponse
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/AchAccountResponseProps'
        - $ref: '#/components/schemas/BankAccountResponseProps'
    ActionType:
      title: ActionType
      type: string
      enum:
        - deny
        - getApproval
        - getEnterpriseUserApproval
        - getUserRoleApproval
        - getAnyApproval
        - getFinalApproval
        - getVideoApproval
        - getIdVerification
        - verifyWalletRebalance
        - getCustodianApproval
        - getCustodialSignature
        - triggerWebhookNotification
        - performLivenessVerification
        - recommendBackingWalletRouting
        - getManualTrustReview
        - getManualSupportReview
        - getVideoApprovalFromSupport
    Actions:
      type: object
      description: |
        Wrapper object for a list of Actions. Not paginated.
      required:
        - actions
      properties:
        actions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/AlwaysDenyAction'
              - $ref: '#/components/schemas/WalletAdminAction'
              - $ref: '#/components/schemas/FinalApprovalAction'
              - $ref: '#/components/schemas/EnterpriseAdminAction'
              - $ref: '#/components/schemas/EnterpriseUserAction'
    ActiveDateRange:
      title: ActiveDateRange
      type: object
      properties:
        startDate:
          oneOf:
            - type: string
              format: date-time
              title: ISO Date String
            - type: string
              format: date
              title: Date String
          description: ISO 8601 Datetime (example at https://datatracker.ietf.org/doc/html/rfc3339#section-5.8). If present, will use as the start date of a new auditable item. If not present, will use the current date to create a new auditable item. Start date is inclusive, i.e. we will start billing/functionality at this instant and afterwards.
        startReason:
          type: string
          description: An optional note describing the reason the auditable item was added/created.
        id:
          type: string
          description: Unique identifier for the date range.
        endDate:
          nullable: true
          oneOf:
            - type: string
              format: date-time
              title: ISO Date String
            - type: string
              format: date
              title: Date String
          description: ISO 8601 Datetime (example at https://datatracker.ietf.org/doc/html/rfc3339#section-5.8). If present, will use as the end date of a new auditable item. If not present, we will set the endDate to null, and we will assume an indefinite range. endDate is exclusive, i.e. we will end billing/functionality up to but not at this particular time.
        endReason:
          type: string
          description: An optional note describing the reason the auditable item was ended.
      required:
        - startDate
        - startReason
    AdaConsolidateIntent:
      title: ADA Consolidate Intent
      allOf:
        - type: object
          properties:
            unspents:
              $ref: '#/components/schemas/optionalStringArray'
        - $ref: '#/components/schemas/AccountBaseConsolidateIntent'
    AdaPaymentIntent:
      title: ADA Payment Intent
      allOf:
        - type: object
          properties:
            unspents:
              $ref: '#/components/schemas/optionalStringArray'
          required:
            - unspents
        - $ref: '#/components/schemas/PaymentIntent'
    AdaStakeClaimRewardsIntent:
      title: ADA Stake Claim Rewards Intent
      allOf:
        - $ref: '#/components/schemas/StakeClaimRewardsIntent'
    AdaStakeIntent:
      title: ADA Stake Intent
      allOf:
        - type: object
          properties:
            poolKeyHash:
              type: string
            dRepId:
              type: string
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
          required:
            - poolKeyHash
            - dRepId
        - $ref: '#/components/schemas/StakeIntent'
    AdaStakeIntent1:
      title: Ada Stake
      allOf:
        - $ref: '#/components/schemas/StakeIntent2'
        - type: object
          properties:
            poolKeyHash:
              type: string
              description: |
                The pool key hash to which the coins will be delegated to.
          required:
            - poolKeyHash
    AdaStakingDelegation:
      title: ADA
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
      properties:
        rewardAddress:
          description: The reward address for staking rewards.
          type: string
        dRepId:
          description: The delegated representative ID.
          type: string
        isVoteDelegationRequest:
          description: Whether this is a vote delegation request.
          type: boolean
    AdaStakingRequest:
      title: ADA
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/AdaStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/StakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
        rewardAddress:
          description: The reward address for staking rewards.
          type: string
        dRepId:
          description: The delegated representative ID.
          type: string
        isVoteDelegationRequest:
          description: Whether this is a vote delegation request.
          type: boolean
    AdaStakingRequestPOSTBody:
      title: ADA stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '10000000000'
        type:
          description: Staking Request type = 'STAKE'.
          type: string
          example: STAKE
        validator:
          description: The validator address or other identifier.
          type: string
        rewardAddress:
          description: The reward address for staking rewards.
          type: string
        dRepId:
          description: The delegated representative ID.
          type: string
        isVoteDelegationRequest:
          description: Whether this is a vote delegation request.
          type: boolean
      required:
        - amount
        - type
    AdaUnStakingRequestPOSTBody:
      title: ADA unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
        amount:
          description: Amount to unstake in base units.
          type: string
          example: '10000000000'
      required:
        - type
        - delegationId
    AdaUnstakeIntent:
      title: ADA Unstake Intent
      allOf:
        - type: object
          properties:
            poolKeyHash:
              type: string
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
          required:
            - poolKeyHash
        - $ref: '#/components/schemas/UnstakeIntent'
    AdaVoteDelegationIntent:
      title: ADA Vote Delegation Intent
      allOf:
        - type: object
          properties:
            dRepId:
              type: string
          required:
            - dRepId
        - $ref: '#/components/schemas/VoteDelegationIntent'
    AdaWallet:
      title: Ada Wallet
      type: object
      properties:
        rootAddress:
          type: string
        addressCount:
          type: string
        pendingChainInitialization:
          type: boolean
        rewardAddress:
          type: string
        lastChainIndex:
          type: object
          additionalProperties:
            type: number
      required:
        - rootAddress
        - addressCount
        - pendingChainInitialization
        - rewardAddress
    AddUserToOrganizationEnterpriseResponseC:
      title: AddUserToOrganizationEnterpriseResponseC
      type: object
      properties:
        userId:
          type: string
          minLength: 1
      required:
        - userId
    AdditionalEnterpriseInfo:
      title: AdditionalEnterpriseInfo
      type: object
      properties:
        contact:
          $ref: '#/components/schemas/GeographicAddress'
    Address:
      title: Address
      type: object
      properties:
        address:
          $ref: '#/components/schemas/optionalString'
        option:
          $ref: '#/components/schemas/optionalUnknownObject'
    Address1:
      title: Address
      type: object
      properties:
        address:
          $ref: '#/components/schemas/optionalString'
        option:
          $ref: '#/components/schemas/optionalUnknownObject'
    Address2:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: platform public id for an address
        address:
          $ref: '#/components/schemas/AddressString3'
        chain:
          $ref: '#/components/schemas/Chain'
        index:
          type: integer
        coin:
          type: string
        lastNonce:
          type: integer
          default: -1
        wallet:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: The wallet which contains this address
        coinSpecific:
          type: object
          description: Properties which are specific to certain coin types
          properties:
            xlm:
              $ref: '#/components/schemas/AddressCoinSpecificXlm'
            txlm:
              $ref: '#/components/schemas/AddressCoinSpecificXlm'
        balance:
          allOf:
            - type: object
            - $ref: '#/components/schemas/AddressBalance'
          description: Balance of the address. In case of Eth and Celo, if returnBalancesForToken is passed with includeBalances, then it will return token balance in the address object. This field will be present only when `includeBalances` query param is passed as true.
        label:
          $ref: '#/components/schemas/AddressLabel'
        addressType:
          $ref: '#/components/schemas/AddressType'
    AddressBalance:
      type: object
      properties:
        updated:
          type: string
          description: The last time a transaction affected the balance of this address
          format: date-time
        balance:
          type: integer
          description: The cleared balance of the address
          example: 50000
        balanceString:
          type: string
          description: String representation of `balance`. Guaranteed to not lose precision.
          example: '50000'
        totalReceived:
          type: integer
          description: The total amount received on this address (in the chain's base unit)
        totalSent:
          type: integer
          description: The total amount send from this address (in the chain's base unit)
        confirmedBalanceString:
          type: string
          description: |
            The total balance of confirmed transactions for the address (in the chain's base unit).
            Guaranteed to not lose precision.
          example: '40000'
        spendableBalanceString:
          type: string
          description: |
            The total balance of the address (in the chain's base unit) which may
            be used as inputs for creating new transactions in string representation.
            Guaranteed to not lose precision.
          example: '40000'
    AddressChain:
      title: AddressChain
      type: number
      enum:
        - 0
        - 1
        - 10
        - 11
        - 20
        - 21
        - 30
        - 31
        - 40
        - 41
    AddressCoinSpecificXlm:
      type: object
      properties:
        memoId:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
            - example: '1'
          description: Latest memo id generated for the wallet
        rootAddress:
          type: string
          description: Root address of the wallet
          example: GCTTCPH4IIDK7P72FFAEJ3ZFN6WDHJH6GGMRPHPM56ZWGIQ7B3XTIJAM
    AddressLabel:
      type: string
      nullable: true
      example: Bob's Hot Wallet Address
      maxLength: 250
      description: A human-readable label for the address.
    AddressLabelString:
      title: AddressLabelString
      type: string
      description: A human-readable label for the address
      example: Bob's Hot Wallet Address
      maxLength: 250
    AddressListCondition:
      title: AddressListCondition
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
        metaData:
          type: object
          additionalProperties:
            type: object
            additionalProperties: {}
      required:
        - addresses
        - metaData
    AddressListRuleUpdateCondition:
      title: AddressListRuleUpdateCondition
      type: object
      properties:
        add:
          type: string
        remove:
          type: string
        metaData:
          type: object
          additionalProperties:
            type: object
            additionalProperties: {}
    AddressOptions:
      title: AddressOptions
      allOf:
        - type: object
          properties:
            label:
              type: string
              minLength: 1
            required:
              type: boolean
            type:
              type: string
              enum:
                - text
                - dropdown
            placeholder:
              type: string
              minLength: 1
          required:
            - label
            - required
            - type
        - $ref: '#/components/schemas/AddressType1'
    AddressProofResult:
      title: AddressProofResult
      type: object
      description: Proof of address ownership
      properties:
        iou:
          type: boolean
          description: True if this is an IOU
        address:
          type: string
          description: The address
        signature:
          type: string
          description: The proof signature
        prefix:
          type: string
          description: A 64-character random string used to generate the proof
        chain:
          allOf:
            - $ref: '#/components/schemas/ProofChain'
          description: The coin name ('BITCOIN' or 'ETHEREUM')
        proofType:
          allOf:
            - $ref: '#/components/schemas/ProofType'
          description: The type of proof
        auxProofData:
          type: array
          items:
            type: object
            properties:
              type:
                allOf:
                  - $ref: '#/components/schemas/AuxProofType'
                description: The type of data
              data:
                type: object
                properties:
                  script:
                    type: string
                    description: The REDEEM_SCRIPT or WITNESS_SCRIPT associated with the address
                  nonce:
                    type: string
                  salt:
                    type: string
                  init_code_hash:
                    type: string
            required:
              - type
              - data
      required:
        - iou
    AddressQueryResult:
      title: AddressQueryResult
      type: object
      properties:
        coin:
          $ref: '#/components/schemas/CoinString'
        pendingAddressCount:
          type: number
          description: Total number of addresses pending on-chain initialization on this wallet **Note:** for wallets with many addresses (100,000 or more), this property may be omitted for performance reasons. If the pending address count is needed for a large wallet, the `includeTotalAddressCount` query parameter can be used to force an address count to be returned with the initial page of addresses.
        totalAddressCount:
          type: number
          description: Total number of addresses which match the provided query parameters. **Note:** for wallets with many addresses (100,000 or more), this property may be omitted for performance reasons. If the total address count is needed for a large wallet, the `includeTotalAddressCount` query parameter can be used to force an address count to be returned with the initial page of addresses.
        addresses:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  chain:
                    $ref: '#/components/schemas/AddressChain'
                  coin:
                    $ref: '#/components/schemas/CoinString'
                  index:
                    type: number
                  wallet:
                    type: string
                required:
                  - chain
                  - coin
                  - index
                  - wallet
              - $ref: '#/components/schemas/BaseWalletAddress'
        nextBatchPrevId:
          type: string
          description: When a result set is truncated, this field returns the id of the last object in the previous batch.  To get the next batch of results, pass this value via the `prevId` query parameter.
          example: 585951a5df8380e0e3063e9f
          format: uuid
        count:
          type: number
          description: Total number of addresses returned in this response
      required:
        - coin
    AddressString:
      title: AddressString
      type: string
      example: 2MvrwRYBAuRtPTiZ5MyKg42Ke55W3fZJfZS
      maxLength: 250
    AddressString3:
      title: Address
      type: string
      example: 2MvrwRYBAuRtPTiZ5MyKg42Ke55W3fZJfZS
      maxLength: 250
    AddressSubdocument:
      title: AddressSubdocument
      oneOf:
        - $ref: '#/components/schemas/AlgorandAddress'
        - $ref: '#/components/schemas/AtomAddress'
        - $ref: '#/components/schemas/AvaxPAddress'
        - $ref: '#/components/schemas/UtxoAddress'
        - $ref: '#/components/schemas/BitcoinCashAddress'
        - $ref: '#/components/schemas/CasperAddress'
        - $ref: '#/components/schemas/DotAddress'
        - $ref: '#/components/schemas/EosAddress'
        - $ref: '#/components/schemas/EthereumAddress'
        - $ref: '#/components/schemas/Ethereum2Address'
        - $ref: '#/components/schemas/FiatAddress'
        - $ref: '#/components/schemas/HederaAddress'
        - $ref: '#/components/schemas/OffchainAddressSubdocument'
        - $ref: '#/components/schemas/SolAddress'
        - $ref: '#/components/schemas/StacksAddress'
        - $ref: '#/components/schemas/StellarAddress'
        - $ref: '#/components/schemas/TestcoinAddress'
        - $ref: '#/components/schemas/TezosAddress'
        - $ref: '#/components/schemas/TronAddress'
        - $ref: '#/components/schemas/XRPAddress'
        - $ref: '#/components/schemas/TonAddress'
    AddressType:
      type: string
      example: p2sh
      enum:
        - p2sh
        - p2shP2wsh
        - p2wsh
        - p2tr
        - p2trMusig2
    AddressType1:
      title: AddressType
      oneOf:
        - type: object
          properties:
            maxLength:
              type: number
            type:
              type: string
              enum:
                - text
          required:
            - maxLength
            - type
        - type: object
          properties:
            options:
              type: object
              additionalProperties:
                type: string
            type:
              type: string
              enum:
                - dropdown
          required:
            - options
            - type
    AddressWithBalanceQueryResult:
      title: AddressWithBalanceQueryResult
      type: object
      description: Represents the result of a query for addresses with balances. This structure contains the details of a set of addresses, their associated balances, and pagination information about the query results.
      properties:
        coin:
          type: string
          description: The coin associated with the address balances
          example: trx
        page:
          type: number
          description: The current page number
        totalAddressCount:
          type: number
          description: Total number of addresses present
        totalPages:
          type: number
          description: Total number of pages available for pagination
        addresses:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  chain:
                    $ref: '#/components/schemas/AddressChain'
                  coin:
                    $ref: '#/components/schemas/CoinString'
                  index:
                    type: number
                  wallet:
                    type: string
                required:
                  - chain
                  - coin
                  - index
                  - wallet
              - $ref: '#/components/schemas/BaseWalletAddress'
            description: List of addresses with their balances and other fields
        message:
          type: string
          description: Optional message from the response
        count:
          type: number
          description: Count of the addresses in the current response
      required:
        - coin
    AdvancedListCondition:
      title: AdvancedListCondition
      type: object
      properties:
        entries:
          type: array
          items:
            type: object
            properties:
              item:
                type: string
                description: Either a valid address or a wallet, enterprise, or organization id. Must be unique in this whitelist.
              metaData:
                type: object
                additionalProperties: {}
                description: Any data about this entry that is not used to determine when to enforce the policy
              type:
                allOf:
                  - $ref: '#/components/schemas/AdvancedListType'
                description: the kind of resource a list rule entry refers to
              verificationState:
                type: string
                enum:
                  - unverified
                  - verified
            required:
              - item
              - type
            description: Entries specifying which addresses/ wallets/ enterprises are on the whitelist
      required:
        - entries
    AdvancedListRuleEntry:
      title: AdvancedListRuleEntry
      type: object
      properties:
        item:
          type: string
          description: Either a valid address or a wallet, enterprise, or organization id. Must be unique in this whitelist.
        metaData:
          type: object
          additionalProperties: {}
          description: Any data about this entry that is not used to determine when to enforce the policy
        type:
          allOf:
            - $ref: '#/components/schemas/AdvancedListType'
          description: the kind of resource a list rule entry refers to
        verificationState:
          type: string
          enum:
            - unverified
            - verified
      required:
        - item
        - type
    AdvancedListRuleEntry1:
      title: Advanced whitelist rule entry
      type: object
      properties:
        item:
          allOf:
            - oneOf:
                - $ref: '#/components/schemas/AddressString3'
                - $ref: '#/components/schemas/Id'
          description: A valid blockchain address, wallet ID, enterprise ID, or organization ID. Must be unique in this whitelist.
        metaData:
          type: object
          description: Any data about this entry that is not used to determine when to enforce the policy
          properties:
            label:
              type: string
              description: A client-specified label for this entry. Label must be unique or not set.
            owner:
              type: string
              description: The legal owner of the address, wallet, enterprise, or organization.
              example: Legal Owner LLC
            address:
              type: string
              description: The address of the receiver wallet if the whitelist is of type 'walletId'.
          additionalProperties: true
        type:
          $ref: '#/components/schemas/ListRuleEntryType'
      required:
        - item
        - type
    AdvancedListRuleUpdateCondition:
      title: AdvancedListRuleUpdateCondition
      type: object
      properties:
        add:
          $ref: '#/components/schemas/AdvancedListRuleEntry'
        remove:
          type: object
          properties:
            item:
              type: string
            type:
              type: string
              enum:
                - address
                - enterpriseId
                - walletId
                - organizationId
          required:
            - item
        verifyItems:
          type: object
          properties:
            items:
              type: array
              items:
                type: string
          required:
            - items
    AdvancedListType:
      title: AdvancedListType
      type: string
      enum:
        - address
        - enterpriseId
        - walletId
        - organizationId
    AggregatorSourceType:
      title: AggregatorSourceType
      type: string
      enum:
        - bitcoinBuilder
        - ftx
        - ftx-retail
        - ftx-bahamas
        - ftx-bahamas-retail
        - sofi
        - sofiDocuSignPendingDeprecation
        - bitcoinWell
        - lucid
        - wlf
        - walrus
        - mtgox
        - landingPageReferral
        - caas
    Agreements:
      title: Agreements
      type: object
      properties:
        patriotAct:
          type: number
        termsOfUse:
          type: number
        patriotActAcceptanceDate:
          type: string
          format: date-time
          title: ISO Date String
        termsOfUseAcceptanceDate:
          type: string
          format: date-time
          title: ISO Date String
      required:
        - patriotAct
        - termsOfUse
    AlgorandAddress:
      title: Algorand Address
      type: object
      properties:
        rootAddress:
          type: string
        trustedTokens:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TrustedTokenState'
              - $ref: '#/components/schemas/Token'
        addressVersion:
          type: number
        threshold:
          type: number
        bitgoKey: {}
        bitgoPubKey:
          type: string
      required:
        - rootAddress
    AlgorandWallet:
      title: Algorand Wallet
      type: object
      properties:
        addressVersion:
          type: number
        rootAddress:
          type: string
        trustedTokens:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TrustedTokenState'
              - $ref: '#/components/schemas/Token'
      required:
        - addressVersion
        - rootAddress
    AllErc20TokenLimit:
      title: AllErc20TokenLimit
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if the limit is enabled for all ERC20 tokens
        txCount:
          type: number
          description: The transaction count limit for all ERC20 tokens
        txValue:
          type: string
          description: The transaction value limit for all ERC20 tokens
        txValueLimitInSmallUnits:
          type: string
          description: The transaction value limit in small units for all ERC20 tokens
        maxLimit:
          type: boolean
          description: Indicates if the maximum limit is enabled
      required:
        - enabled
        - txCount
        - txValue
    AllWalletsScope:
      type: object
      description: |
        A policy rule scope. For example the All Wallets scope.
      required:
        - id
        - name
        - label
        - description
        - conditions
      properties:
        id:
          type: string
          description: Unique id of the scope. A UUID.
          example: 306258df-dcab-489e-a9fe-ff28ce9fa312
        name:
          type: string
          description: Name of the scope.
          enum:
            - wallet.segregated
          example: wallet.segregated
        label:
          type: string
          description: A label for the scope which can be shown to an end user.
          example: Wallet
        description:
          type: string
          description: A description for the scope which can be shown to an end user.
          example: A BitGo Wallet
        conditions:
          type: array
          description: A list of Filtering Conditions the scope supports. For example the Wallet Type Filtering condition.
          items:
            anyOf:
              - $ref: '#/components/schemas/WalletTypeCondition'
              - $ref: '#/components/schemas/WalletIdsCondition'
              - $ref: '#/components/schemas/WalletAllCondition'
    AllocationStatus:
      title: AllocationStatus
      type: string
      enum:
        - cleared
        - released
        - reserved
    AllocationType:
      title: AllocationType
      type: string
      enum:
        - allocation
        - deallocation
    AlwaysDenyAction:
      title: Automatically reject
      type: object
      description: Automatically denies a transfer.
      required:
        - name
        - label
        - description
        - status
        - adminOnly
      properties:
        name:
          type: string
          description: The name of the action.
          enum:
            - approvals.always.deny
          example: approvals.always.deny
        label:
          type: string
          description: A label for the action which can be shown to an end user.
          example: Deny
        description:
          type: string
          description: A description for the action which can be shown to an end user.
          example: Automatically reject
        status:
          type: string
          description: |
            Status of the action. Indicates if the Actions is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The action is available for use.
            * `INACTIVE` - The action is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        adminOnly:
          type: boolean
          description: true, if this is an internal action, false otherwise.
          example: false
    AlwaysDenyActionRequest:
      title: Automatically reject
      type: object
      description: Automatically reject.
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.always.deny
          example: approvals.always.deny
    Amount:
      title: Amount
      type: object
      properties:
        value:
          type: string
        symbol:
          type: string
      required:
        - value
        - symbol
    Amount1:
      title: Amount
      type: object
      properties:
        value:
          type: string
        symbol:
          type: string
      required:
        - value
        - symbol
    Amount2:
      type: object
      properties:
        value:
          type: string
          description: The value should be a valid number.
          example: '100'
        symbol:
          type: string
          description: The coin or token the value is referring to.
          example: usdc
      required:
        - value
        - symbol
    Amount3:
      type: object
      required:
        - quantity
        - currency
      properties:
        quantity:
          type: string
          format: decimal
          description: The specified quantity.
        currency:
          type: string
          description: The specified quantity currency.
      example:
        quantity: '100.0'
        currency: USD
    AmountConditionParameter:
      title: Amount
      type: object
      description: The amount incoming transfers will be compared with.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - amount
          example: amount
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The amount to compare to
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The transfer amount will be compared with this limit
        type:
          type: string
          description: The type of acceptable values for this condition parameter.
          enum:
            - NON_NEGATIVE_NUMBER
          example: NON_NEGATIVE_NUMBER
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
    AnchorType:
      title: AnchorType
      type: string
      enum:
        - policyRuleId
        - settlementId
    AnnotatedTransfer:
      allOf:
        - $ref: '#/components/schemas/Transfer'
        - type: object
          properties:
            confirmations:
              type: integer
              description: The number of blocks that have been confirmed since this Transfer's block was confirmed
            entries:
              type: array
              items:
                type: object
                properties:
                  label:
                    type: string
                    description: If this address was labeled by the user, this is the label
    AnnotatedTransferWithInputsOutputs:
      allOf:
        - $ref: '#/components/schemas/AnnotatedTransfer'
        - type: object
          properties:
            inputs:
              type: array
              description: If this is a Transfer on a UTXO coin, the array of inputs
              items:
                $ref: '#/components/schemas/Unspent'
            outputs:
              type: array
              description: If this is a Transfer on a UTXO coin, the array of outputs
              items:
                $ref: '#/components/schemas/Unspent'
    PlatformError:
      title: Api Error
      allOf:
        - type: object
          properties:
            name:
              type: string
              description: Error code
            context:
              type: object
              additionalProperties: {}
              description: Properties that apply to a specific error name
          required:
            - context
        - $ref: '#/components/schemas/PlatformErrorNoName'
    PlatformError2:
      title: PlatformError
      allOf:
        - type: object
          properties:
            name:
              type: string
            context:
              type: object
              additionalProperties: {}
            status:
              type: number
            additionalDetails:
              type: object
              properties:
                retryAfter:
                  type: number
              required:
                - retryAfter
          required:
            - context
        - $ref: '#/components/schemas/PlatformErrorNoName2'
    PlatformError3:
      title: API error
      allOf:
        - $ref: '#/components/schemas/PlatformErrorNoName3'
        - properties:
            context:
              type: object
              description: Properties that apply to a specific error name
            name:
              type: string
              description: Error code
          required:
            - name
    PlatformErrorNoName:
      title: PlatformErrorNoName
      type: object
      properties:
        error:
          type: string
          description: Human-readable error message
        requestId:
          type: string
          description: Client request id
      required:
        - error
        - requestId
    PlatformErrorNoName2:
      title: PlatformErrorNoName
      type: object
      properties:
        error:
          type: string
        requestId:
          type: string
      required:
        - error
        - requestId
    PlatformErrorNoName3:
      type: object
      properties:
        error:
          type: string
          description: Human-readable error message
        requestId:
          type: string
          description: Client request id
      required:
        - error
        - requestId
    ApiKeyAndSecretConnectionKey:
      title: ApiKeyAndSecretConnectionKey
      type: object
      properties:
        schema:
          type: string
          enum:
            - apiKeyAndSecret
        apiKey:
          type: string
          minLength: 1
        apiSecret:
          type: string
          minLength: 1
      required:
        - schema
        - apiKey
        - apiSecret
    ApiRuleType:
      title: ApiRuleType
      type: string
      enum:
        - advancedWhitelist
        - coinAddressWhitelist
        - coinAddressBlacklist
    ApprovalAction:
      title: ApprovalAction
      type: string
      enum:
        - approved
        - rejected
      description: Status type for approval actions
    ApprovalsRequired:
      type: integer
      minimum: 1
      example: 1
    AssetsResponse:
      title: AssetsResponse
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: Unique identifier for the asset.
            example: d1c27189-764c-4197-af06-e2623658f410
            minLength: 1
            format: uuid
          token:
            type: string
            description: Token symbol
            example: eth:usd1
            minLength: 1
          name:
            type: string
            description: Human-readable name of the token
            example: USD1
            minLength: 1
          decimals:
            type: number
            description: Number of decimal places for token precision
            example: 18
          isIssuedByBitgo:
            type: boolean
            description: Flag indicating if BitGo issued this token
            example: false
          chain:
            type: string
            description: Blockchain network identifier for the token
            example: eth
            minLength: 1
          backingAsset:
            type: string
            description: Token that provides backing value
            example: fiatusd
            minLength: 1
          treasuryAccountWalletId:
            type: string
            description: Unique identifier for the treasury account
            example: 37c60261db7cbfdfab26b9156eabcdef
            format: uuid
        required:
          - id
          - token
          - name
          - decimals
          - isIssuedByBitgo
    AtomAddress:
      title: Atom Address
      type: object
      properties:
        rootAddress:
          type: string
        memoId:
          type: string
      required:
        - rootAddress
        - memoId
    AtomPaymentIntent:
      title: Atom Payment Intent
      allOf:
        - type: object
          properties:
            memo:
              $ref: '#/components/schemas/optionalString'
          required:
            - memo
        - $ref: '#/components/schemas/PaymentIntent'
    AtomStakeIntent:
      title: Atom Stake Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/StakeIntent'
    AtomStakingDelegation:
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    AtomStakingRequest:
      title: ATOM
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/AtomStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/AtomStakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
    AtomStakingRequestPOSTBody:
      title: ATOM stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
    AtomStakingRequestWithTransactions:
      title: ATOM
      allOf:
        - $ref: '#/components/schemas/AtomStakingRequest'
        - type: object
          properties:
            transactions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/AtomStakingTransaction'
    AtomStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
    AtomUnStakingRequestPOSTBody:
      title: ATOM unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to unstake in base units.
          type: string
          example: '10000000000'
      required:
        - amount
    AtomUnstakeIntent:
      title: Atom Unstake Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/UnstakeIntent'
    AtomWallet:
      title: Atom Wallet
      type: object
      properties:
        rootAddress:
          type: string
        lastMemoId:
          type: string
        lastChainIndex: {}
        pendingEcdsaTssInitialization:
          type: boolean
      required:
        - rootAddress
        - lastMemoId
    AtomWithdrawIntent:
      title: Atom Withdraw Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
          required:
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/WithdrawIntent'
    AuditLogType1:
      title: AuditLogType
      type: string
    AuditableItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the date range.
        startDate:
          type: string
          description: ISO 8601 Datetime (example at https://datatracker.ietf.org/doc/html/rfc3339#section-5.8). If present, will use as the start date of a new auditable item. If not present, will use the current date to create a new auditable item. Start date is inclusive, i.e. we will start billing/functionality at this instant and afterwards.
        startReason:
          type: string
          description: An optional note describing the reason the auditable item was added/created.
        endDate:
          type: string
          description: ISO 8601 Datetime (example at https://datatracker.ietf.org/doc/html/rfc3339#section-5.8). If present, will use as the end date of a new auditable item. If not present, we will set the endDate to null, and we will assume an indefinite range. endDate is exclusive, i.e. we will end billing/functionality up to but not at this particular time.
        endReason:
          type: string
          description: An optional note describing the reason the auditable item was ended.
    AuthenticatorInfo:
      title: AuthenticatorInfo
      type: object
      properties:
        credID:
          type: string
          description: The credential ID of the authenticator
        fmt:
          type: string
          description: The format of the authenticator
        publicKey:
          type: string
          description: The public key of the authenticator
      required:
        - credID
        - fmt
        - publicKey
    AuxProofType:
      title: AuxProofType
      type: string
      enum:
        - REDEEM_SCRIPT
        - WITNESS_SCRIPT
        - ETH_CREATE
        - ETH_CREATE2
    AvailableUI:
      title: AvailableUI
      type: string
      enum:
        - bg23
        - ''
    AvaxPAddress:
      title: AvaxP Address
      type: object
      properties:
        threshold:
          type: number
        addresses:
          type: array
          items:
            type: string
      required:
        - threshold
        - addresses
    AvaxPStakingDelegation:
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    AvaxPStakingRequest:
      title: AVAXP
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/AvaxPStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/AvaxPStakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
        durationSeconds:
          description: The length of time in seconds to complete a staking period.
          type: integer
    AvaxPStakingRequestPOSTBody:
      title: AVAXP stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '1000'
        type:
          description: Staking Request type = 'STAKE'.
          type: string
          example: STAKE
        durationSeconds:
          description: The length of time in seconds to complete a staking period.
          type: integer
          example: 604800
      required:
        - amount
        - type
        - durationSeconds
    AvaxPStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
    AvaxPWallet:
      title: AvaxP Wallet
      type: object
      properties:
        unlockAddresses:
          type: array
          items:
            type: string
        threshold:
          type: number
      required:
        - unlockAddresses
        - threshold
    AvaxpWalletStakingStateAttributes:
      type: object
      properties:
        stakingSpendableAttributes:
          allOf:
            - $ref: '#/components/schemas/StakingSpendableAttributes'
          type: object
          properties:
            minDuration:
              description: The minimum duration in seconds for staking period.
              type: integer
            maxDuration:
              description: The maximum duration in seconds for staking period.
              type: integer
        unstakingSpendableAttributes:
          $ref: '#/components/schemas/UnStakingSpendableAttributes'
    AverageFee:
      type: object
      properties:
        averageFee:
          type: number
          description: Calculated by summing the fees of the blocks over the number of blocks.
          example: 16000000
      required:
        - averageFee
    BNMetadata:
      title: BNMetadata
      type: object
      properties:
        partnerNames:
          type: array
          items:
            type: string
            minLength: 1
      required:
        - partnerNames
    BNSupportedCurrency:
      title: BNSupportedCurrency
      type: string
    BabyCreateBtcDelegationIntent:
      title: Baby CreateBtcDelegation Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - createBtcDelegation
              description: Register a BTC delegation on the Babylon chain for Baby BTC staking.
            createBtcDelegationBytes:
              type: string
          required:
            - intentType
            - createBtcDelegationBytes
        - $ref: '#/components/schemas/BaseStakeIntent'
    BabyWithdrawRewardIntent:
      title: Baby WithdrawReward Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - stakeClaimRewards
            type:
              type: string
          required:
            - intentType
            - type
        - $ref: '#/components/schemas/BaseStakeIntent'
    BackingFiatCoin:
      title: BackingFiatCoin
      allOf:
        - $ref: '#/components/schemas/BackingFiatCoinEnum'
    BackingFiatCoinEnum:
      type: string
      enum:
        - fiatusd
        - fiateur
        - fiatsgd
        - fiataed
        - tfiatusd
        - tfiateur
        - tfiatsgd
        - tfiataed
    BackingValue:
      title: Backing hot wallet
      type: object
      description: Backing hot wallet.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - backing
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Backing Wallet
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: A backing wallet
    BackupKeyType:
      type: string
      description: Coin name used to choose correct KRS public key for the given provider. Possible valid values are "btc", "eth", "bitcoin"
      example: eth
    BalanceReserve:
      type: object
      properties:
        baseFee:
          type: string
          description: base fee used in transaction fees
          example: '100'
        baseReserve:
          type: string
          description: base reserve used in minimum account balances
          example: '5000000'
        reserve:
          type: string
          description: minimum account balance, calculated using base reserve
          example: '25000000'
        minimumFunding:
          type: string
          description: minimum funding balance, calculated using reserve and base fee
          example: '25000500'
        height:
          type: integer
          description: the height of the block that provides the base values
          example: 11228504
    BalancesCodec:
      title: BalancesCodec
      type: array
      items:
        type: object
        properties:
          Asset:
            type: string
          Amount:
            type: string
        required:
          - Asset
          - Amount
    BankAccountCurrency:
      title: BankAccountCurrency
      description: |
        The currency of the bank account. If null, defaults to `fiatusd`.
      type: string
      nullable: true
      enum:
        - fiatusd
        - fiateur
        - null
      example: fiatusd
    BankAccountFeeInfo:
      title: BankAccountFeeInfo
      allOf:
        - $ref: '#/components/schemas/BankAccountFeeInfoObject'
    BankAccountFeeInfoObject:
      type: object
      properties:
        amount:
          type: string
          minLength: 1
        individualFees:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/StaticFee'
              - $ref: '#/components/schemas/VariableFee'
      required:
        - individualFees
    BankAccountJson:
      title: BankAccountJson
      type: object
      properties:
        accountNumber:
          type: string
        address1:
          type: string
        name:
          type: string
        owner:
          type: object
          properties:
            name:
              type: string
            address1:
              type: string
            address2:
              type: string
            address3:
              type: string
          required:
            - name
            - address1
        idHash:
          type: string
        verificationState:
          type: string
        address2:
          type: string
        address3:
          type: string
        enterpriseId:
          type: string
        id:
          type: string
        routingNumber:
          type: string
        shortCountryCode:
          type: string
        swiftCode:
          type: string
        type:
          type: string
      required:
        - accountNumber
        - address1
        - name
        - owner
        - idHash
        - verificationState
    BankAccountRequest:
      anyOf:
        - $ref: '#/components/schemas/DomesticWireBankAccount'
        - $ref: '#/components/schemas/InternationalWireBankAccount'
        - $ref: '#/components/schemas/CBITBankAccount'
    BankAccountRequest1:
      title: BankAccountRequest
      description: |
        Base schema for bank account creation requests.

        NOTE: Address fields required depend on the country format.
        Use the /api/accounts/v1/address endpoint with the appropriate country code
        to determine which address fields are required for a specific country.
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Name of the bank account
        shortCountryCode:
          type: string
          minLength: 1
          description: Two-letter ISO country code
        accountNumber:
          type: string
          minLength: 1
          description: Bank account number
        enterpriseId:
          type: string
          minLength: 1
          description: ID of the enterprise the account belongs to
        currency:
          allOf:
            - $ref: '#/components/schemas/BackingFiatCoin'
          description: The currency of the bank account
        ownerName:
          type: string
          minLength: 1
          description: Name of the account owner
        accountType:
          type: string
          enum:
            - checking
            - saving
            - unknown
          description: Type of bank account (checking, saving, etc.)
        description:
          type: string
          description: User-provided description of the account
        furtherCreditTo:
          type: string
          description: Further credit recipient information
        intermediaryBankName:
          type: string
          description: Name of intermediary bank if applicable
        intermediaryBankId:
          type: string
          description: Identifier of the intermediary bank
        ownerAddressLine1:
          type: string
          description: First line of owner's address (street number and name)
        ownerAddressLine2:
          type: string
          description: Second line of owner's address (apartment/suite number, etc.)
        ownerAddressCityLocality:
          type: string
          description: City or locality of owner's address
        ownerAddressStateProvince:
          type: string
          description: State or province of owner's address
        ownerAddressPostalCode:
          type: string
          description: Postal code of owner's address
        ownerAddressCountryCode:
          type: string
          description: Two-letter ISO country code of owner's address
        bankAddressLine1:
          type: string
          description: First line of bank's address (street number and name)
        bankAddressLine2:
          type: string
          description: Second line of bank's address (branch information, etc.)
        bankAddressCityLocality:
          type: string
          description: City or locality of bank's address
        bankAddressStateProvince:
          type: string
          description: State or province of bank's address
        bankAddressPostalCode:
          type: string
          description: Postal code of bank's address
        bankAddressCountryCode:
          type: string
          description: Two-letter ISO country code of bank's address
      required:
        - name
        - shortCountryCode
        - accountNumber
        - currency
        - ownerName
    BankAccountResponse1:
      title: BankAccountResponse
      oneOf:
        - $ref: '#/components/schemas/DomesticWireBankAccountResponse'
        - $ref: '#/components/schemas/InternationalWireBankAccountResponse'
        - $ref: '#/components/schemas/CbitBankAccountResponse'
        - $ref: '#/components/schemas/AchBankAccountResponse'
        - $ref: '#/components/schemas/SepaBankAccountResponse'
        - $ref: '#/components/schemas/BlincBankAccountResponse'
    BankAccountResponseProps:
      title: BankAccountResponseProps
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: Unique identifier for the bank account
        idHash:
          type: string
          minLength: 1
          description: Hashed identifier for the bank account
        currency:
          allOf:
            - $ref: '#/components/schemas/BackingFiatCoin'
          description: The currency of the bank account
        token:
          type: string
          minLength: 1
          description: Authentication token for bank account operations
        name:
          type: string
          minLength: 1
          description: Name of the bank account
        shortCountryCode:
          type: string
          minLength: 1
          description: Two-letter ISO country code
        accountNumber:
          type: string
          minLength: 1
          description: Bank account number (may be masked)
        enterpriseId:
          type: string
          description: ID of the enterprise the account belongs to
        trustOrg:
          allOf:
            - $ref: '#/components/schemas/TrustOrg2'
          description: Trust organization associated with this account
        ownerName:
          type: string
          minLength: 1
          description: Name of the account owner
        verificationState:
          allOf:
            - $ref: '#/components/schemas/VerificationState'
          description: Current verification status of the account
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
          description: Timestamp when the account was created
        pendingActivity:
          allOf:
            - $ref: '#/components/schemas/PendingActivityState'
          description: Any pending activity on the account
        fee:
          allOf:
            - $ref: '#/components/schemas/BankAccountFeeInfo'
          description: Fee information for the account
        feeInfo:
          allOf:
            - $ref: '#/components/schemas/Fee'
          description: Detailed fee configuration for the account
        furtherCreditTo:
          type: string
          description: Further credit recipient information
        intermediaryBankName:
          type: string
          description: Name of intermediary bank if applicable
        intermediaryBankId:
          type: string
          description: Identifier of the intermediary bank
        metadata:
          type: string
          description: Additional metadata for the account
        description:
          type: string
          description: User-provided description of the account
        virtualDepositOnly:
          type: boolean
          description: Whether this account is for virtual deposits only
        ownerAddressLine1:
          type: string
          nullable: true
          description: First line of owner's address (street number and name)
        ownerAddressLine2:
          type: string
          nullable: true
          description: Second line of owner's address (apartment/suite number, etc.)
        ownerAddressCityLocality:
          type: string
          nullable: true
          description: City or locality of owner's address
        ownerAddressStateProvince:
          type: string
          nullable: true
          description: State or province of owner's address
        ownerAddressPostalCode:
          type: string
          nullable: true
          description: Postal code of owner's address
        ownerAddressCountryCode:
          type: string
          nullable: true
          description: Two-letter ISO country code of owner's address
        bankAddressLine1:
          type: string
          nullable: true
          description: First line of bank's address (street number and name)
        bankAddressLine2:
          type: string
          nullable: true
          description: Second line of bank's address (branch information, etc.)
        bankAddressCityLocality:
          type: string
          nullable: true
          description: City or locality of bank's address
        bankAddressStateProvince:
          type: string
          nullable: true
          description: State or province of bank's address
        bankAddressPostalCode:
          type: string
          nullable: true
          description: Postal code of bank's address
        bankAddressCountryCode:
          type: string
          nullable: true
          description: Two-letter ISO country code of bank's address, should equal shortCountryCode
        owner:
          allOf:
            - $ref: '#/components/schemas/OldOwner'
            - deprecated: true
              description: DEPRECATED - Use normalized address fields instead
        address:
          type: string
          minLength: 1
          deprecated: true
          description: DEPRECATED - Use normalized bank address fields instead
        ownerAddress:
          type: string
          minLength: 1
          deprecated: true
          description: DEPRECATED - Use normalized owner address fields instead
        address1:
          type: string
          deprecated: true
          description: DEPRECATED - Use ownerAddressLine1 instead
        address2:
          type: string
          deprecated: true
          description: DEPRECATED - Use ownerAddressLine2 instead
        address3:
          type: string
          deprecated: true
          description: DEPRECATED - Use additional normalized address fields instead
      required:
        - id
        - idHash
        - currency
        - token
        - name
        - shortCountryCode
        - accountNumber
        - enterpriseId
        - trustOrg
        - ownerName
        - verificationState
        - createdAt
    BankAccountType:
      title: BankAccountType
      description: |
        The type of bank account. If null, defaults `wire`.
      type: string
      nullable: true
      enum:
        - wire
        - cbit
        - null
      example: wire
    BankAccountsArrayResponse:
      title: BankAccountsArrayResponse
      description: Unified schema for an array of bank accounts
      type: array
      items:
        $ref: '#/components/schemas/BankAccountResponse1'
    BankId:
      title: BankId
      type: string
      enum:
        - silvergate
        - silvergate_prime
        - silvergate_v3
        - silvergate_prime_v3
        - bcbgroup
        - signature
        - generic
        - customers_api
        - customers_cubix_api
        - customers_sftp
        - lead
    BaseGoStakeIntent:
      title: BaseGoStakeIntent
      allOf:
        - type: object
          properties:
            goStakingRequestId:
              type: string
          required:
            - goStakingRequestId
        - $ref: '#/components/schemas/BaseIntent'
    BaseIntent:
      title: Intent
      type: object
      properties:
        intentType:
          $ref: '#/components/schemas/IntentType'
        sequenceId:
          $ref: '#/components/schemas/optionalString'
        comment:
          $ref: '#/components/schemas/optionalString'
        nonce:
          oneOf:
            - type: string
            - type: number
      required:
        - intentType
    BaseIntent1:
      title: Intent
      type: object
      properties:
        intentType:
          $ref: '#/components/schemas/IntentType1'
        sequenceId:
          $ref: '#/components/schemas/optionalString'
        comment:
          $ref: '#/components/schemas/optionalString'
        nonce:
          oneOf:
            - type: string
            - type: number
      required:
        - intentType
    BaseIntent2:
      type: object
      properties:
        intentType:
          type: string
        sequenceId:
          type: string
          description: |
            A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because BitGo only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly. It is the responsibility of the caller to keep track of this ID.
          example: abc123
        comment:
          type: string
          description: The `comment` is only visible to users on the wallet and is not shared publicly.
        nonce:
          type: string
          description: The 'nonce' of a transaction (optional)
        memo:
          type: string
          description: |
            A `memo` is an additional address feature necessary for identifying a transaction recipient beyond wallet address.
      required:
        - intentType
    BaseIntentWithoutNonce:
      title: BaseIntentWithoutNonce
      type: object
      properties:
        intentType:
          $ref: '#/components/schemas/IntentType'
        sequenceId:
          $ref: '#/components/schemas/optionalString'
        comment:
          $ref: '#/components/schemas/optionalString'
      required:
        - intentType
    BaseShare:
      title: BaseShare
      type: object
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/SignatureShareType'
          description: The source of the commitment share
          example: user
        to:
          allOf:
            - $ref: '#/components/schemas/SignatureShareType'
          description: The recipient of the commitment share.
          example: bitgo
        share:
          type: string
          description: The commitment share.
      required:
        - from
        - to
        - share
    BaseStakeIntent:
      title: BaseStakeIntent
      allOf:
        - type: object
          properties:
            stakingRequestId:
              type: string
          required:
            - stakingRequestId
        - $ref: '#/components/schemas/BaseIntent'
    BaseStakeIntent1:
      title: BaseStakeIntent
      allOf:
        - type: object
          properties:
            stakingRequestId:
              type: string
          required:
            - stakingRequestId
        - $ref: '#/components/schemas/BaseIntent1'
    BaseStakeIntent2:
      allOf:
        - $ref: '#/components/schemas/BaseIntent2'
        - type: object
          properties:
            stakingRequestId:
              type: string
          required:
            - stakingRequestId
    BaseStakeIntentWithCalldata:
      title: Base Stake Intent with Calldata
      allOf:
        - type: object
          properties:
            calldata:
              type: string
          required:
            - calldata
        - $ref: '#/components/schemas/BaseStakeIntent'
    BaseTradeCorrectionMetadata:
      title: BaseTradeCorrectionMetadata
      type: object
      properties:
        correctingUser:
          type: string
          minLength: 1
        reason:
          type: string
          minLength: 1
      required:
        - correctingUser
        - reason
    BaseWalletAddress:
      title: BaseWalletAddress
      type: object
      properties:
        id:
          type: string
          description: Platform public ID for an address
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        address:
          $ref: '#/components/schemas/AddressString'
        balance:
          $ref: '#/components/schemas/TrimmedBalance'
        coinSpecific:
          allOf:
            - $ref: '#/components/schemas/AddressSubdocument'
          description: Properties specific to certain coin types
        label:
          $ref: '#/components/schemas/AddressLabelString'
        lastNonce:
          type: number
          default: -1
        token:
          type: string
        proof:
          type: string
        signature:
          type: string
        lastConsolidatedTime:
          type: string
          format: date
          title: Date String
        needsConsolidation:
          type: boolean
        tokenConsolidationState: {}
        tokenAddress: {}
    BeraDelegateIntent:
      title: Bera Delegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - delegate
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent'
    BeraStakingDelegation:
      title: BERA
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
      properties:
        subType:
          description: The staking type.
          type: string
          enum:
            - NATIVE_STAKE
            - INFRARED_LIQUID_STAKE
        operator:
          description: The operator address.
          type: string
    BeraStakingRequest:
      title: BERA
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/BeraStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/StakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
        gasPrice:
          type: string
          description: User overridden gas price to apply for the generated transactions for this request.
        subType:
          description: The staking type (NATIVE_STAKE, INFRARED_LIQUID_STAKE).
          type: string
          enum:
            - NATIVE_STAKE
            - INFRARED_LIQUID_STAKE
        operator:
          description: The operator address.
          type: string
    BeraStakingRequestPOSTBody:
      title: BERA stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '1000000000000000000'
        type:
          description: Staking Request type = 'STAKE'.
          type: string
          example: STAKE
        validator:
          description: The validator pubkey.
          type: string
        gasPrice:
          description: User overridden gas price to apply for the generated transactions for this request. GasPrice is in base units.
          type: string
        subType:
          description: The staking type (NATIVE_STAKE, INFRARED_LIQUID_STAKE).
          type: string
          enum:
            - NATIVE_STAKE
            - INFRARED_LIQUID_STAKE
          default: INFRARED_LIQUID_STAKE
        operator:
          description: The operator address.
          type: string
        withdrawCredentials:
          description: The withdraw credentials.
          type: string
        depositSignature:
          description: The deposit signature.
          type: string
      required:
        - amount
        - type
    BeraUnStakingRequestPOSTBody:
      title: BERA unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
        amount:
          description: Amount to unstake in base units.
          type: string
          example: '1000000000000000000'
      required:
        - type
        - delegationId
    Bitcoin:
      type: string
      enum:
        - btc
        - tbtc4
      description: This route is only available for Bitcoin.
    BitcoinCashAddress:
      title: Bitcoin Cash Address
      allOf:
        - type: object
          properties:
            format:
              $ref: '#/components/schemas/SupportedAddressFormat'
        - $ref: '#/components/schemas/UtxoAddress'
    BitgoOrg:
      title: BitgoOrg
      type: string
      enum:
        - BitGo Trust
        - BitGo New York
        - BitGo Germany
        - BitGo Switzerland
        - BitGo Europe ApS
        - Frankfurt DE Trust
        - BitGo Singapore
        - BitGo Korea
        - BitGo Custody MENA FZE
        - BitGo India
        - BitGo Sister Trust 1
        - BitGo Inc
    BitgoTSSPublicKeyResponse:
      title: BitgoTSSPublicKeyResponse
      type: object
      properties:
        enterpriseId:
          type: string
          description: Enterprise id for the intended operation (if present in the request)
        name:
          type: string
          description: Name of the key, used for simple identification. Matches MPC key namess in client constants
        publicKey:
          type: string
          description: BitGo MPC public key
        mpcv2PublicKey:
          type: string
          description: BitGo MPCv2 public key
      required:
        - name
    BlincAccountResponseProps:
      title: BlincAccountResponseProps
      type: object
      properties:
        type:
          type: string
          enum:
            - blinc
        accountType:
          $ref: '#/components/schemas/OptionalAccountType'
        externalId:
          type: string
          minLength: 1
      required:
        - type
        - accountType
        - externalId
    BlincBankAccountRequest:
      title: BlincBankAccountRequest
      description: Request schema for creating a Blinc bank account
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - blinc
              description: Must be 'blinc' for Blinc accounts
            externalId:
              type: string
              description: External identifier for the Blinc account
          required:
            - type
            - externalId
        - $ref: '#/components/schemas/BankAccountRequest1'
    BlincBankAccountResponse:
      title: BlincBankAccountResponse
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/BlincAccountResponseProps'
        - $ref: '#/components/schemas/BankAccountResponseProps'
    BlockHash:
      type: string
      example: 0000000000000296ed56abee6cb78e40b00c47a03d92e71dd92c4862ca636b95
    BscDelegateIntent:
      title: BSC Delegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - delegate
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            relayerFee:
              type: string
            delegateVotePower:
              type: string
          required:
            - intentType
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/BaseStakeIntent'
    BscUnDelegateIntent:
      title: BSC UnDelegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - undelegate
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            relayerFee:
              type: string
          required:
            - intentType
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/BaseStakeIntent'
    BscWithdrawUndelegateIntent:
      title: BSC Withdraw Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              type: string
            requestNumber:
              type: number
          required:
            - validatorAddress
            - requestNumber
        - $ref: '#/components/schemas/WithdrawIntent'
    BtcStakingDelegation:
      title: BTC
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    BtcStakingRequest:
      title: BTC
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/BtcStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/StakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
    BtcStakingRequestPOSTBody:
      title: BTC stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '10000000000'
        type:
          description: Staking Request type = 'STAKE'.
          type: string
          example: STAKE
        validator:
          description: The validator address or other identifier.
          type: string
        coredao:
          type: object
          properties:
            expireAt:
              description: The expiration date of the staking.
              type: string
              format: date-time
              example: 2025-01-01T00:00:00.000Z
            rewardAddress:
              description: The address where rewards will be sent.
              type: string
              example: '0x1234567890abcdef1234567890abcdef12345678'
        babylon:
          type: object
          properties:
            duration:
              description: The duration of staking in seconds.
              type: integer
              format: int64
              example: 2592000
            rewardAddress:
              description: The address where rewards will be sent.
              type: string
              example: '0x1234567890abcdef1234567890abcdef12345678'
      required:
        - amount
        - type
    BtcUnStakingRequestPOSTBody:
      title: BTC unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
      required:
        - type
        - delegationId
    BuildParams:
      type: object
      properties:
        type:
          type: string
          description: |
            Required for transactions from MPC wallets. "acceleration" speeds up transactions with a certain nonce by adjusting the gas setting. "accountSet" is for XRP AccountSet transactions. "enabletoken" is for SOL. "stakingLock" and "stakingUnlock" are for Stacks delegations. "transfer" is for native-asset transfers. "trustline" is for Stellar trustline transactions. Possible types include: [acceleration, accountSet, enabletoken, stakingLock, stakingUnlock, transfer, transfertoken, trustline]

            For AVAX, possible types include: `addValidator`, `export`, and `import`.

            For XRP, possible types include: `payment` and `accountSet`. The default is `payment`.

            For STX, type is required.
        messages:
          description: '[UTXO only] An array of messages that you sign with the wallet keys using the BIP322 format. If passed, the `recipients` array must be empty.'
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: The address for which you're proving ownership. This address must belong to the wallet.
              message:
                type: string
                description: Message that is being signed.
                example: BIP322 test message.
        numBlocks:
          type: integer
          description: |
            (BTC only) The number of blocks required to confirm a transaction. You can use `numBlocks` to estimate the fee rate by targeting confirmation within a given number of blocks. If both `feeRate` and `numBlocks` are absent, the transaction defaults to 2 blocks for confirmation.

            Note: The `maxFeeRate` limits the fee rate generated by `numBlocks`.
          minimum: 2
          maximum: 1000
        feeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrString'
            - example: 10000
          description: |
            Custom fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte.

            If the `feeRate` is less than the minimum required network fee, then the minimum fee applies. For example, 1000 sat/kvByte, a flat 1000 microAlgos, or a flat 10 drops of xrp. For XRP, the actual fee is usually 4.5 times the open ledger fee.

            Note: The `feeRate` overrides the `maxFeeRate` and `minFeeRate`.
        maxFeeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
            - example: 20000
          description: |
            (BTC only) The maximum fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte. The `maxFeeRate` limits the fee rate generated by both `feeMultiplier` and `numBlocks`.

            Note: The `feeRate` overrides the `maxFeeRate`.
        feeMultiplier:
          allOf:
            - $ref: '#/components/schemas/NumberOrString'
            - example: 1.5
          description: |
            (UTXO only) Custom multiplier to the `feeRate`. The resulting fee rate is limited by the `maxFeeRate`. For replace-by-fee (RBF) transactions (that include `rbfTxIds`), the `feeMultiplier` must be greater than 1, since it's an absolute fee multiplier to the transaction being replaced.

            Note: The `maxFeeRate` limits the fee rate generated by `feeMultiplier`.
        minConfirms:
          type: integer
          description: |
            The unspent selection for the transaction will only consider unspents with at least this many confirmations to be used as inputs. Does not apply to change outputs unless used in combination with `enforceMinConfirmsForChange`.
        enforceMinConfirmsForChange:
          type: boolean
          description: When set to true, will enforce minConfirms for change outputs. Defaults to false.
          default: false
        gasPrice:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Custom gas price to be used for sending the transaction. Only for ETH and ERC20 tokens.
        eip1559:
          properties:
            maxPriorityFeePerGas:
              allOf:
                - $ref: '#/components/schemas/IntegerOrIntegerString'
                - maximum: 100000000000
              description: Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens.
            maxFeePerGas:
              allOf:
                - $ref: '#/components/schemas/IntegerOrIntegerString'
              description: Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens.
        gasLimit:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Custom gas limit to be used for sending the transaction. Only for ETH and ERC20 tokens.
        targetWalletUnspents:
          type: integer
          description: |
            Specifies the minimum count of good-sized unspents to maintain in the wallet. Change splitting ceases when the
            wallet has `targetWalletUnspents` good-sized unspents.

            **Note**: Wallets that continuously send a high count of transactions will automatically split large change amounts
            into multiple good-sized change outputs while they have fewer than `targetWalletUnspents` good-sized unspents in
            their unspent pool. Breaking up large unspents helps to reduce the amount of unconfirmed funds in flight in future
            transactions, and helps to avoid long chains of unconfirmed transactions. This is especially useful for newly
            funded wallets or recently refilled send-only wallets.
          default: 1000
        minValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Ignore unspents smaller than this amount of base units (e.g. satoshis). For doge, only string is allowed.
        maxValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Ignore unspents larger than this amount of base units (e.g. satoshis). For doge, only string is allowed.
        sequenceId:
          type: string
          description: |
            A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly.
        nonce:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: |
            (DOT only) A nonce ID is a number used to protect private communications by preventing replay attacks.
            This is an advanced option where users can manually input a new nonce value
            in order to correct or fill in a missing nonce ID value.
        noSplitChange:
          type: boolean
          description: |
            Set `true` to disable automatic change splitting.

            Also see: `targetWalletUnspents`
          default: false
        unspents:
          type: array
          items:
            example: 12b147dd8b4f73c01f72bdbf5b589eea614f3de609ffdbdac84852d6505cf8a3:1
            type: string
          description: |
            Used to explicitly specify the unspents to be used in the input set in the transaction. Each unspent should be in the form `prevTxId:nOutput`.
        changeAddress:
          allOf:
            - $ref: '#/components/schemas/AddressString3'
          description: Specifies a custom destination address for the transaction's change output(s)
        txFormat:
          $ref: '#/components/schemas/UtxoTransactionFormat'
        instant:
          type: boolean
          description: (DASH only) Specifies whether or not to use Dash's "InstantSend" feature when sending a transaction.
        memo:
          type: object
          properties:
            type:
              type: string
            value:
              type: string
          description: |
            Extra transaction information for CSPR, EOS, HBAR, RUNE, STX, TON, XLM, and XRP. Required for XLM transactions.

            Note: For XRP this is the destination tag (DT). For CSPR this is the transfer ID.
        comment:
          type: string
          description: |
            Optional metadata (only persisted in BitGo) to be applied to the transaction. Use this to add transaction-specific information such as the transaction's purpose or another identifier that you want to reference later. The value is shown in the UI in the transfer listing page.
          maxLength: 256
        destinationChain:
          type: string
          description: (AVAXC and AVAXP only) Destination chain for an AVAX import/export transaction. One of [P, C].
        sourceChain:
          type: string
          description: (AVAXC and AVAXP only) Source chain for an AVAX import/export transaction. One of [P, C].
        addressType:
          type: string
          deprecated: true
          description: |-
            DEPRECATED - use `changeAddressType`.
            The type of address to create for change. One of `p2sh`, `p2shP2wsh`, `p2wsh`, or `p2tr`.
        changeAddressType:
          anyOf:
            - $ref: '#/components/schemas/AddressType'
            - $ref: '#/components/schemas/ChangeAddressTypes'
          description: The address type for the change address. One of `p2sh`, `p2shP2wsh`, `p2wsh`, `p2tr` or `p2trMusig2`.
        startTime:
          type: string
          description: Unix timestamp in seconds.nanoseconds format, denoting the start of the validity window. Only for HBAR transactions.
          example: 1714067129.1020603
        consolidateId:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: (ALGO/TEZOS only) Consolidation ID of this consolidation transaction.
        lastLedgerSequence:
          type: integer
          description: (XRP only) Absolute max ledger the transaction should be accepted in, whereafter it will be rejected
        ledgerSequenceDelta:
          type: integer
          description: (XRP only) Relative ledger height (in relation to the current ledger) that the transaction should be accepted in, whereafter it will be rejected
        rbfTxIds:
          type: array
          items:
            type: string
          description: The list of transactions to accelerate using Replace-By-Fee (RBF) for UTXO coins (currently accelerating only one tx is supported).
        isReplaceableByFee:
          type: boolean
          description: It is used to mark an UTXO transaction eligible for Replace-By-Fee (RBF) later.
        validFromBlock:
          type: integer
          description: Optional block this transaction is valid from
        validToBlock:
          type: integer
          description: Optional block this transaction is valid until
        trustlines:
          type: array
          items:
            $ref: '#/components/schemas/Trustline'
          description: List of trustlines to manage on the account. Available for Stellar.
        stakingOptions:
          anyOf:
            - $ref: '#/components/schemas/CSPRStakingOptions'
            - $ref: '#/components/schemas/STXStakingOptions'
          description: Required object for staking. Only for CSPR and STX.
        messageKey:
          type: string
          description: Optional parameter that takes a hexadecimal value to set `messagekey` for an XRP `accountSet` transaction. Recipients field should be empty when `messageKey` is set.
        reservation:
          type: object
          properties:
            expireTime:
              type: string
              format: date-time
              description: Required. The time that the unspent reservations should expire.
          description: Optional parameter for UTXO coins to automatically reserve the unspents that are used in the build. Useful for Cold wallets. If using, must set expireTime.
    BuildTokenApprovalResponse:
      title: BuildTokenApprovalResponse
      type: object
      properties:
        txHex:
          type: string
        txInfo:
          type: object
          properties:
            amount:
              type: string
            contractAddress:
              type: string
            spender:
              type: string
          required:
            - amount
            - contractAddress
            - spender
        recipients:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
              amount:
                type: string
              data:
                type: string
            required:
              - address
              - amount
              - data
        eip1559:
          type: object
          properties:
            maxFeePerGas:
              type: string
            maxPriorityFeePerGas:
              type: string
          required:
            - maxFeePerGas
            - maxPriorityFeePerGas
        nextContractSequenceId:
          type: number
      required:
        - txHex
        - txInfo
        - recipients
        - nextContractSequenceId
    BulkUpdateResponse:
      title: BulkUpdateResponse
      type: object
      description: Response type for bulk update
      properties:
        results:
          type: array
          items:
            oneOf:
              - type: object
                properties:
                  paId:
                    type: string
                    description: Pending approval ID
                  status:
                    type: string
                    enum:
                      - success
                    description: Result status
                required:
                  - paId
                  - status
              - type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  paId:
                    type: string
                    description: Pending approval ID
                  status:
                    type: string
                    enum:
                      - error
                    description: Result status
                required:
                  - message
                  - paId
                  - status
            description: Individual approval result item
      required:
        - results
    BusinessModel:
      title: BusinessModel
      type: string
      enum:
        - bitgoAsAService
        - cryptoAsAServiceParent
        - cryptoAsAServiceChild
    CBITBankAccount:
      title: CBIT Bank Account
      type: object
      description: |
        An external bank account. `routingNumber` must be set for US bank accounts.
        `swiftCode` must be set for banks outside the US.
      properties:
        accountNumber:
          description: Bank account number or IBAN.
          type: string
          minLength: 1
          maxLength: 34
          example: 114584906
        enterpriseId:
          $ref: '#/components/schemas/Id'
        address:
          type: string
          example: 2390 El Camino Real, Palo Alto, CA 94306
        address1:
          type: string
          example: 2390 El Camino Real
        address2:
          type: string
          example: Palo Alto, CA 94306
        address3:
          type: string
          example: ''
        name:
          type: string
          example: America California Bank
        ownerName:
          type: string
          example: Donald E. Knuth
        ownerAddress:
          type: string
          example: 2390 El Camino Real, Palo Alto, CA 94306
        owner:
          type: object
          description: Bank account owner
          properties:
            name:
              type: string
              example: Donald E. Knuth
            address1:
              type: string
              example: Computer Science Department
            address2:
              type: string
              example: Stanford University
            address3:
              type: string
              example: Stanford, CA 94305-9045
          required:
            - name
            - address1
        externalId:
          description: Required for CBIT transfers.
          type: string
          example: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        shortCountryCode:
          $ref: '#/components/schemas/ShortCountryCode'
        type:
          $ref: '#/components/schemas/BankAccountType'
        currency:
          $ref: '#/components/schemas/BankAccountCurrency'
        furtherCreditTo:
          type: string
          example: Donald E. Knuth
        intermediaryBankName:
          type: string
          example: America California Bank
        intermediaryBankId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
      required:
        - accountNumber
        - address1
        - shortCountryCode
        - name
        - owner
        - enterpriseId
        - externalId
    CSPRStakingOptions:
      title: CSPR
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Required for CSPR. String representation of the amount to stake or unstake in base units (motes).
        validator:
          allOf:
            - $ref: '#/components/schemas/AddressString3'
          description: Required for CSPR. The validator address used to delegate or undelegate.
    CannotRemoveAdmin:
      title: Can't remove admin
      allOf:
        - $ref: '#/components/schemas/PlatformErrorNoName3'
        - properties:
            context:
              type: object
              properties:
                adminCount:
                  type: integer
                  description: |
                    Current number of admins on the wallet.  This number must be
                    greater than `approvalsRequired`, since an admin cannot approve
                    his/her own operation.
                approvalsRequired:
                  description: Number of admins that must approve a wallet operation
                  type: integer
              required:
                - adminCount
                - approvalsRequired
            name:
              type: string
              description: Error code
              enum:
                - CannotRemoveAdmin
          required:
            - context
            - name
    CasperAddress:
      title: Casper Address
      type: object
      properties:
        accountHash:
          type: string
        rootAddress:
          type: string
        transferId:
          type: string
      required:
        - accountHash
        - rootAddress
        - transferId
    CasperWallet:
      title: Casper Wallet
      type: object
      properties:
        accountHash:
          type: string
        creationFailure:
          type: array
          items:
            type: string
        lastTransferId:
          type: string
        pendingChainInitialization:
          type: boolean
        rootAddress:
          type: string
      required:
        - accountHash
        - creationFailure
        - lastTransferId
        - pendingChainInitialization
        - rootAddress
    CbitAccountResponseProps:
      title: CbitAccountResponseProps
      type: object
      properties:
        type:
          type: string
          enum:
            - cbit
        accountType:
          $ref: '#/components/schemas/OptionalAccountType'
        externalId:
          $ref: '#/components/schemas/NullableString'
      required:
        - type
        - accountType
    CbitBankAccountRequest:
      title: CbitBankAccountRequest
      description: Request schema for creating a CBIT bank account
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - cbit
              description: Must be 'cbit' for CBIT accounts
            externalId:
              type: string
              description: External identifier for the CBIT account
          required:
            - type
        - $ref: '#/components/schemas/BankAccountRequest1'
    CbitBankAccountResponse:
      title: CbitBankAccountResponse
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/CbitAccountResponseProps'
        - $ref: '#/components/schemas/BankAccountResponseProps'
    Chain:
      type: integer
      example: 1
      enum:
        - 0
        - 1
        - 10
        - 11
        - 20
        - 21
        - 30
        - 31
        - 40
        - 41
    Challenge:
      title: Challenge
      type: object
      properties:
        ntilde:
          type: string
          description: Range proof challenge value
        h1:
          type: string
          description: Range proof challenge value
        h2:
          type: string
          description: Range proof challenge value
      required:
        - ntilde
        - h1
        - h2
    ChallengePartyConfig:
      title: ChallengePartyConfig
      type: object
      properties:
        enterprise:
          $ref: '#/components/schemas/TssConfigPartyChallenge'
        bitgoNitroHsm:
          $ref: '#/components/schemas/TssConfigPartyChallenge'
        bitgoInstitutionalHsm:
          $ref: '#/components/schemas/TssConfigPartyChallenge'
        createdBy:
          type: string
          description: The ID of the user who created and verified the config
          example: 5d1a3e4d2f7f9b7c0e3b7e4d2f7f9b7c
      required:
        - enterprise
        - bitgoNitroHsm
        - bitgoInstitutionalHsm
        - createdBy
    ChallengeVerifiers:
      title: ChallengeVerifiers
      type: object
      properties:
        adminSignature:
          type: string
          description: The admin signature is a hex string. Users should verify that the admin signature matches for the range proof challenge.
        bitgoNitroHsmSignature:
          type: string
        bitgoInstitutionalHsmSignature:
          type: string
      required:
        - adminSignature
    ChangeAddressTypes:
      type: array
      items:
        $ref: '#/components/schemas/AddressType'
      description: The address types for the change address. Order by preference and BitGo uses the first available. Any subset of `p2sh`, `p2shP2wsh`, `p2wsh`, `p2tr` or `p2trMusig2`.
    ChangeFeeResponse:
      title: ChangeFeeResponse
      type: object
      properties:
        txid:
          type: string
          description: Transaction ID of the newly created transaction with increased fee rate.
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
    ChangeType:
      title: ChangeType
      type: string
      enum:
        - create
        - update
        - delete
        - unlock
        - bulkUnlock
        - bulkArchive
    Clause:
      type: object
      description: |
        A combination of Conditions and Actions.
      properties:
        actions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/AlwaysDenyActionRequest'
              - $ref: '#/components/schemas/EnterpriseAdminActionRequest'
              - $ref: '#/components/schemas/WalletAdminActionRequest'
              - $ref: '#/components/schemas/FinalApprovalActionRequest'
              - $ref: '#/components/schemas/EnterpriseUsersActionRequest'
        conditions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/TransferAmountConditionRequest'
              - $ref: '#/components/schemas/TransferVelocityLimitConditionRequest'
              - $ref: '#/components/schemas/TransferDestinationTypeConditionRequest'
              - $ref: '#/components/schemas/TransferInitiatorsConditionRequest'
    ClearLoopConnectionKey:
      title: ClearLoopConnectionKey
      type: object
      properties:
        schema:
          type: string
          enum:
            - clearloop
        apiKey:
          type: string
          minLength: 1
        apiSecret:
          type: string
          minLength: 1
        clientAccountId:
          type: string
          minLength: 1
        companyRegistrationNumber:
          type: string
          minLength: 1
      required:
        - schema
        - apiKey
        - apiSecret
        - clientAccountId
        - companyRegistrationNumber
    ClosedByUnion:
      title: ClosedByUnion
      type: string
      enum:
        - client
        - admin
    Coin:
      title: Coin
      description: A cryptocurrency or token ticker symbol.
      type: string
      example: btc
    Coin1:
      type: string
      description: The staking asset.
      enum:
        - ADA
        - AVAXP
        - BERA
        - BTC
        - DOT
        - ETH
        - MATIC
        - NEAR
        - SOL
        - STX
        - TON
        - WCT
    CoinConditionParameter:
      title: Coin
      type: object
      description: The asset the amount is expressed in.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - coin
          example: coin
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Currency
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: This condition only applies to transfers of this currency (USD applies to all transfers)
        type:
          type: string
          description: The type of acceptable values for this condition parameter.
          enum:
            - COIN_OR_USD
          example: COIN_OR_USD
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
    CoinNonEmptyString:
      title: CoinNonEmptyString
      type: string
      description: A cryptocurrency symbol or token ticker symbol
      example: btc
      minLength: 1
    CoinString:
      title: CoinString
      type: string
      description: A cryptocurrency symbol or token ticker symbol
      example: btc
    CoinsUnauthorizedError:
      type: object
      properties:
        error:
          type: string
        errorName:
          type: string
        reqId:
          type: string
        context:
          type: object
          properties:
            errorName:
              type: string
    ColdValue:
      title: Self-managed cold wallet
      type: object
      description: Self-managed cold wallet.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - cold
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Cold Wallet
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: A cold wallet
    CommitmentShare:
      type: object
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The source of the commitment share.
        to:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The recipient of the commitment share.
        share:
          type: string
          description: The commitment share.
        type:
          allOf:
            - $ref: '#/components/schemas/CommitmentType'
            - default: commitment
          description: The type of the commitment share.
      required:
        - from
        - to
        - share
        - type
    CommitmentShare1:
      title: CommitmentShare
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - commitment
              description: The type of the commitment share
          required:
            - type
        - $ref: '#/components/schemas/BaseShare'
    CommitmentType:
      type: string
      enum:
        - commitment
      example: commitment
    Condition:
      title: Condition
      oneOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/AddressListCondition'
        - $ref: '#/components/schemas/AdvancedListCondition'
        - $ref: '#/components/schemas/LimitRuleCondition'
        - $ref: '#/components/schemas/TxUsdThresholdRuleCondition'
        - $ref: '#/components/schemas/WebhookRuleCondition'
    Conditions:
      type: object
      description: |
        Wrapper object for a list of Conditions. Not paginated.
      properties:
        conditions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/TransferDestinationTypeCondition'
              - $ref: '#/components/schemas/TransferVelocityLimitCondition'
              - $ref: '#/components/schemas/TransferAmountCondition'
              - $ref: '#/components/schemas/TransferInitiatorsCondition'
              - $ref: '#/components/schemas/TransferWebhookCondition'
    ConfigFeeInformation:
      title: ConfigFeeInformation
      allOf:
        - type: object
          properties:
            bank:
              $ref: '#/components/schemas/BankId'
          required:
            - bank
        - oneOf:
            - $ref: '#/components/schemas/StaticFee'
            - $ref: '#/components/schemas/VariableFee'
    ConnectionKey:
      title: ConnectionKey
      oneOf:
        - $ref: '#/components/schemas/TokenConnectionKey'
        - $ref: '#/components/schemas/TokenAndSignatureConnectionKey'
        - $ref: '#/components/schemas/ApiKeyAndSecretConnectionKey'
        - $ref: '#/components/schemas/ClearLoopConnectionKey'
    ConnectionStatus:
      title: ConnectionStatus
      type: string
      enum:
        - PENDING_DEACTIVATION
        - PENDING_ACTIVATION
        - ACTIVE
        - INACTIVE
        - UNDER_REVIEW
        - REQUESTED
      description: codec for valid connection statuses
    ConnectionType:
      title: ConnectionType
      type: string
      enum:
        - DVP
        - WHITELIST
      description: codec for valid connection statuses
    ConsolidateAccountBuildRequest:
      type: object
      properties:
        consolidateAddresses:
          description: |
            Optional: restrict the consolidation to the specified receive addresses. If not provided, will consolidate the
            funds from all receive addresses up to 500 addresses.
          type: array
          items:
            type: string
        apiVersion:
          description: |
            The Trasaction Request API version to use for MPC EdDSA Hot Wallets.
            Defaults based on the wallet type and asset curve.
          type: string
          enum:
            - full
            - lite
    ConsolidateAccountBuildResponse:
      type: object
      properties:
        keyDerivationPath:
          type: string
    ConsolidateTokenIntent1:
      title: Consolidate Token
      allOf:
        - $ref: '#/components/schemas/BaseIntent2'
        - $ref: '#/components/schemas/EthBuildOptions'
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - consolidateToken
            recipients:
              type: array
              items:
                $ref: '#/components/schemas/RecipientEntry1'
            consolidateId:
              type: string
              description: Consolidation ID of this consolidation transaction
            keepAlive:
              type: string
              description: True, if excluding the minimum-funding amounts in an address during consolidation.
          required:
            - intentType
            - recipients
    ConsolidateUnspentsRequest:
      type: object
      properties:
        feeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrString'
            - example: 10000
          description: |
            Custom fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte.

            If the `feeRate` is less than the minimum required network fee, then the minimum fee applies. For example, 1000 sat/kvByte, a flat 1000 microAlgos, or a flat 10 drops of xrp. For XRP, the actual fee is usually 4.5 times the open ledger fee.

            Note: The `feeRate` overrides the `maxFeeRate` and `minFeeRate`.
        maxFeeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
            - example: 20000
          description: |
            (BTC only) The maximum fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte. The `maxFeeRate` limits the fee rate generated by both `feeMultiplier` and `numBlocks`.

            Note: The `feeRate` overrides the `maxFeeRate`.
        maxFeePercentage:
          type: integer
          description: Maximum relative portion that can be spent towards fees
        feeTxConfirmTarget:
          type: integer
          description: Block target for fee estimation
        bulk:
          type: boolean
          description: Build multiple transactions at the same time. This enables you to increase the maximum number of unspents on the `limit` parameter up to 2,000. If true, you must pass the `txFormat` as `psbt` and you can't pass the `targetAddress` or `numUnspentsToMake` parameters.
        minValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Minimum value of unspents to use in base units (e.g. satoshis). Can be used to skip very small unspents when consolidating at higher fee rates. For doge, only string is allowed.
        maxValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: |
            Maximum value of unspents to use in base units (e.g. satoshis). Should be used to prevent larger unspents from being consolidated needlessly, and that some funds remain available for spending while the consolidation transactions are in flight. For doge, only string is allowed.
        minHeight:
          type: integer
          description: Minimum height of unspents on the block chain to use
        minConfirms:
          type: integer
          description: Minimum confirmation threshold for external inputs
        enforceMinConfirmsForChange:
          type: boolean
          description: Flag for enforcing minConfirms for change inputs
        limit:
          type: integer
          description: Maximum number of unspents to use in the transaction
        numUnspentsToMake:
          type: integer
          description: Number of new unspents to make
        targetAddress:
          type: string
          description: address to use for generated outputs. Must be wallet address.
        txFormat:
          $ref: '#/components/schemas/UtxoTransactionFormat'
    ConsolidationCoins:
      type: string
      enum:
        - algo
        - talgo
        - xtz
        - txtz
        - eth
        - hteth
      description: This route is only available for Algorand, Tezos, and Eth.
    ContractType:
      title: ContractType
      type: string
      enum:
        - csa
        - mpa
        - mic
        - wvr
    ContractTypes:
      title: ContractTypes
      type: array
      items:
        type: string
        enum:
          - csa
          - mpa
          - mic
          - wvr
    CoreDaoClaimIntent:
      title: CoreDAO Claim Rewards Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - stakeClaimRewards
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntentWithCalldata'
    CoreDaoDelegateIntent:
      title: CoreDAO Delegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - delegate
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
          required:
            - intentType
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/BaseStakeIntentWithCalldata'
    CoreDaoUndelegateIntent:
      title: CoreDAO Undelegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - undelegate
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
          required:
            - intentType
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/BaseStakeIntentWithCalldata'
    CosmosContractCallIntent:
      title: Cosmos Contract Call
      allOf:
        - $ref: '#/components/schemas/BaseIntent2'
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - contractCall
            contract:
              type: string
              description: The address of the contract to call.
            msgHex:
              type: string
              description: The binary message data to send to the contract in hex format.
          required:
            - intentType
            - contract
            - msgHex
    CosmosLikeStakingDelegation:
      title: ATOM like
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    CosmosLikeStakingRequest:
      title: ATOM like
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/CosmosLikeStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/CosmosLikeStakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
    CosmosLikeStakingRequestPOSTBody:
      title: ATOM-like stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        validator:
          description: The validator to delegate to.
          type: string
          example: 017234b285929170324e1051ccd887dc08adf049650ecf5d383985b0b0048ab39b
      required:
        - validator
    CosmosLikeStakingRequestWithTransactions:
      title: ATOM like
      allOf:
        - $ref: '#/components/schemas/CosmosLikeStakingRequest'
        - type: object
          properties:
            transactions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/CosmosLikeStakingTransaction'
    CosmosLikeStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
    CosmosLikeUnStakingRequestPOSTBody:
      title: ATOM-like unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        delegationId:
          description: Optional delegation ID representing the delegation to unstake.
          type: string
        amount:
          description: Amount to unstake in base units.
          type: string
          example: '10000000000'
      required:
        - amount
    CosmosPaymentIntent:
      title: Cosmos Payment Intent
      allOf:
        - type: object
          properties:
            memo:
              $ref: '#/components/schemas/optionalString'
          required:
            - memo
        - $ref: '#/components/schemas/PaymentIntent'
    CosmosStakeIntent:
      title: Cosmos Stake Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - delegate
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intentType
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/BaseStakeIntent'
    CosmosSwitchValidatorIntent:
      title: Cosmos Switch Validator Intent
      allOf:
        - $ref: '#/components/schemas/StakeSwitchValidatorIntent'
    CosmosUnstakeIntent:
      title: Cosmos Unstake Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - undelegate
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intentType
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/BaseStakeIntent'
    CosmosWithdrawIntent:
      title: Cosmos Withdraw Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              type: string
          required:
            - validatorAddress
        - $ref: '#/components/schemas/WithdrawIntent'
    CounterpartyPartySettlementAmountsRecord:
      title: CounterpartyPartySettlementAmountsRecord
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: string
          description: For mapped settlement amounts where the amount will always be a bigint. This ensures consistent handling of large monetary values in settlements.
        description: Maps destination connection IDs to currency amounts for settlement. Record<Party (destination) connectionId, Record<Currency, Amount (bigint)>> Used for exchange-style settlements, where the exchange is always the source and client owned connections are the destination. Each entry maps a destination connection ID to the currency amounts being settled to that connection.
      description: Maps source connection IDs to destination connections and their currency amounts. Record<Counterparty (source) connectionId, Record<Party (dest) connectionId, Record<Currency, Amount (bigint)>>> Used for broker-style settlements, where the source and destination are both client-owned connections. This structure allows specifying multiple source connections, each with multiple destination connections, and the currency amounts being settled between them.
    CountryAddress:
      title: CountryAddress
      type: object
      properties:
        country:
          type: string
          minLength: 1
        address_line_1:
          $ref: '#/components/schemas/AddressOptions'
        address_line_2:
          $ref: '#/components/schemas/AddressOptions'
        city_locality:
          $ref: '#/components/schemas/AddressOptions'
        state_province:
          $ref: '#/components/schemas/AddressOptions'
        postal_code:
          $ref: '#/components/schemas/AddressOptions'
      required:
        - country
        - address_line_1
        - address_line_2
    CountryAddressFormatResponse:
      title: CountryAddressFormatResponse
      description: Response when requesting address format for a specific country
      type: object
      properties:
        rules:
          $ref: '#/components/schemas/CountryAddress'
      required:
        - rules
    CountryListResponse:
      title: CountryListResponse
      description: Response when requesting all available countries
      type: object
      properties:
        countries:
          type: object
          description: Dictionary mapping ISO 3166-1 alpha-2 country codes to their full country names
          example:
            US: United States of America
            CA: Canada
            GB: United Kingdom
            DE: Germany
          additionalProperties:
            type: string
            description: Full country name
      required:
        - countries
    CreateBankAccountRequest:
      title: CreateBankAccountRequest
      description: Schema for creating any type of bank account
      oneOf:
        - $ref: '#/components/schemas/DomesticWireBankAccountRequest'
        - $ref: '#/components/schemas/InternationalWireBankAccountRequest'
        - $ref: '#/components/schemas/AchBankAccountRequest'
        - $ref: '#/components/schemas/SepaBankAccountRequest'
        - $ref: '#/components/schemas/CbitBankAccountRequest'
        - $ref: '#/components/schemas/BlincBankAccountRequest'
    CreateBitgoChallengeResponse:
      title: CreateBitgoChallengeResponse
      type: object
      properties:
        ntilde:
          type: string
          description: Range proof challenge value
          example: e8be92b67d852d83c4e57a4c25139cbab1801654408c4260ca21d480ea5425a7a7778b30d52c24eed11363a6f7bf1efa986747a2016b91e84b9a7d49b723644f4488ec15c64d83289b1fa73a6607544a2c1964d31931ae9c0f4b5c66a0099f82d52a73d4d7a251a29f279c7f053cc0064989479d9b6d900e92641555683efadad5f08a68a6763102a7a14d4d5aecc6620587ceedb28db338858326fdad35e1b2db54b8a7679d8cad36d88c63c61aff15121c6ec06a724e16980fd334cdbbea8885f88e8a509a42b093361e3152bcf391e3a723ceb4786362fcad9c4945a372d617bebe077e1c7ee49ac81701c06ef126e1178b779f1f4be4b1a3616c3c1821b26ead5cc7b1442216162077fb125a4c9250001797e3a224c79f5cd5a78226a9192000bc584bf479aa1dd83d56628860619778a0c6d9801e2680349ccde39e604af6f1e75226c58d6f608c420eb8091def8d3c7a9a59414e9b9a1df542929c81165a46555f5f51c1cb080f04a9ccc74a5d1e3b053e1e2e4b8566d1a7995478a589
        h1:
          type: string
          description: Range proof challenge value
          example: e8be92b67d852d83c4e57a4c25139cbab1801654408c4260ca21d480ea5425a7a7778b30d52c24eed11363a6f7bf1efa986747a2016b91e84b9a7d49b723644f4488ec15c64d83289b1fa73a6607544a2c1964d31931ae9c0f4b5c66a0099f82d52a73d4d7a251a29f279c7f053cc0064989479d9b6d900e92641555683efadad5f08a68a6763102a7a14d4d5aecc6620587ceedb28db338858326fdad35e1b2db54b8a7679d8cad36d88c63c61aff15121c6ec06a724e16980fd334cdbbea8885f88e8a509a42b093361e3152bcf391e3a723ceb4786362fcad9c4945a372d617bebe077e1c7ee49ac81701c06ef126e1178b779f1f4be4b1a3616c3c1821b26ead5cc7b1442216162077fb125a4c9250001797e3a224c79f5cd5a78226a9192000bc584bf479aa1dd83d56628860619778a0c6d9801e2680349ccde39e604af6f1e75226c58d6f608c420eb8091def8d3c7a9a59414e9b9a1df542929c81165a46555f5f51c1cb080f04a9ccc74a5d1e3b053e1e2e4b8566d1a7995478a589
        h2:
          type: string
          description: Range proof challenge value
          example: e8be92b67d852d83c4e57a4c25139cbab1801654408c4260ca21d480ea5425a7a7778b30d52c24eed11363a6f7bf1efa986747a2016b91e84b9a7d49b723644f4488ec15c64d83289b1fa73a6607544a2c1964d31931ae9c0f4b5c66a0099f82d52a73d4d7a251a29f279c7f053cc0064989479d9b6d900e92641555683efadad5f08a68a6763102a7a14d4d5aecc6620587ceedb28db338858326fdad35e1b2db54b8a7679d8cad36d88c63c61aff15121c6ec06a724e16980fd334cdbbea8885f88e8a509a42b093361e3152bcf391e3a723ceb4786362fcad9c4945a372d617bebe077e1c7ee49ac81701c06ef126e1178b779f1f4be4b1a3616c3c1821b26ead5cc7b1442216162077fb125a4c9250001797e3a224c79f5cd5a78226a9192000bc584bf479aa1dd83d56628860619778a0c6d9801e2680349ccde39e604af6f1e75226c58d6f608c420eb8091def8d3c7a9a59414e9b9a1df542929c81165a46555f5f51c1cb080f04a9ccc74a5d1e3b053e1e2e4b8566d1a7995478a589
        'n':
          type: string
          description: BitGo's paillier modulus 'n'.
          example: e8be92b67d852d83c4e57a4c25139cbab1801654408c4260ca21d480ea5425a7a7778b30d52c24eed11363a6f7bf1efa986747a2016b91e84b9a7d49b723644f4488ec15c64d83289b1fa73a6607544a2c1964d31931ae9c0f4b5c66a0099f82d52a73d4d7a251a29f279c7f053cc0064989479d9b6d900e92641555683efadad5f08a68a6763102a7a14d4d5aecc6620587ceedb28db338858326fdad35e1b2db54b8a7679d8cad36d88c63c61aff15121c6ec06a724e16980fd334cdbbea8885f88e8a509a42b093361e3152bcf391e3a723ceb4786362fcad9c4945a372d617bebe077e1c7ee49ac81701c06ef126e1178b779f1f4be4b1a3616c3c1821b26ead5cc7b1442216162077fb125a4c9250001797e3a224c79f5cd5a78226a9192000bc584bf479aa1dd83d56628860619778a0c6d9801e2680349ccde39e604af6f1e75226c58d6f608c420eb8091def8d3c7a9a59414e9b9a1df542929c81165a46555f5f51c1cb080f04a9ccc74a5d1e3b053e1e2e4b8566d1a7995478a589
        p:
          type: array
          items:
            type: string
            description: Pallier proof challenge value
            example: e8be92b67d852d83c4e57a4c25139cbab1801654408c4260ca21d480ea5425a7a7778b30d52c24eed11363a6f7bf1efa986747a2016b91e84b9a7d49b723644f4488ec15c64d83289b1fa73a6607544a2c1964d31931ae9c0f4b5c66a0099f82d52a73d4d7a251a29f279c7f053cc0064989479d9b6d900e92641555683efadad5f08a68a6763102a7a14d4d5aecc6620587ceedb28db338858326fdad35e1b2db54b8a7679d8cad36d88c63c61aff15121c6ec06a724e16980fd334cdbbea8885f88e8a509a42b093361e3152bcf391e3a723ceb4786362fcad9c4945a372d617bebe077e1c7ee49ac81701c06ef126e1178b779f1f4be4b1a3616c3c1821b26ead5cc7b1442216162077fb125a4c9250001797e3a224c79f5cd5a78226a9192000bc584bf479aa1dd83d56628860619778a0c6d9801e2680349ccde39e604af6f1e75226c58d6f608c420eb8091def8d3c7a9a59414e9b9a1df542929c81165a46555f5f51c1cb080f04a9ccc74a5d1e3b053e1e2e4b8566d1a7995478a589
      required:
        - ntilde
        - h1
        - h2
        - 'n'
        - p
    CreateBlockWebhook:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/WebhookTypeBlock'
        url:
          type: string
          format: uri
          example: http://your.server.com/webhook
          description: URL to fire the webhook to.
        label:
          type: string
          description: Label of the new webhook.
        numConfirmations:
          type: integer
          minimum: 0
          example: 6
          description: Number of confirmations before triggering the webhook. If 0 or unspecified, requests will be sent to the callback endpoint when the transfer is first seen and when it is confirmed.
      required:
        - type
        - url
    CreateKey:
      type: object
      properties:
        coinSpecific:
          $ref: '#/components/schemas/KeyCreateCoinSpecific'
        encryptedPrv:
          type: string
          description: Private part of this key pair, encrypted with a passphrase that only the client knows. Required for all sources except `bitgo`.
        source:
          $ref: '#/components/schemas/KeySource'
        enterprise:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: The Enterprise that will own this key
        newFeeAddress:
          type: boolean
          description: Create a new keychain instead of fetching enterprise key (only for Ethereum)
        pub:
          allOf:
            - $ref: '#/components/schemas/Pub'
          description: Public part of this key pair. If the key type is "independent" (default) it is required for user key and is optional for backup key. If key type is "tss" this field is not required.
        isDistributedCustody:
          type: boolean
          description: Set to true if you want to create a key for distributed custody. This parameter is only valid if you have the distributed custody enterprise license enabled and are creating a BitGo key. Otherwise it will throw an error.
          example: false
        commonPub:
          type: string
          description: The commonPub for the key. This value is necessary for BLS keys when the source is either “user” or “backup”. Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key.
        commonKeychain:
          type: string
          description: The commonKeychain for the key if this is a MPC key. This value is required to be set when the type is set to “tss” and when the source is either “user” or “backup”. Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key. This value is the common pub concatenated with the common chaincode.
        keyShares:
          type: array
          items:
            $ref: '#/components/schemas/KeyShare'
          description: Only required for BitGo MPC keys. Those will be the shares from the user and the backup provider that BitGo will end up generating the BitGo key (share) from.
        type:
          $ref: '#/components/schemas/BackupKeyType'
        keyType:
          allOf:
            - $ref: '#/components/schemas/KeyType'
            - default: tss
        userGPGPublicKey:
          type: string
          description: User's public key in ASCII armored format. Only required for BitGo MPC keys.
        backupGPGPublicKey:
          type: string
          description: Backup public key in ASCII armored format (may be managed by user or KRS). Only required for BitGo MPC keys.
        isMPCv2:
          type: boolean
          description: Whether a key or wallet is using the Multi-Party Computation version 2 protocol. Optional field.
    CreateOrganizationEnterpriseResponse:
      title: CreateOrganizationEnterpriseResponse
      type: object
      properties:
        enterpriseId:
          $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
        userId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          minLength: 1
          pattern: ^[a-f0-9]{32}$
      required:
        - enterpriseId
        - userId
    CreatePolicyRule:
      type: object
      properties:
        coin:
          type: string
          example: zrx
          description: |
            If set, the rule will only apply to the given coin or ERC20 token in an
            Ethereum wallet. It is generally recommended to not set a coin for policy rules of the following types:
            `advancedWhitelist`, `allTx`, `coinAddressWhitelist`, `coinAddressBlacklist`, `webhook`.
        id:
          type: string
          description: The id of the rule, must be unique among rules in the policy
        type:
          $ref: '#/components/schemas/CreatePolicyRuleTriggers'
        condition:
          $ref: '#/components/schemas/PolicyRuleUpdateConditions'
        action:
          $ref: '#/components/schemas/PolicyRuleActions'
        lockDate:
          type: string
          description: The time at which this rule becomes immutable
          format: date-time
        generatePolicy:
          type: boolean
          description: When undefined or set to true, generates a policy enforcing the whitelist (if one has not been generated already) after the whitelist is created. If set to false, no policy will be generated.
      required:
        - id
        - type
        - action
    CreatePolicyRuleRequest:
      type: object
      description: Create or Update policy rule Request.
      required:
        - name
        - adminOnly
        - clauses
        - filteringConditions
      properties:
        name:
          type: string
          maxLength: 256
          description: Human readable name of the rule.
          example: Get approval if transferring more than 2 BTC in a minute
        adminOnly:
          type: boolean
          description: true, if the policy rule is a BitGo internal rule, false otherwise.
          example: false
        clauses:
          type: array
          description: |
            List of policy rule Clauses: a combination of Conditions and Actions.
          items:
            type: object
            description: |
              A combination of Conditions and Actions.
            required:
              - conditions
              - actions
            properties:
              conditions:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/TransferAmountConditionRequest'
                    - $ref: '#/components/schemas/TransferVelocityLimitConditionRequest'
                    - $ref: '#/components/schemas/TransferDestinationTypeConditionRequest'
                    - $ref: '#/components/schemas/TransferInitiatorsConditionRequest'
                    - $ref: '#/components/schemas/TransferWebhookConditionRequest'
              actions:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/AlwaysDenyActionRequest'
                    - $ref: '#/components/schemas/WalletAdminActionRequest'
                    - $ref: '#/components/schemas/FinalApprovalActionRequest'
                    - $ref: '#/components/schemas/EnterpriseUsersActionRequest'
                    - $ref: '#/components/schemas/EnterpriseAdminsActionRequest'
                    - $ref: '#/components/schemas/LivenessVerificationFromEnterpriseAdminActionRequest'
                    - $ref: '#/components/schemas/LivenessVerificationFromRequestorActionRequest'
                    - $ref: '#/components/schemas/LivenessVerificationFromEnterpriseUsersActionRequest'
                    - $ref: '#/components/schemas/NoneActionRequest'
        filteringConditions:
          type: array
          description: List of Filtering Conditions that must trigger for the policy rule to be Evaluated.
          items:
            anyOf:
              - $ref: '#/components/schemas/WalletIdsFilteringCondition'
              - $ref: '#/components/schemas/WalletTypeFilteringCondition'
              - $ref: '#/components/schemas/WalletAllFilteringCondition'
              - $ref: '#/components/schemas/RuleAllFilteringCondition'
        lockType:
          type: string
          description: |
            Indicates how the policy rule is locked.

            * `LOCK_AFTER_DATE` - Will lock after the lockDate set on the policy rule.
            * `PERMANENT` - Is permanently locked.
          enum:
            - LOCK_AFTER_DATE
            - PERMANENT
          example: PERMANENT
        lockDate:
          type: string
          description: |
            The date after which the policy rule will be locked. Only applicable if the policy rule is locked with
            `LOCK_AFTER_DATE`.
          format: date-time
          example: '2023-11-13T14:49:48.830522Z'
    CreatePolicyRuleTriggers:
      type: string
      enum:
        - advancedWhitelist
        - allTx
        - allTxNoFiat
        - coinAddressWhitelist
        - coinAddressBlacklist
        - velocityLimit
        - webhook
      description: What causes this rule to trigger
    CreateSendLabel:
      type: object
      properties:
        coin:
          $ref: '#/components/schemas/Coin'
        address:
          $ref: '#/components/schemas/AddressString3'
        enterpriseId:
          $ref: '#/components/schemas/Id'
        label:
          type: string
          maxLength: 250
      required:
        - coin
        - address
        - enterpriseId
        - label
    CreateSignatureShareRequest:
      type: object
      properties:
        signatureShare:
          allOf:
            - $ref: '#/components/schemas/SignatureShare'
          description: A user-provided share to be used in the ECDSA or EDDSA MPC signing flow. Please use signatureShares instead
        signatureShares:
          type: array
          items:
            $ref: '#/components/schemas/SignatureShare'
          description: User-provided shares to be used in the ECDSA or EDDSA MPC signing flow.
        signerShare:
          type: string
          description: |
            An openPGP ascii armored message (encrypted to the known HSM public key) containing the
            previous signer’s offset secret share as a 128 character hex string (64 bytes) consisting of
            the new offset “u” private component from the user [or backup] new offset Y-share as a 64 character
            hex string (32 bytes) concatenated with the new offset “chaincode” component of the new offset Y-share
            as a 64 character hex string (32 bytes). Must be provided when uploading an R share.
        userPublicGpgKey:
          type: string
          description: User’s public key of the gpg key.
    CreateTransactionRequest:
      type: object
      properties:
        idempotencyKey:
          type: string
          description: The combination of the idempotencyKey, version and walletId has to be unique. If no idempotencyKey is specified then it remains undefined for the txRequest. Note, version is an internal field that is auto incremented on every update to a txRequest.
        intent:
          $ref: '#/components/schemas/TransactionRequestIntent'
        videoApprovers:
          allOf:
            - $ref: '#/components/schemas/IdArray'
          description: (Custodial) Specify who should perform the Video ID with Trust if one should be required.
        apiVersion:
          type: string
          description: Full or Light to differentiate between the different transaction request flows.
          enum:
            - lite
            - full
          default: full
        preview:
          type: boolean
          description: |
            When set to true, the transaction request is returned without being stored in the DB.
          default: false
      required:
        - intent
    CreateWallet:
      type: object
      properties:
        coinSpecific:
          $ref: '#/components/schemas/WalletCreateCoinSpecific'
        enterprise:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: This is required for Ethereum wallets since they can only be created as part of an enterprise.
        keys:
          allOf:
            - $ref: '#/components/schemas/Keys'
          description: This is required for all wallets where the client supplies the keys to be used. The only case where this is not required is when the type is set to `custodial`.
        keySignatures:
          type: object
          properties:
            backup:
              type: string
              description: a signature of the backup pub key using the user key (useful for change address verification)
            bitgo:
              type: string
              description: a signature of the bitgo pub key using the user key (useful for change address verification)
        label:
          $ref: '#/components/schemas/WalletLabel'
        multisigType:
          $ref: '#/components/schemas/WalletMultisigType'
        address:
          $ref: '#/components/schemas/WalletCustomAddress'
        m:
          allOf:
            - $ref: '#/components/schemas/NumSignatures'
          description: This is required for all wallets where the client supplies the keys to be used. The only case where this is not required is when the type is set to `custodial`.
        'n':
          allOf:
            - $ref: '#/components/schemas/NumKeychains'
          description: This is required for all wallets where the client supplies the keys to be used. The only case where this is not required is when the type is set to `custodial`.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/WalletTypePublic'
        walletVersion:
          type: integer
          default: 1
          description: (ETH only) Specify the wallet creation contract version used when creating a wallet contract. Use 0 for the old wallet creation, 1 for the new wallet creation, where it is only deployed upon receiving funds. 2 for wallets with the same functionality as v1 but with NFT support. 3 for MPC wallets. 4 is same as v2 but with some changes related to network identifier and encoding of tx data. v4 is applicable for Arbitrum, Optimism, ZkSync, and other EVM-compatible chains that we will onboard in the future. 5 for MPC MPCv2 wallets. 6 for EVM MPCv2 wallets with receive addresses.
          minimum: 0
          maximum: 6
        eip1559:
          type: object
          description: '(ETH walletVersion: 0 wallets only) Specify eip1559 fee parameters in wallet creation transactions.'
          properties:
            maxPriorityFeePerGas:
              type: string
              description: Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens.
            maxFeePerGas:
              type: string
              description: Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens.
          required:
            - maxPriorityFeePerGas
            - maxFeePerGas
      required:
        - label
    CreateWebhookSecretResponse:
      title: CreateWebhookSecretResponse
      type: object
      properties:
        secret:
          type: string
      required:
        - secret
    Currencies:
      type: array
      items:
        $ref: '#/components/schemas/Currency'
    Currency:
      required:
        - id
        - name
        - symbol
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the currency
        symbol:
          type: string
          description: Symbol of the currency
        name:
          type: string
          description: Name of the currency
      example:
        id: 6016e0a9-545a-45fb-8370-caab1680956a
        symbol: BTC
        name: Bitcoin
    Currency1:
      title: Currency
      type: object
      properties:
        bitcoinUnit:
          type: string
        currency:
          type: string
      required:
        - bitcoinUnit
        - currency
    CustodialPairedValue:
      title: Custodial-paired wallet
      type: object
      description: Custodial-paired wallet.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - custodialPaired
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Custodial Paired Wallet
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: A custodial paired wallet
    CustodialValue:
      title: Custodial cold wallet
      type: object
      description: Custodial cold wallet.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - custodial
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Custodial Wallet
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: A custodial wallet
    CustodialWalletSubType:
      title: CustodialWalletSubType
      type: string
      enum:
        - custodialCold
        - custodialHot
    CustomChangeKeySignatures:
      type: object
      properties:
        user:
          type: string
        backup:
          type: string
        bitgo:
          type: string
      description: |
        Signatures for the keys which will be used to derive custom change addresses.

        **Note:** These signatures may only be set once for each wallet and are not modifiable after being set.
    DOTBuildOptions:
      allOf:
        - $ref: '#/components/schemas/AccountBaseBuildOptions2'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/DOTFeeOptions'
    DOTClaimIntent:
      title: Dot Claim Unstake
      allOf:
        - $ref: '#/components/schemas/DOTBuildOptions'
        - $ref: '#/components/schemas/WithdrawIntent2'
    DOTFeeOptions:
      type: object
      properties:
        amount:
          type: string
        unit:
          type: string
          enum:
            - baseUnit
            - cpu
            - ram
        formula:
          type: string
          enum:
            - fixed
            - feeRate
            - perKB
            - custom
        type:
          type: string
          enum:
            - base
            - max
            - tip
      required:
        - amount
    DateTime:
      type: string
      format: date-time
      example: {}
    DefaultChangeAddressType:
      type: string
      example: p2wsh
      enum:
        - p2sh
        - p2shP2wsh
        - p2wsh
        - p2tr
        - p2trMusig2
        - default
      description: |
        (UTXO only) The default script type to use for change for this wallet. Per transaction, you override the default with the `changeAddressType` parameter. If `default` is provided, it will clear the `changeAddressType` default on the wallet. Note that each UTXO coin has different address types available. For example, Only BTC supports `p2tr`.
    DelegationAccrual:
      type: object
      properties:
        rewardsReceived:
          description: The total rewards received over the lifetime of the wallet.
          type: string
        delegated:
          description: The total rewards delegated (staked).
          type: string
        pendingDelegated:
          description: The total amount pending to be delegated (staked).
          type: string
        pendingUndelegated:
          description: Total amount pending to be undelegated (unstaked).
          type: string
        spendable:
          description: Total spendable (withdrawable) amount in the wallet.
          type: string
        locked:
          description: The total amount locked but not delegated (staked).  Example is staking rewards that are not re-staked and compounding.
          type: string
        delegationId:
          description: The delegation ID.
          type: string
        delegationAddress:
          description: The delegation address.
          type: string
        withdrawalAddress:
          description: The withdrawal address.
          type: string
        walletId:
          description: The wallet ID.
          type: string
        enterpriseId:
          description: The enterprise ID.
          type: string
        coin:
          description: The staking asset.
          type: string
        date:
          description: The date and time of the accrual record.
          type: string
          format: date-time
    DelegationAccruals:
      type: object
      properties:
        accruals:
          description: An array of delegation accruals.
          type: array
          items:
            $ref: '#/components/schemas/DelegationAccrual'
        page:
          type: integer
          description: The page number for paging purposes.
        totalPages:
          type: integer
          description: The total number of pages for paging purposes.
        totalElements:
          type: integer
          description: The number of elements per page used for paging purposes.
    DelegationResults:
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 500
          items:
            oneOf:
              - $ref: '#/components/schemas/BeraStakingDelegation'
              - $ref: '#/components/schemas/BtcStakingDelegation'
              - $ref: '#/components/schemas/CosmosLikeStakingDelegation'
              - $ref: '#/components/schemas/DotStakingDelegation'
              - $ref: '#/components/schemas/EthStakingDelegation'
              - $ref: '#/components/schemas/MaticStakingDelegation'
              - $ref: '#/components/schemas/NearStakingDelegation'
              - $ref: '#/components/schemas/SolStakingDelegation'
              - $ref: '#/components/schemas/StxStakingDelegation'
              - $ref: '#/components/schemas/TonStakingDelegation'
              - $ref: '#/components/schemas/WctStakingDelegation'
        page:
          type: integer
          description: The page number for paging purposes.
        totalPages:
          type: integer
          description: The total number of pages for paging purposes.
        totalElements:
          type: integer
          description: The number of elements per page used for paging purposes.
    DeleteEnterpriseUser:
      type: object
      properties:
        username:
          type: string
      required:
        - username
    DeployAddressAndForwardTokenResponse:
      title: DeployAddressAndForwardTokenResponse
      type: object
      properties:
        txId:
          type: string
      required:
        - txId
    Deposit:
      type: object
      properties:
        toAddress:
          type: string
          description: The address the deposit will be received at
          example: 1234567890ABCDEF-XJBCOEF
        valueString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The value (in cents/base units) of the deposit
        token:
          type: string
          description: If this is a token entry, the token's symbol
          example: ousd
        toBankAccount:
          $ref: '#/components/schemas/BankAccountRequest'
      required:
        - toAddress
        - token
    DestinationTypeCoinConditionParameter:
      title: Asset
      type: object
      description: The asset this condition applies to.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - coin
          example: coin
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Asset
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The asset this condition applies to. Optional.
        type:
          type: string
          description: A cryptocurrency asset.
          enum:
            - COIN
          example: COIN
        required:
          type: string
          description: A value is not required.
          enum:
            - OPTIONAL
          example: OPTIONAL
        allowMultiple:
          type: boolean
          description: Only one value can be provided.
          example: 'false'
    DestinationTypeTypeConditionParameter:
      title: Destination
      type: object
      description: The type of destination this condition will match.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
        - values
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - type
          example: type
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Type
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The type of destination this condition will match
        type:
          type: string
          description: Accepts only enumerated values as listed in the 'values' property of this condition.
          enum:
            - ENUMERATED
          example: ENUMERATED
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
        values:
          type: array
          description: A list of valid values, only values from this list will be accepted.
          items:
            anyOf:
              - $ref: '#/components/schemas/WhitelistedAddressValue'
              - $ref: '#/components/schemas/NonWhitelistedAddressValue'
    DisclaimerAttributes:
      type: object
      properties:
        staking:
          type: object
          properties:
            info:
              type: array
              items:
                type: string
            transactionsNeeded:
              type: number
            stakeWarmupPeriodDesc:
              type: string
            rewardPercentageRate:
              type: string
            rewardsCompounding:
              type: boolean
        unstaking:
          type: object
          properties:
            info:
              type: array
              items:
                type: string
            transactionsNeeded:
              type: number
            unStakeCooldownPeriodDesc:
              type: string
    DisputeClosure:
      title: DisputeClosure
      type: object
      properties:
        id:
          type: string
          title: uuid
        createdAt:
          oneOf:
            - type: string
            - {}
        updatedAt:
          oneOf:
            - type: string
            - {}
        closedBy:
          $ref: '#/components/schemas/ClosedByUnion'
        userId:
          type: string
          minLength: 1
        notes:
          type: string
          minLength: 1
        payload:
          type: string
        signature:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - closedBy
        - userId
        - notes
    DisputeClosureOutput:
      title: DisputeClosureOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the dispute closure.
          title: uuid
        closedBy:
          allOf:
            - $ref: '#/components/schemas/ClosedByUnion'
          description: Who closed the dispute. - `admin` - The dispute was closed by an admin. - `client` - The dispute was closed by a client.
        userId:
          type: string
          description: The id of the user who closed the dispute.
          minLength: 1
        notes:
          type: string
          description: notes entered by the user when closing the dispute.
          minLength: 1
        adjustedSettlementTransfers:
          allOf:
            - $ref: '#/components/schemas/DisputedSettlementTransfersOutput'
          description: The resulting settlement transfers generated when the dispute was closed
        createdAt:
          type: string
          description: The date  and time when the dispute closure was created.
          format: date-time
          title: ISO Date String
      required:
        - id
        - closedBy
        - userId
        - notes
        - adjustedSettlementTransfers
        - createdAt
    DisputedSettlementTransfersOutput:
      title: DisputedSettlementTransfersOutput
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: The unique identifier of the settlement transfer.
            title: uuid
          sourceTradingAccountId:
            type: string
            description: The go account id of the source party.
            minLength: 1
          destinationTradingAccountId:
            type: string
            description: The go account id of the destination party.
            minLength: 1
          destinationNetworkAccountId:
            type: string
            description: The network account id of the destination party.
            title: uuid
          disputeClosureId:
            type: string
            description: The unique identifier of the dispute closure the settlement transfer was created from. This is a UUID that uniquely identifies dispute closure if the transfer was created as a result of closing a dispute.
            title: uuid
          currency:
            type: string
            description: The currency involved in the settlement movement.
            minLength: 1
          quantity:
            allOf:
              - $ref: '#/components/schemas/NonZeroBigAmount'
            description: The amount of currency being transferred in the settlement transfer. This is a non-zero value represented as a string. If the value is positive, that means funds were moved from the source account to the destination account. If the value is negative, that means funds were moved from the destination account to the source account.
          status:
            allOf:
              - $ref: '#/components/schemas/SettlementTransferStatus'
            description: 'The status of the settlement transfer. Possible values and implications are: - pending: The transfer is pending and has not yet been processed. - pending_onchain: The transfer is pending on-chain movement (only relevant to on-chain settlements). - onchain_initiated: The transfer has been initiated on-chain (only relevant to on-chain settlements). - onchain_failed: The on-chain transfer has failed (only relevant to on-chain settlements). - completed: The transfer has been completed successfully. - failed: The transfer has failed. - rejected: The transfer has been rejected. - disputed: The transfer is disputed.'
          createdAt:
            type: string
            description: The date and time when the settlement transfer was created. Represented as an ISO 8601 formatted date string.
            format: date-time
            title: ISO Date String
          updatedAt:
            type: string
            description: The date and time when the settlement transfer was last updated. Represented as an ISO 8601 formatted date string.
            format: date-time
            title: ISO Date String
          settlementId:
            type: string
            description: The unique identifier of the settlement the settlement transfer is associated with. This is a UUID that uniquely identifies the settlement. Will only be undefined if the settlement transfer is in `pending_settlement_assignment` status.
            title: uuid
          sourceNetworkAccountId:
            type: string
            description: The network account id of the source party.
            title: uuid
        required:
          - id
          - sourceTradingAccountId
          - destinationTradingAccountId
          - destinationNetworkAccountId
          - disputeClosureId
          - currency
          - quantity
          - status
          - createdAt
          - updatedAt
    DistributedCustody:
      title: DistributedCustody
      type: object
      properties:
        signingBitgoOrg:
          $ref: '#/components/schemas/BitgoOrg'
    DistributedCustodyUpdateEnterprise:
      type: object
      description: Parameters associated with distributed custody enterprises. If you want to remove 'signingBitgoOrg', set it to null.
      properties:
        signingBitgoOrg:
          type: string
          description: BitGo Organization related to this entity. Allowed values are BitGo Inc, BitGo Trust, BitGo New York, BitGo Germany, BitGo Switzerland, Frankfurt DE Trust, BitGo Sister Trust 1, BitGo Korea, BitGo Singapore, null
          nullable: true
    DomesticWireAccountResponseProps:
      title: DomesticWireAccountResponseProps
      type: object
      properties:
        type:
          type: string
          enum:
            - wire
        routingNumber:
          $ref: '#/components/schemas/RoutingNumberString'
        accountType:
          $ref: '#/components/schemas/OptionalAccountType'
      required:
        - type
        - routingNumber
        - accountType
    DomesticWireBankAccount:
      title: Domestic Wire Bank Account
      type: object
      description: |
        An external bank account. `routingNumber` must be set for US bank accounts.
        `swiftCode` must be set for banks outside the US.
      properties:
        accountNumber:
          description: Bank account number or IBAN.
          type: string
          minLength: 1
          maxLength: 34
          example: 114584906
        enterpriseId:
          $ref: '#/components/schemas/Id'
        address:
          type: string
          example: 2390 El Camino Real, Palo Alto, CA 94306
        address1:
          type: string
          example: 2390 El Camino Real
        address2:
          type: string
          example: Palo Alto, CA 94306
        address3:
          type: string
          example: ''
        name:
          type: string
          example: America California Bank
        ownerName:
          type: string
          example: Donald E. Knuth
        ownerAddress:
          type: string
          example: 2390 El Camino Real, Palo Alto, CA 94306
        owner:
          type: object
          description: Bank account owner
          properties:
            name:
              type: string
              example: Donald E. Knuth
            address1:
              type: string
              example: Computer Science Department
            address2:
              type: string
              example: Stanford University
            address3:
              type: string
              example: Stanford, CA 94305-9045
          required:
            - name
            - address1
        routingNumber:
          description: US bank routing number. Required for domestic wire transfers within the US.
          type: string
          example: '129131673'
          minLength: 9
          maxLength: 9
          pattern: ^[0-9]+$
        shortCountryCode:
          $ref: '#/components/schemas/ShortCountryCode'
        type:
          $ref: '#/components/schemas/BankAccountType'
        currency:
          $ref: '#/components/schemas/BankAccountCurrency'
        furtherCreditTo:
          type: string
          example: Donald E. Knuth
        intermediaryBankName:
          type: string
          example: America California Bank
        intermediaryBankId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
      required:
        - accountNumber
        - address1
        - shortCountryCode
        - name
        - owner
        - enterpriseId
        - routingNumber
    DomesticWireBankAccountRequest:
      title: DomesticWireBankAccountRequest
      description: Request schema for creating a domestic wire bank account
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - wire
              description: Must be 'wire' for domestic wire accounts
            routingNumber:
              type: string
              description: Routing number for the domestic wire account
          required:
            - type
            - routingNumber
        - $ref: '#/components/schemas/BankAccountRequest1'
    DomesticWireBankAccountResponse:
      title: DomesticWireBankAccountResponse
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/DomesticWireAccountResponseProps'
        - $ref: '#/components/schemas/BankAccountResponseProps'
    DotAccountBaseBuildOptions:
      title: DotAccountBaseBuildOptions
      allOf:
        - type: object
          properties:
            fee:
              type: object
              properties:
                amount:
                  oneOf:
                    - type: string
                    - type: number
                formula:
                  type: string
                  enum:
                    - fixed
                    - feeRate
                    - perKB
                    - custom
                type:
                  type: string
                  enum:
                    - base
                    - max
                    - tip
                unit:
                  type: string
                  enum:
                    - baseUnit
                    - cpu
                    - ram
              required:
                - amount
        - $ref: '#/components/schemas/AccountBaseBuildOptions'
    DotAddress:
      title: Dot Address
      type: object
      properties:
        rootAddress:
          type: string
        nonceTracker:
          type: object
          properties:
            lastReservedNonce:
              type: number
            lastExecutedNonce:
              type: number
            detectedMissingNonces:
              type: array
              items:
                type: object
                properties:
                  nonce:
                    type: number
                  isNonceLocked:
                    type: boolean
                  nonceLockExpireTime:
                    type: string
                    format: date
                    title: Date String
                required:
                  - nonce
                  - isNonceLocked
            detecMissingNoncesData:
              type: array
              items:
                type: object
                properties:
                  nonce:
                    type: number
                  isNonceLocked:
                    type: boolean
                  nonceLockExpireTime:
                    type: string
                    format: date
                    title: Date String
                required:
                  - nonce
                  - isNonceLocked
          required:
            - lastReservedNonce
            - lastExecutedNonce
            - detectedMissingNonces
            - detecMissingNoncesData
      required:
        - rootAddress
        - nonceTracker
    DotConsolidateIntent:
      title: DOT Consolidate Intent
      allOf:
        - $ref: '#/components/schemas/AccountBaseConsolidateIntent'
    DotCreateAccountIntent:
      title: DOT Create Account Intent
      allOf:
        - type: object
          properties:
            delayBlocks:
              type: string
            proxyType:
              type: string
            index:
              $ref: '#/components/schemas/optionalNumber'
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - delayBlocks
            - proxyType
        - $ref: '#/components/schemas/AccountBaseCreateAccountIntent'
        - $ref: '#/components/schemas/DotAccountBaseBuildOptions'
    DotPaymentIntent:
      title: DOT Payment Intent
      allOf:
        - type: object
          properties:
            proxy:
              $ref: '#/components/schemas/DotProxy'
            owner:
              $ref: '#/components/schemas/optionalString'
          required:
            - proxy
            - owner
        - $ref: '#/components/schemas/PaymentIntent'
        - $ref: '#/components/schemas/DotAccountBaseBuildOptions'
    DotPaymentIntent1:
      title: DOT Payment Intent
      allOf:
        - type: object
          properties:
            proxy:
              $ref: '#/components/schemas/DotProxy'
            owner:
              $ref: '#/components/schemas/optionalString'
          required:
            - proxy
            - owner
        - $ref: '#/components/schemas/PaymentIntent1'
        - $ref: '#/components/schemas/DotAccountBaseBuildOptions'
    DotProxy:
      title: DotProxy
      type: object
      properties:
        name:
          $ref: '#/components/schemas/optionalString'
        addressString:
          $ref: '#/components/schemas/optionalString'
        asset:
          $ref: '#/components/schemas/optionalString'
        amountString:
          $ref: '#/components/schemas/optionalString'
    DotStakingDelegation:
      title: DOT
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    DotStakingIntent:
      title: DOT Staking Intent
      allOf:
        - type: object
          properties:
            amount:
              $ref: '#/components/schemas/Amount'
            stakingProxy:
              type: string
            addToStake:
              $ref: '#/components/schemas/optionalBoolean'
            addProxy:
              $ref: '#/components/schemas/optionalBoolean'
          required:
            - amount
            - stakingProxy
        - $ref: '#/components/schemas/StakeIntent'
        - $ref: '#/components/schemas/DotAccountBaseBuildOptions'
    DotStakingRequest:
      title: DOT
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/DotStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/DotStakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
    DotStakingRequestPOSTBody:
      title: DOT stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '10000000000'
    DotStakingRequestWithTransactions:
      title: DOT
      allOf:
        - $ref: '#/components/schemas/DotStakingRequest'
        - type: object
          properties:
            transactions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/DotStakingTransaction'
    DotStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
    DotUnStakingRequestPOSTBody:
      title: DOT unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
        amount:
          description: Amount to unstake in base units.
          type: string
          example: '10000000000'
      required:
        - type
    DotUnstakingIntent:
      title: DOT Unstaking Intent
      allOf:
        - type: object
          properties:
            amount:
              $ref: '#/components/schemas/Amount'
            stakingProxy:
              type: string
            stopStaking:
              $ref: '#/components/schemas/optionalBoolean'
          required:
            - amount
            - stakingProxy
        - $ref: '#/components/schemas/UnstakeIntent'
        - $ref: '#/components/schemas/DotAccountBaseBuildOptions'
    DotWallet:
      title: Dot Wallet
      type: object
      properties:
        rootAddress:
          type: string
        pendingChainInitialization:
          type: boolean
        nonceAddress:
          type: string
      required:
        - rootAddress
        - pendingChainInitialization
    DotWalletStakingSpendableAttributes:
      type: object
      properties:
        stakingSpendableAttributes:
          $ref: '#/components/schemas/StakingSpendableAttributes'
        unstakingSpendableAttributes:
          $ref: '#/components/schemas/UnStakingSpendableAttributes'
    DotWalletStakingStateAttributes:
      type: object
      properties:
        spendableAttributes:
          $ref: '#/components/schemas/DotWalletStakingSpendableAttributes'
        permissionAttributes:
          $ref: '#/components/schemas/WalletStakingPermissionAttributes'
        disclaimerAttributes:
          $ref: '#/components/schemas/WalletStakingDisclaimerAttributes'
    DotWithdrawStakeIntent:
      title: DOT Withdraw Stake Intent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/WithdrawIntent'
        - $ref: '#/components/schemas/DotAccountBaseBuildOptions'
    DuplicateSequenceId:
      title: Duplicate SequenceId
      allOf:
        - $ref: '#/components/schemas/PlatformPlatformError'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - DuplicateSequenceId
          required:
            - name
    DuplicateSequenceId1:
      title: Duplicate SequenceId
      allOf:
        - $ref: '#/components/schemas/PlatformError3'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - DuplicateSequenceId
          required:
            - name
    EIP1559FeeOptions:
      title: EIP1559FeeOptions
      type: object
      properties:
        gasLimit:
          $ref: '#/components/schemas/optionalNumber'
        maxFeePerGas:
          $ref: '#/components/schemas/optionalNumber'
        maxPriorityFeePerGas:
          $ref: '#/components/schemas/optionalNumber'
    ESignatures:
      title: ESignatures
      type: array
      items:
        type: object
        properties:
          contractSignerNameFull:
            type: string
            minLength: 1
          contractSignedDate:
            type: string
            format: date-time
            title: ISO Date String
          contractSignedIPAddress:
            type: string
            minLength: 1
          contractType:
            $ref: '#/components/schemas/ContractType'
          contractVersion:
            type: string
            minLength: 1
          userAgreesToTerms:
            type: boolean
        required:
          - contractSignerNameFull
          - contractSignedDate
          - contractSignedIPAddress
          - contractType
          - contractVersion
          - userAgreesToTerms
    ETHSignMessageIntent:
      title: Eth sign message
      allOf:
        - $ref: '#/components/schemas/BaseIntent2'
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - signMessage
          required:
            - intentType
    EcdsaConfig:
      title: EcdsaConfig
      type: object
      properties:
        challenge:
          $ref: '#/components/schemas/ChallengePartyConfig'
      required:
        - challenge
    Email:
      type: string
      format: email
      example: user@example.com
    Email1:
      title: Email
      type: object
      properties:
        email:
          type: string
          example: user@email.com
          format: email
        verified:
          type: boolean
          example: true
      required:
        - email
        - verified
    EmergencyPhone:
      type: string
      description: Phone number for emergencies
      example: '+11234567890'
    EnableTokenIntent:
      title: EnableTokenIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - enableToken
            enableTokens:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  address:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - name
          required:
            - intentType
            - enableTokens
        - $ref: '#/components/schemas/BaseIntent'
    EncryptedShare:
      title: EncryptedShare
      allOf:
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ShareType'
          required:
            - type
        - $ref: '#/components/schemas/BaseShare'
    Enterprise:
      title: Enterprise
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EnterpriseIdString'
        name:
          type: string
          example: Small Company
        additionalEnterpriseInfo:
          $ref: '#/components/schemas/AdditionalEnterpriseInfo'
        bitgoOrg:
          allOf:
            - $ref: '#/components/schemas/BitgoOrg'
          description: BitGo Organization related to this entity
        kycState:
          $ref: '#/components/schemas/KycState'
        legalIdentifiers:
          $ref: '#/components/schemas/LegalIdentifiers'
        type:
          type: string
        latestSAVersionSigned:
          type: number
          example: 0
        travelRule:
          type: boolean
        productLicenses:
          type: array
          items:
            type: string
        canAccessBorrowing:
          type: boolean
          description: whether the enterprise has the licence for BitGo Prime Borrowing
        canAccessLending:
          type: boolean
          description: whether the enterprise has the licence for BitGo Prime Lending
        canAccessSettlement:
          type: boolean
          description: whether the enterprise has the licence to utilize settlement functionality
        canAccessTrading:
          type: boolean
          description: whether the enterprise has the licence to access BitGo Trading
        canCreateColdWallet:
          type: boolean
          description: whether the enterprise has the license to create cold wallets
        canCreateHotWallet:
          type: boolean
          description: whether the enterprise has the license to create hot wallets
        canCreateCustodialWallet:
          type: boolean
          description: whether the enterprise has the license to create custodial wallets
        canCreateOffchainWallet:
          type: boolean
          description: whether the enterprise has the license to create trading accounts
        oneTimeFees:
          type: array
          items:
            type: string
        upfrontPaymentStatus:
          type: string
        ethAlwaysUseHop:
          type: boolean
          description: Always use hop address for ETH transactions
        usersViewAllWallets:
          type: boolean
          description: All users on the enterprise can view all enterprise wallets, even if they are not viewers on the wallet itself
          example: true
        videoIdWaived:
          type: boolean
          description: Whether the customer has waived the need for Video ID on low risk withdrawals.
          example: false
        tradeOnboardingAgreement:
          allOf:
            - $ref: '#/components/schemas/OnboardingAgreement'
          description: Who & when the MPA license was ack'd
        stakingServicesAgreement:
          $ref: '#/components/schemas/OnboardingAgreement'
        custodyServicesAgreement:
          $ref: '#/components/schemas/OnboardingAgreement'
        accountType:
          allOf:
            - $ref: '#/components/schemas/AccountType'
          description: Indicates which type of KYC process the enterprise has to complete
        businessModel:
          $ref: '#/components/schemas/BusinessModel'
        salesforceAccountId:
          type: string
          description: Opportunity ID from Salesforce
        salesforceOpportunityId:
          type: string
        opportunityName:
          type: string
          description: Opportunity Name from Salesforce
        salesEmail:
          type: string
        cheetahAccountId:
          type: string
          description: CheetahAccountID is the unique ID for a BitGo Trust enterprise in Cheetah, which is the accounting system used by Trust.
        primaryContact:
          type: string
          description: The Id of the User who is the primary contact
          example: 59cd72485007a239fb00282ed480da1f
          minLength: 1
          pattern: ^[0-9a-f]{32}$
        organizationId:
          $ref: '#/components/schemas/OrganizationIdString'
        emergencyPhone:
          type: string
          description: Phone number for emergencies
          example: '+11234567890'
        pricingPlan:
          type: string
          description: The pricing plan of the enterprise
        approvalsRequired:
          type: number
          description: How many Enterprise Admins are required for action to fire
          example: 1
        mutablePolicyWindow:
          type: number
          description: Time in seconds after which policies on this Enterprise cannot be updated
          example: 172800
        freeze:
          $ref: '#/components/schemas/Freeze'
        bitgoEthKey:
          type: string
          description: The public portion of the ethererum key generated for the enterprise fee address
        ethFeeAddress:
          type: string
          description: The eth fee address used to pay for network transaction fees of this enterprise
        walletLimit:
          type: object
          additionalProperties:
            type: number
        preferredUi:
          allOf:
            - $ref: '#/components/schemas/AvailableUI'
          description: The UI that this enterprise prefers to use
        custodialWalletLimit:
          nullable: true
          type: object
          additionalProperties:
            type: number
        featureFlags:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string
        publicLabels:
          type: array
          items:
            type: string
            description: Subset of labels that are OK to return back to client in GetEnterpriseResponse
        licenses:
          type: array
          items:
            type: string
            description: New licences that are not stored as flags. Tax requires Portfolio Professional or Institutional
        ellipticId:
          type: string
          description: Identifier for environment variables for a customer's Elliptic API credentials
        ellipticHotWallets:
          type: boolean
          description: Hot wallet transactions on this enterprise are monitored in Elliptic
        vaspId:
          type: string
        bitgoVaspId:
          type: string
        coinSpecific:
          type: object
          additionalProperties: {}
        walletCounts:
          type: object
          description: Number of wallets per coin
          properties:
            enterpriseWallets:
              type: object
              additionalProperties:
                type: number
          required:
            - enterpriseWallets
        activePricingType:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/FlattenedPricingType'
        source:
          $ref: '#/components/schemas/AggregatorSourceType'
        totalWalletsCount:
          type: number
          description: The total number of wallets in the enterprise
          example: 1
        internal:
          $ref: '#/components/schemas/EnterpriseInternal'
        distributedCustody:
          $ref: '#/components/schemas/DistributedCustody'
        migratedToNewPolicyService:
          type: boolean
          description: Whether the enterprise has been migrated to the new policy service
        videoIdUsers:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
                description: The email of the user
                minLength: 1
              userId:
                type: string
                description: The user ID
                minLength: 1
              inviter:
                type: string
                description: The inviter of the user
                minLength: 1
              state:
                allOf:
                  - $ref: '#/components/schemas/VideoIdUserState'
                description: The state of the user
              videoCallId:
                type: string
                description: The user's video call ID
              approvalDate:
                type: string
                description: The date the user was approved
              archivedDate:
                type: string
                description: The date the user was archived
              pendingApprovalId:
                type: string
                description: The ID if the user is pending approval
              videoLink:
                type: string
                description: The user's video link
              enterpriseId:
                type: string
                description: EnterpriseId of enterprise this video users belongs to
              enterpriseName:
                type: string
                description: EnterpriseName of enterprise this video users belongs to
            required:
              - email
              - userId
              - inviter
              - state
            description: IDs of users on the enterprise that are approved for custodial video ID
        sourceConfig:
          type: array
          items:
            type: object
            properties:
              source:
                $ref: '#/components/schemas/AggregatorSourceType'
              metadata:
                type: object
                description: 'The following fields: source, showBanner, readyForDistribution, showVideoIdBanner, ftxCreditorId were added for FTX insitutional distribution. Reference: https://bitgoinc.atlassian.net/browse/COPS-2695'
                properties:
                  showBanner:
                    type: boolean
                  readyForDistribution:
                    type: boolean
                  showVideoIdBanner:
                    type: boolean
                  ftxCreditorId:
                    type: string
                  ftxHost:
                    $ref: '#/components/schemas/FtxHostType'
                  creditorId:
                    type: string
            required:
              - source
            description: Array to store configs, upon which certain actions are taken, per source
        videoIdRequired:
          type: boolean
          description: Check for video ID Users
        contract:
          allOf:
            - $ref: '#/components/schemas/EnterpriseContract'
          description: Contract information
        referralCode:
          allOf:
            - $ref: '#/components/schemas/ReferralCodeString'
          description: Referral code
        oauthSetting:
          allOf:
            - $ref: '#/components/schemas/OAuthSetting'
          description: oauth setting of the enterprise *
        optOutOfPoints:
          type: boolean
          description: Opt Out of Points System Flag
        requestedBitgoOrg:
          allOf:
            - $ref: '#/components/schemas/BitgoOrg'
          description: Requested BitGo Org
        requestedProducts:
          type: array
          items:
            type: string
            enum:
              - BitGo MMI
              - BitGo Qualified Custody
              - BitGo Qualified Custody & Hot Wallet
              - Borrowing
              - Borrowing / Lending
              - Lending
              - NFTs
              - Self Custody
              - 'Go Network: Off Exchange Settlement'
              - Staking
              - Trade
              - Transactional / Hot Wallet
              - Wrapped Asset Services
              - Escrow
              - Distributed Custody Wallet
              - Token Management (HZ)
              - Platform Integration (B2B2C)
              - BitGo Wealth Management (HZ)
              - BitGo Concierge
              - Coincover Referral
              - 'Go Network: Fiat currency Settlement'
              - Fiat Currency Custody
              - Excess Insurance
              - Setup
              - Lightning
              - Liquidity Provider
              - Alliance Agreement
              - BitGo Custody
              - BitGo MMI (Inc)
              - Coincover Referral (Inc)
              - Custom Project
              - NFTs (Inc)
              - Other (Inc)
              - Partial Signature
              - Portfolio & Tax
              - Professional Services
              - Setup (Inc)
              - Staking (Inc)
              - Platform Integration (B2B2C) (Inc)
            description: Requested Products
        requestedBitgoProducts:
          type: array
          items:
            type: string
            enum:
              - Instant Fee Wallets
              - Go Account
              - Settlement
              - Tax
              - Trade API
              - Margin Trading
              - Elliptic
              - CryptoCompare
              - MetaMask
              - Custody
              - Borrowing
              - Lending
              - DeFi
              - Cold Self-Custody
              - Go Network
              - Staking
              - Trade
              - Hot Self-Custody
              - Escrow
              - Distributed Custody
              - Advanced Wallets
            description: Requested BitGo Products
      required:
        - id
        - name
        - additionalEnterpriseInfo
        - bitgoOrg
        - kycState
        - legalIdentifiers
        - type
        - latestSAVersionSigned
        - travelRule
        - productLicenses
        - canAccessBorrowing
        - canAccessLending
        - canAccessSettlement
        - canAccessTrading
        - canCreateColdWallet
        - canCreateHotWallet
        - canCreateCustodialWallet
        - canCreateOffchainWallet
        - oneTimeFees
        - upfrontPaymentStatus
        - ethAlwaysUseHop
        - usersViewAllWallets
        - videoIdWaived
    EnterpriseAccountType:
      type: string
      description: Indicates which type of KYC process the enterprise has to complete
      enum:
        - individual
        - entity
    EnterpriseActiveKits:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/AuditableItem'
          - $ref: '#/components/schemas/EnterpriseKitName'
    EnterpriseActivePricingType:
      allOf:
        - $ref: '#/components/schemas/AuditableItem'
        - $ref: '#/components/schemas/EnterprisePricingType'
    EnterpriseAdminAction:
      title: Require enterprise-admin approval
      type: object
      description: Requires approval from an enterprise admin.
      required:
        - name
        - label
        - description
        - status
        - adminOnly
      properties:
        name:
          type: string
          description: The name of the action.
          enum:
            - approvals.customer.enterpriseAdmin
          example: approvals.customer.enterpriseAdmin
        label:
          type: string
          description: A label for the action which can be shown to an end user.
          example: Enterprise Admin
        description:
          type: string
          description: A description for the action which can be shown to an end user.
          example: Enterprise admin approval
        status:
          type: string
          description: |
            Status of the action. Indicates if the Actions is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The action is available for use.
            * `INACTIVE` - The action is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        adminOnly:
          type: boolean
          description: true, if this is an internal action, false otherwise.
          example: false
    EnterpriseAdminActionRequest:
      title: Require enterprise-admin approval
      type: object
      description: Require enterprise-admin approval.
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.customer.enterpriseAdmin
          example: approvals.customer.enterpriseAdmin
        operator:
          $ref: '#/components/schemas/OperatorType'
    EnterpriseAdminsActionRequest:
      title: Enterprise admin approval
      type: object
      description: Require approval from enterprise admins.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.customer.enterpriseAdmin
          example: approvals.customer.enterpriseAdmin
        parameters:
          type: object
          description: Required data needed to configure the Action.
          required:
            - minRequired
          properties:
            minRequired:
              type: number
              description: Minimum required number of approvers
              example: 1
            initiatorIsAllowedToApprove:
              type: boolean
              description: Whether the initiator is allowed to approve this action. false by default.
              example: false
              default: false
        operator:
          $ref: '#/components/schemas/OperatorType'
    EnterpriseAvailableUI:
      type: string
      enum:
        - bg23
    EnterpriseContract:
      title: EnterpriseContract
      type: object
      properties:
        startDate:
          oneOf:
            - type: string
              format: date
              title: Date String
            - type: string
              format: date-time
              title: ISO Date String
        endDate:
          nullable: true
          oneOf:
            - type: string
              format: date
              title: Date String
            - type: string
              format: date-time
              title: ISO Date String
        isExternal:
          type: boolean
    EnterpriseIdNonEmptyString:
      title: EnterpriseIdNonEmptyString
      type: string
      example: 59cd72485007a239fb00282ed480da1f
      minLength: 1
      pattern: ^[0-9a-f]{32}$
    EnterpriseIdString:
      title: EnterpriseIdString
      type: string
      example: 59cd72485007a239fb00282ed480da1f
      pattern: ^[0-9a-f]{32}$
    EnterpriseInternal:
      title: EnterpriseInternal
      type: object
      properties:
        migratedToNewPolicyService:
          nullable: true
          type: boolean
          description: Whether the enterprise has been migrated to the new policy service
        policiesLocked:
          type: boolean
        umsMappingComplete:
          nullable: true
          type: boolean
      required:
        - migratedToNewPolicyService
        - policiesLocked
        - umsMappingComplete
    EnterpriseKitName:
      type: object
      properties:
        name:
          type: string
          enum:
            - default
            - wallet
            - custody
            - liquidity
            - cryptoCompare
    EnterpriseKits:
      type: array
      items:
        type: object
        properties:
          name:
            $ref: '#/components/schemas/EnterpriseKitName'
          datesActive:
            type: array
            items:
              $ref: '#/components/schemas/AuditableItem'
    EnterpriseMember:
      title: EnterpriseMember
      type: string
      enum:
        - member
      description: 'This type represents the member permission that can be assigned to a user when adding them to an enterprise 1. ''member'': Receive invitations to wallets'
    EnterprisePermission:
      type: string
      enum:
        - admin
    EnterprisePricingType:
      type: object
      properties:
        name:
          type: string
          enum:
            - starter
            - growth
    EnterprisePricingTypes:
      type: array
      items:
        type: object
        properties:
          name:
            $ref: '#/components/schemas/EnterprisePricingType'
          datesActive:
            type: array
            items:
              $ref: '#/components/schemas/AuditableItem'
    EnterpriseStub:
      title: Enterprise Stub
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EnterpriseIdString'
        name:
          type: string
          example: Small Company
          minLength: 1
        pricingPlan:
          type: string
        ethFeeAddress:
          type: string
          description: The eth fee address used to pay for network transaction fees of this enterprise
      required:
        - id
        - name
    EnterpriseUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        username:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          description: User first name
          example: Jane
        lastName:
          type: string
          description: User last name
          example: Doe
        fullName:
          type: string
          description: User full name
          example: Jane Doe
        isActive:
          type: boolean
        email:
          type: object
          properties:
            email:
              $ref: '#/components/schemas/Email'
            verified:
              type: boolean
              description: User has verified their email
        verified:
          type: boolean
          description: User has verified their email
        identity:
          type: object
          properties:
            kyc:
              type: object
              properties:
                hasVideoID:
                  type: boolean
                  example: true
                  description: User has done initial video ID
                overallState:
                  $ref: '#/components/schemas/UserKycState'
                required:
                  type: boolean
                  example: true
                  description: Sanction screening is required for this User
    EnterpriseUserAction:
      title: Require approval from a set of enterprise users
      type: object
      description: Requires approval from a set of enterprise users.
      required:
        - name
        - label
        - description
        - status
        - adminOnly
        - parameters
      properties:
        name:
          type: string
          description: The name of the action.
          enum:
            - approvals.customer.enterpriseUser
          example: approvals.customer.enterpriseUser
        label:
          type: string
          description: A label for the action which can be shown to an end user.
          example: Require approval from a set of users
        description:
          type: string
          description: A description for the action which can be shown to an end user.
          example: Enterprise users approval
        status:
          type: string
          description: |
            Status of the action. Indicates if the Actions is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The action is available for use.
            * `INACTIVE` - The action is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        adminOnly:
          type: boolean
          description: true, if this is an internal action, false otherwise.
          example: false
        parameters:
          type: array
          description: A list of Parameters to control how the action behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/EnterpriseUserIdsActionParameter'
              - $ref: '#/components/schemas/MinRequireActionParameter'
              - $ref: '#/components/schemas/InitiatorIsAllowedToApproveActionParameter'
    EnterpriseUserIdsActionParameter:
      title: Approvers user ids
      type: object
      description: The set of enterprise users approvers.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the action parameter.
          enum:
            - userIds
          example: userIds
        label:
          type: string
          description: A label for the action parameter which can be shown to an end user.
          example: Users
        description:
          type: string
          description: A description for the action parameter which can be shown to an end user.
          example: List of enterprise users for approval
        type:
          type: string
          description: The type of acceptable values for this action parameter.
          enum:
            - BITGO_USER_ID
          example: BITGO_USER_ID
        required:
          type: string
          description: A value must be always provided for exactly one or more of the action Parameters with a 'required' value of `ONE_OR_MORE`. In other words, all the action Parameters with a 'required' of `ONE_OR_MORE` form a group, and a value must be provided for one or more of the action Parameters in the group.
          enum:
            - ONE_OR_MORE
          example: ONE_OR_MORE
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: true
    EnterpriseUserPermission:
      title: EnterpriseUserPermission
      type: string
      enum:
        - admin
        - auditor
      description: 'This type represents the permissions that can be assigned to a user when adding them to an enterprise 1. ''admin'': Add/remove users, Create wallets, Manage enterprise policies, Add Bank Accounts, Receive invitations to wallets 2. ''auditor'': View audit logs across the enterprise, Receive invitations to wallets'
    EnterpriseUserRole:
      title: EnterpriseUserRole
      oneOf:
        - $ref: '#/components/schemas/EnterpriseUserPermission'
        - $ref: '#/components/schemas/EnterpriseMember'
    EnterpriseUsersActionRequest:
      title: Require approval from a set of enterprise users
      type: object
      description: Require approval from a set of enterprise users.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.customer.enterpriseUser
          example: approvals.customer.enterpriseUser
        parameters:
          type: object
          description: Required data needed to configure the Action.
          required:
            - userIds
            - minRequired
          properties:
            userIds:
              type: array
              items:
                type: string
                example: 63cf101298470200073bbae71add80d5
              description: List of enterprise users for approval
              example:
                - 63cf101298470200073bbae71add80d5
            minRequired:
              type: number
              description: Minimum required number of approvers
              example: 1
            initiatorIsAllowedToApprove:
              type: boolean
              description: Whether the initiator is allowed to approve this action. false by default.
              example: false
              default: false
        operator:
          $ref: '#/components/schemas/OperatorType'
    EnterpriseUsersResponse:
      type: object
      properties:
        adminUsers:
          type: array
          items:
            $ref: '#/components/schemas/EnterpriseUser'
        nonAdminUsers:
          type: array
          items:
            $ref: '#/components/schemas/EnterpriseUser'
        count:
          type: integer
          description: The total number of Users returned.
        incomplete:
          type: boolean
          description: Set to true if the Enterprise has at least 500 v1 or v2 wallets. If there are more than 500 wallets (either v1 or v2) it could mean that some Wallets were not considered for finding all Users.
    EnterpriseValue:
      title: Enterprise
      type: object
      description: Applies to the entire enterprise.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - enterprise
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Enterprise
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: Spending from the entire transferring wallet's enterprise will be included
    EnterpriseWebhookType:
      title: EnterpriseWebhookType
      type: string
      enum:
        - bankAccount
        - accessToken
        - policyBalanceChange
    EnterprisesPaginatedResponse:
      title: EnterprisesPaginatedResponse
      type: object
      properties:
        enterprises:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Enterprise'
              - $ref: '#/components/schemas/EnterpriseStub'
        nextBatchPrevId:
          type: string
          description: When a result set is truncated, this field returns the id of the last object in the previous batch. To get the next batch of results, pass this value via the 'prevId' query parameter.
          minLength: 1
      required:
        - enterprises
    EnterprisesResponse:
      title: EnterprisesResponse
      type: object
      properties:
        enterprises:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Enterprise'
              - $ref: '#/components/schemas/EnterpriseStub'
      required:
        - enterprises
    EntryType:
      title: EntryType
      type: string
      enum:
        - GO_ACCOUNT
      description: codec for entry type
    EosAddress:
      title: Eos Address
      type: object
      properties:
        rootAddress:
          type: string
        memoId:
          type: string
      required:
        - rootAddress
        - memoId
    EosWallet:
      title: Eos Wallet
      type: object
      properties:
        rootAddress:
          type: string
        pendingChainInitialization:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        lastMemoId:
          type: string
      required:
        - rootAddress
        - pendingChainInitialization
        - creationFailure
        - lastMemoId
    Error:
      required:
        - error
        - errorName
        - reqId
      type: object
      properties:
        error:
          type: string
        errorName:
          type: string
        reqId:
          type: string
      example:
        error: invalid permission
        errorName: backend:common:forbidden
        reqId: d41d4d21e63d63b293caf55f2a739a79
    EstimateTransactionFees:
      title: Bitcoin
      type: object
      properties:
        feePerKb:
          type: integer
          description: (BTC only) The fee (in base units) per kilobyte (or virtual kilobyte) required to confirm a transaction on 2 or more blocks.
          example: 15902
        cpfpFeePerKb:
          type: integer
          description: |
            (BTC only) Child-Pays-For-Parent (CPFP) fee (in base units) per kilobyte (or virtual kilobyte). Includes the fees for all unconfirmed transactions dependent on the CPFP transaction.
        numBlocks:
          type: integer
          description: |
            (BTC only) The number of blocks required to confirm a transaction. You can use `numBlocks` to estimate the fee rate by targeting confirmation within a given number of blocks. If both `feeRate` and `numBlocks` are absent, the transaction defaults to 2 blocks for confirmation.

            Note: The `maxFeeRate` limits the fee rate generated by `numBlocks`.
          example: 2
        confidence:
          type: integer
          minimum: 0
          maximum: 100
          description: (BTC only) The confidence (as a percentage) in the accuracy of the fee estimate.
          example: 80
        feeByBlockTarget:
          type: object
          description: |
            (UTXO only) Custom multiplier to the `feeRate`. The resulting fee rate is limited by the `maxFeeRate`. For replace-by-fee (RBF) transactions (that include `rbfTxIds`), the `feeMultiplier` must be greater than 1, since it's an absolute fee multiplier to the transaction being replaced.

            Note: The `maxFeeRate` limits the fee rate generated by `feeMultiplier`.
          example:
            '1': 50536
            '2': 15902
            '3': 1579
      required:
        - feePerKb
        - numBlocks
    EstimateTransactionFeesAccountCoin:
      title: Account-based
      type: object
      properties:
        feeEstimate:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: fee estimate for a transaction for the given account-based coin, denominated in the base units of that coin (i.e. Drops for XRP, Stroops for XLM, etc)
      required:
        - feeEstimate
    EstimateTransactionFeesAlgo:
      title: ALGO
      type: object
      properties:
        feeRate:
          description: Calculated by transaction size. Fee rate is in microAlgo (base unit).
          type: integer
          example: 1
        minimumFee:
          description: Always 1000.
          type: integer
          default: 1000
          example: 1000
      required:
        - feeRate
        - minimumFee
    EstimateTransactionFeesEth:
      title: ETH
      type: object
      properties:
        feeEstimate:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: fee estimate for a transaction for the given account-based coin, denominated in base units (i.e. Wei)
        gasLimitEstimate:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The amount of gas that the transaction will use, if recipient is provided in the request
        minGasPrice:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: minimum gas price that can be provided in base units
        minGasLimit:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: minimum gas limit that can be provided in base units
        maxGasLimit:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: maximum gas limit that can be provided in base units
        minGasIncreaseBy:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: gas price must not be increased by less than this after being introduced to the network
        eip1559:
          allOf:
            - $ref: '#/components/schemas/EstimateTransactionFeesEthEip1559'
          description: EIP 1559 fee estimates
      required:
        - feeEstimate
        - minGasPrice
        - minGasLimit
        - maxGasLimit
        - minGasIncreaseBy
    EstimateTransactionFeesEthEip1559:
      type: object
      properties:
        baseFee:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: Block base fees, in base units (i.e. Wei), per gas. Zeroes are returned for pre-EIP-1559 blocks
        gasUsedRatio:
          description: Block gas used ratio. Calculated as the ratio of gasUsed and gasLimit
          type: string
        safeLowMinerTip:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: 25th percentile of the tips spent in the last block
        normalMinerTip:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: 35th percentile of the tips spent in the last block
        standardMinerTip:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: 50th percentile of the tips spent in the last block
        fastestMinerTip:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: 75th percentile of the tips spent in the last block
        ludicrousMinerTip:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: 97th percentile of the tips spent in the last block
      required:
        - baseFee
        - gasUsedRatio
    EstimateTransactionFeesTrx:
      title: TRX
      type: object
      properties:
        fee:
          description: Maximum fee for a payment transaction, denominated in base units (i.e. sun). It varies for TRX and TRC20 Token based on the coin parameter
          type: integer
          example: 100000000
        newAccountFee:
          description: Fee for wallet initialization
          type: integer
          example: 100000000
        netFee:
          description: Fee rate per unit of tx size. Not used currently (`fee` is a maximum limit, the network charges the cost of the transaction)
          type: integer
          example: 1000
      required:
        - fee
        - newAccountFee
        - netFee
    EthAccelerationIntent:
      title: ETH Acceleration Intent
      allOf:
        - type: object
          properties:
            feeOptions:
              oneOf:
                - $ref: '#/components/schemas/FeeOption'
                - $ref: '#/components/schemas/EIP1559FeeOptions'
          required:
            - feeOptions
        - $ref: '#/components/schemas/AccelerationIntent'
        - $ref: '#/components/schemas/EthBuildOptionsWithoutFeeOptions'
    EthBuildOptions:
      title: EthBuildOptions
      allOf:
        - type: object
          properties:
            feeOptions:
              oneOf:
                - $ref: '#/components/schemas/FeeOption'
                - $ref: '#/components/schemas/EIP1559FeeOptions'
            hopParams:
              type: object
              properties:
                gasPriceMax:
                  $ref: '#/components/schemas/optionalNumber'
                paymentId:
                  $ref: '#/components/schemas/optionalString'
                userReqSig:
                  $ref: '#/components/schemas/optionalString'
              required:
                - gasPriceMax
                - paymentId
                - userReqSig
            receiveAddress:
              $ref: '#/components/schemas/optionalString'
            senderAddressIndex:
              $ref: '#/components/schemas/optionalNumber'
        - $ref: '#/components/schemas/AccountBaseBuildOptions'
    EthBuildOptionsWithoutFeeOptions:
      title: EthBuildOptionsWithoutFeeOptions
      allOf:
        - type: object
          properties:
            hopParams:
              type: object
              properties:
                gasPriceMax:
                  $ref: '#/components/schemas/optionalNumber'
                paymentId:
                  $ref: '#/components/schemas/optionalString'
                userReqSig:
                  $ref: '#/components/schemas/optionalString'
              required:
                - gasPriceMax
                - paymentId
                - userReqSig
            receiveAddress:
              $ref: '#/components/schemas/optionalString'
            senderAddressIndex:
              $ref: '#/components/schemas/optionalNumber'
        - $ref: '#/components/schemas/AccountBaseBuildOptions'
    EthConsolidateIntent:
      title: ETH Consolidate Intent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/AccountBaseConsolidateIntent'
        - $ref: '#/components/schemas/EthBuildOptions'
    EthConsolidateTokenIntent:
      title: ETH Consolidate Token Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - consolidateToken
            recipients:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      tokenData:
                        $ref: '#/components/schemas/TokenData'
                  - $ref: '#/components/schemas/RecipientEntry'
            consolidateId:
              $ref: '#/components/schemas/optionalString'
            keepAlive:
              $ref: '#/components/schemas/optionalBoolean'
          required:
            - intentType
            - recipients
            - consolidateId
            - keepAlive
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/EthBuildOptions'
    EthFillNonceBuildOptions:
      title: EthFillNonceBuildOptions
      type: object
      properties:
        feeOptions:
          oneOf:
            - $ref: '#/components/schemas/FeeOption'
            - $ref: '#/components/schemas/EIP1559FeeOptions'
        receiveAddress:
          $ref: '#/components/schemas/optionalString'
        senderAddressIndex:
          $ref: '#/components/schemas/optionalNumber'
    EthFillNonceIntent:
      title: ETH Fill Nonce Intent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/FillNonceIntent'
        - $ref: '#/components/schemas/EthFillNonceBuildOptions'
    EthLikeStakeIntent:
      title: EthLike Stake Intent
      allOf:
        - type: object
          properties:
            intentType:
              $ref: '#/components/schemas/IntentType'
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent'
    EthPaymentIntent:
      title: ETH Payment Intent
      allOf:
        - type: object
          properties:
            selfSend:
              $ref: '#/components/schemas/optionalBoolean'
          required:
            - selfSend
        - $ref: '#/components/schemas/PaymentIntent'
        - $ref: '#/components/schemas/EthBuildOptions'
    EthStakingDelegation:
      title: ETH
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    EthStakingIntent:
      title: ETH Staking Intent
      allOf:
        - type: object
          properties:
            pubkey:
              type: string
            withdrawalCredentials:
              type: string
            signature:
              type: string
            depositDataRoot:
              type: string
          required:
            - pubkey
            - withdrawalCredentials
            - signature
            - depositDataRoot
        - $ref: '#/components/schemas/StakeIntent'
        - $ref: '#/components/schemas/EthBuildOptions'
    EthStakingRequest:
      title: ETH
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        gasPrice:
          type: string
          description: User overridden gas price to apply for the generated transactions for this request. GasPrice is in base units.
        delegations:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/EthStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/EthStakingTransaction'
        amount:
          description: Amount to stake in base units (i.e. Wei for ETH). For Ethereum the amount needs to be a multiple of 32 ETH (32000000000000000000 Wei). For Testnet the 32 ETH multiple restriction does not apply.
          type: string
    EthStakingRequestPOSTBody:
      title: ETH stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        gasPrice:
          type: string
          description: User overridden gas price to apply for the generated transactions for this request. GasPrice is in base units.
        operator:
          description: The operator address to be used for restaking ETH
          type: string
          example: 0
        validator:
          description: The provider to user to provision ETH validators.
          type: string
          example: FIGMENT
    EthStakingRequestWithTransactions:
      title: ETH
      allOf:
        - $ref: '#/components/schemas/EthStakingRequest'
        - type: object
          properties:
            transactions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/EthStakingTransaction'
    EthStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
      properties:
        buildParams:
          $ref: '#/components/schemas/TransactionBuildParams'
    EthStakingTransactionSendRequest:
      type: object
      properties:
        halfSigned:
          description: A half-signed transaction object.
          type: object
          properties:
            contractSequenceId:
              description: The contract sequence ID of the transaction.
              type: string
            eip1559:
              description: Eip1559 Params
              type: object
              properties:
                maxPriorityFeePerGas:
                  type: string
                maxFeePerGas:
                  type: string
            operationHash:
              type: string
            expireTime:
              type: string
            signature:
              type: string
        comment:
          type: string
    EthTransferTokenIntent:
      title: ETH Transfer Token Intent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/TransferTokenIntent'
        - $ref: '#/components/schemas/EthBuildOptions'
    Ethereum2Address:
      title: Ethereum2 Address
      type: object
      properties:
        feeAddress:
          type: string
    Ethereum2Wallet:
      title: Ethereum2 Wallet
      type: object
      properties:
        pendingChainInitialization:
          type: boolean
        baseAddress:
          type: string
        feeAddress:
          type: string
      required:
        - pendingChainInitialization
    EthereumAddress:
      title: Ethereum Address
      type: object
      properties:
        creationFailure:
          type: array
          items:
            type: string
        forwarderVersion:
          type: number
        nonce:
          type: number
        feeAddress:
          type: string
        pendingChainInitialization:
          type: boolean
        pendingDeployment:
          type: boolean
        txCount:
          type: number
        updateTime:
          type: string
          format: date
          title: Date String
        hopTxid:
          type: string
        salt:
          type: string
        usdtBug:
          type: boolean
        isTss:
          type: boolean
        isNonceLocked:
          type: boolean
        nonceLockExpireTime:
          type: string
          format: date
          title: Date String
        previousLowBalanceEmailSentAt:
          type: string
          format: date
          title: Date String
      required:
        - creationFailure
        - forwarderVersion
        - nonce
        - feeAddress
        - pendingChainInitialization
        - pendingDeployment
        - txCount
        - updateTime
    EthereumWallet:
      title: Ethereum Wallet
      type: object
      properties:
        pendingChainInitialization:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        gasPriceTier:
          type: string
        tokenFlushThresholds:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: number
        walletVersion:
          type: number
        pendingDeployment:
          type: boolean
        deployForwardersManually:
          type: boolean
        flushForwardersManually:
          type: boolean
        enableMMI:
          type: boolean
        enableNFT:
          type: boolean
        deployedInBlock:
          oneOf:
            - type: number
            - type: boolean
        deployTxHash:
          type: string
        lastChainIndex: {}
        baseAddress:
          type: string
        feeAddress:
          type: string
        nonce:
          type: string
        token:
          type: string
        pendingEcdsaTssInitialization:
          type: boolean
        safeModeActivated:
          type: string
        lowPriorityFeeAddress:
          type: string
        salt:
          type: string
        referenceWalletId:
          type: string
      required:
        - pendingChainInitialization
        - creationFailure
        - gasPriceTier
        - tokenFlushThresholds
        - walletVersion
        - pendingDeployment
        - deployForwardersManually
        - flushForwardersManually
        - enableMMI
        - enableNFT
    EvaluatedPolicyActionStatus:
      title: EvaluatedPolicyActionStatus
      type: string
      enum:
        - SKIPPED
        - PENDING
        - NOT_NEEDED
        - COMPLETE
        - CANCELLED
        - FAILED
        - AUTO_CANCELLED
    ExchangeEddsaCommitmentsResponse:
      title: ExchangeEddsaCommitmentsResponse
      type: object
      properties:
        commitmentShare:
          allOf:
            - $ref: '#/components/schemas/CommitmentShare1'
          description: The commitment share.
      required:
        - commitmentShare
    ExpectedTransfersOutput:
      title: ExpectedTransfersOutput
      type: object
      additionalProperties:
        type: string
    ExpectedTransfersRequest:
      title: ExpectedTransfersRequest
      type: object
      additionalProperties:
        type: string
    ExpressAccelerateTxRequest:
      type: object
      properties:
        cpfpTxIds:
          type: array
          description: |
            txids of the transactions to bump

            **Notes**:
            Each target unconfirmed transaction must be sending funds to the calling wallet.
            Accepts only a single txid at this stage.
          items:
            $ref: '#/components/schemas/TxId'
        cpfpFeeRate:
          type: integer
          description: Desired effective feerate of the bumped transactions and the CPFP transaction in satoshi per kilobyte
        maxFee:
          type: integer
          description: |
            Maximum allowed fee for the CPFP transaction in satoshi

            **Note**:
            A CPFP transaction accelerates the target transactions and all of the unconfirmed transactions the target transactions depends on.
            As it can be difficult to discern the complete transaction ancestry at times, we recommend limiting the total fee for each CPFP attempt as a safety net to prevent CPFP transactions that exceed your cost expectations.
        rbfTxIds:
          type: array
          items:
            type: string
          description: The list of transactions to accelerate using Replace-By-Fee (RBF) for UTXO coins (currently accelerating only one tx is supported).
        feeMultiplier:
          allOf:
            - type: number
              minimum: 1
            - example: 1.5
          description: |
            (UTXO only) Custom multiplier to the `feeRate`. The resulting fee rate is limited by the `maxFeeRate`. For replace-by-fee (RBF) transactions (that include `rbfTxIds`), the `feeMultiplier` must be greater than 1, since it's an absolute fee multiplier to the transaction being replaced.

            Note: The `maxFeeRate` limits the fee rate generated by `feeMultiplier`.
        walletPassphrase:
          type: string
          description: (Hot wallet only) Passphrase to decrypt the user key on the wallet to sign the transaction.
    ExpressAcceptShareRequest:
      type: object
      properties:
        userPassword:
          type: string
          description: User's password to decrypt the shared wallet (required if the wallet was shared with spend permission)
        newWalletPassphrase:
          type: string
          description: New wallet passphrase for saving the shared wallet private key If not provided and the wallet was shared with spend permission, then the userPassword is used
        overrideEncryptedPrv:
          type: string
          description: Encrypted private key received out-of-band
    ExpressAcceptShareResponse:
      type: object
      properties:
        state:
          type: string
          allOf:
            - $ref: '#/components/schemas/WalletShareState1'
          description: State of the share
        changed:
          type: boolean
          description: Indicates if the share changed
    ExpressCalculateMinerFeeInfoRequest:
      type: object
      properties:
        feeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrString'
            - example: 10000
          description: |
            Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).
        nP2shInputs:
          type: integer
          description: Number of P2SH (multi-signature) inputs
          example: 2
        nP2pkhInputs:
          type: integer
          description: Number of P2PKH (single-signature) inputs
          example: 0
        nP2shP2wshInputs:
          type: integer
          description: Number of P2SH_P2WSH (wrapped segwit multi-signature) inputs
          example: 1
        nOutputs:
          type: integer
          description: Number of outputs
          example: 2
      required:
        - nOutputs
    ExpressCalculateMinerFeeInfoResponse:
      type: object
      properties:
        size:
          type: integer
          description: Estimated size of the transaction in bytes
          example: 776
        fee:
          type: integer
          description: Estimated fee in base units for the transaction
          example: 38800
        feeRate:
          type: integer
          description: The fee rate in base units per kB used to estimate the fee for the transaction
          example: 50000
    ExpressCanonicalAddressRequest:
      type: object
      properties:
        address:
          type: string
          description: Address to canonicalize
        version:
          oneOf:
            - type: string
              default: base58
              description: Version of the desired BCH address.
              enum:
                - base58
                - bech32
            - type: integer
              description: Version of the desired LTC address.
              enum:
                - 1
                - 2
    ExpressConsolidateAccountRequest:
      type: object
      properties:
        consolidateAddresses:
          description: |
            Optional: restrict the consolidation to the specified receive addresses. If not provided, will consolidate the
            funds from all receive addresses up to 500 addresses.
          type: array
          items:
            type: string
        walletPassphrase:
          description: |
            Passphrase to decrypt the user key on the wallet.
            Required if External Signer is not used to sign the transactions.
          type: string
        prv:
          description: |
            The un-encrypted user private key in string form.
            If the key is a JSON object it must be stringified.
            Required if `walletPassphrase` is not available or encrypted private key is not stored by BitGo.
          type: string
        apiVersion:
          description: |
            The Trasaction Request API version to use for MPC EdDSA Hot Wallets.
            Defaults based on the wallet type and asset curve.
          type: string
          enum:
            - full
            - lite
    ExpressConsolidateUnspentsRequest:
      type: object
      properties:
        walletPassphrase:
          type: string
          description: Passphrase to decrypt the user key on the wallet
        xprv:
          type: string
          description: Private key in string form, if walletPassphrase is not available
        feeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrString'
            - example: 10000
          description: |
            Custom fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte.

            If the `feeRate` is less than the minimum required network fee, then the minimum fee applies. For example, 1000 sat/kvByte, a flat 1000 microAlgos, or a flat 10 drops of xrp. For XRP, the actual fee is usually 4.5 times the open ledger fee.

            Note: The `feeRate` overrides the `maxFeeRate` and `minFeeRate`.
        maxFeeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
            - example: 20000
          description: |
            (BTC only) The maximum fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte. The `maxFeeRate` limits the fee rate generated by both `feeMultiplier` and `numBlocks`.

            Note: The `feeRate` overrides the `maxFeeRate`.
        maxFeePercentage:
          type: integer
          description: Maximum relative portion that can be spent towards fees
        feeTxConfirmTarget:
          type: integer
          description: Block target for fee estimation
        bulk:
          type: boolean
          description: Build multiple transactions at the same time. This enables you to increase the maximum number of unspents on the `limit` parameter up to 2,000. If true, you must pass the `txFormat` as `psbt` and you can't pass the `targetAddress` or `numUnspentsToMake` parameters.
        minValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Minimum value of unspents to use in base units (e.g. satoshis). Can be used to skip very small unspents when consolidating at higher fee rates. For doge, only string is allowed.
        maxValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: |
            Maximum value of unspents to use in base units (e.g. satoshis). Should be used to prevent larger unspents from being consolidated needlessly, and that some funds remain available for spending while the consolidation transactions are in flight. For doge, only string is allowed.
        minHeight:
          type: integer
          description: Minimum height of unspents on the block chain to use
        minConfirms:
          type: integer
          description: Minimum confirmation threshold for external inputs
        enforceMinConfirmsForChange:
          type: boolean
          description: Flag for enforcing minConfirms for change inputs
        limit:
          type: integer
          description: Maximum number of unspents to use in the transaction
        numUnspentsToMake:
          type: integer
          description: Number of new unspents to make
        targetAddress:
          type: string
          description: address to use for generated outputs. Must be wallet address.
        txFormat:
          $ref: '#/components/schemas/UtxoTransactionFormat'
    ExpressCreateInvoiceRequest:
      type: object
      required:
        - valueMsat
      properties:
        valueMsat:
          type: string
          description: The invoice amount in millisatoshis
        memo:
          type: string
          description: Optional description for the invoice
        expiry:
          type: number
          description: Optional expiration time in seconds
    ExpressCreateKeychainResponse:
      type: object
      description: Generated key pair
      properties:
        prv:
          type: string
          description: Private key
          example: xprv9s21ZrQH143K2Y4th5Bn8sCRCMNjVr3sm9TLj9yw9SRKxYbJdB18bpc7cZFHKKWKuWZUBATfbDVE26u7w2iUhmWD8Gsp8UkaemhLEfopC35
        pub:
          $ref: '#/components/schemas/Pub'
    ExpressDecryptRequest:
      type: object
      properties:
        input:
          type: string
          description: Ciphertext to decrypt
        password:
          type: string
          description: Key which is used for decryption
    ExpressDecryptResponse:
      type: object
      properties:
        decrypted:
          type: string
    ExpressEncryptRequest:
      type: object
      properties:
        input:
          type: string
          description: Plaintext message which should be encrypted
        password:
          type: string
          description: Password which should be used to encrypt message
    ExpressEncryptResponse:
      type: object
      properties:
        encrypted:
          type: string
    ExpressFanOutUnspentsRequest:
      type: object
      properties:
        walletPassphrase:
          type: string
          description: Passphrase to decrypt the user key on the wallet
        xprv:
          type: string
          description: Private key in string form, if walletPassphrase is not available
        feeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrString'
            - example: 10000
          description: |
            Custom fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte.

            If the `feeRate` is less than the minimum required network fee, then the minimum fee applies. For example, 1000 sat/kvByte, a flat 1000 microAlgos, or a flat 10 drops of xrp. For XRP, the actual fee is usually 4.5 times the open ledger fee.

            Note: The `feeRate` overrides the `maxFeeRate` and `minFeeRate`.
        maxFeeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
            - example: 20000
          description: |
            (BTC only) The maximum fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte. The `maxFeeRate` limits the fee rate generated by both `feeMultiplier` and `numBlocks`.

            Note: The `feeRate` overrides the `maxFeeRate`.
        maxFeePercentage:
          type: integer
          description: Maximum relative portion that can be spent towards fees
        feeTxConfirmTarget:
          type: integer
          description: Block target for fee estimation
        minValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Minimum value of unspents to use in base units (e.g. satoshis). For doge, only string is allowed.
        maxValue:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
          description: Maximum value of unspents to use in base units (e.g. satoshis). For doge, only string is allowed.
        minHeight:
          type: integer
          description: Minimum height of unspents on the block chain to use
        minConfirms:
          type: integer
          description: Minimum confirmation threshold for external inputs
        enforceMinConfirmsForChange:
          type: boolean
          description: Flag for enforcing minConfirms for change inputs
        unspents:
          type: array
          items:
            type: string
          description: Unspents to fan out in the transaction. Mutually exclusive with maxNumInputsToUse.
        maxNumInputsToUse:
          type: integer
          description: Maximum number of unspents to use in the transaction. Mutually exclusive with unspents.
        numUnspentsToMake:
          type: integer
          description: Number of new unspents to make
        targetAddress:
          type: string
          description: address to use for generated outputs. Must be wallet address.
        txFormat:
          $ref: '#/components/schemas/UtxoTransactionFormat'
    ExpressGenerateSignerMacaroonRequest:
      type: object
      properties:
        passphrase:
          type: string
          description: Passphrase to decrypt the admin macaroon of the signer node.
        addIpCaveatToMacaroon:
          type: boolean
          description: If true, adds an IP caveat to the generated signer macaroon.
    ExpressGenerateWalletRequest:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/WalletLabel'
        multisigType:
          type: string
          enum:
            - onchain
            - tss
            - blsdkg
          description: If absent, BitGo uses the default wallet type for the asset.
        type:
          type: string
          enum:
            - hot
            - cold
            - custodial
          description: The type of wallet, defined by key management and signing protocols. 'hot' and 'cold' are both self-managed wallets. If absent, defaults to 'hot'.
        passphrase:
          type: string
          description: Passphrase to be used to encrypt the user key on the wallet
        userKey:
          type: string
          description: User provided public key
        backupXpub:
          $ref: '#/components/schemas/Pub'
        backupXpubProvider:
          type: string
          enum:
            - dai
          description: Optional key recovery service to provide and store the backup key
        enterprise:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: Enterprise id. This is required for Ethereum wallets since they can only be created as part of an enterprise
        disableTransactionNotifications:
          type: boolean
          description: Flag for disabling wallet transaction notifications
        passcodeEncryptionCode:
          type: string
          description: The passphrase used for decrypting the encrypted wallet passphrase during wallet recovery
        coldDerivationSeed:
          type: string
          description: Seed that derives an extended user key or common keychain for a cold wallet.
        gasPrice:
          type: integer
          description: Gas price to use when deploying an Ethereum wallet
        disableKRSEmail:
          type: boolean
          description: Flag for preventing KRS from sending email after creating backup key
        walletVersion:
          type: integer
          default: 1
          description: (ETH only) Specify the wallet creation contract version used when creating a wallet contract. Use 0 for the old wallet creation, 1 for the new wallet creation, where it is only deployed upon receiving funds. 2 for wallets with the same functionality as v1 but with NFT support. 3 for MPC wallets.
          minimum: 0
          maximum: 3
        isDistributedCustody:
          type: boolean
          description: True, if the wallet type is a distributed-custodial. If passed, you must also pass the 'enterprise' parameter.
        bitgoKeyId:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: BitGo key ID for self-managed cold MPC wallets.
        commonKeychain:
          type: string
          description: Common keychain for self-managed cold MPC wallets.
      required:
        - label
        - enterprise
    ExpressGenerateWalletResponse:
      oneOf:
        - $ref: '#/components/schemas/ExpressWallet'
        - title: Wallet (including keychains)
          type: object
          description: Wallet with user, bitgo and backup keychains (when `includeKeychains` query param is `true`).
          properties:
            wallet:
              $ref: '#/components/schemas/ExpressWallet'
            encryptedWalletPassphrase:
              type: string
              description: Encrypted wallet passphrase. Used only with `passcodeEncryptionCode`. You can use the encrypted wallet passphrase in the BitGo web app during password recovery for the wallet.
              example: '"{\"iv\":\"IpwAFi0+TDsLJCV4pg8T6w==\",\"v\":1,\"iter\":10000,\"ks\":256,\"ts\":64,\"mode\":\"ccm\",\"adata\":\"\",\"cipher\":\"aes\",\"salt\":\"3lkIc47rjzo=\",\"ct\":\"/m6JL/ttTJWXNmHm+dzI\"}"'
            userKeychain:
              type: object
              description: User keychain
              properties:
                id:
                  $ref: '#/components/schemas/Id'
                encryptedPrv:
                  type: string
                  description: User private key encrypted with the user passphrase
                  example: '{"iv":"TEd5eouui6hKashuVi5WHQ==","v":1,"iter":10000,"ks":256,"ts":64,"mode":"ccm","adata":"","cipher":"aes","salt":"dHu4PWoX2M8=","ct":"fYr9Y/6kU40AosONkV0xi+fWsyhpYSew0L2YKH/qEZjOlxeDjpC2aTJ0Yc/KdmXheUGolcAxGSx93ykN21Zim1DGc/UGa25IUA/3ARgX7gBsYnYEy5e5Ol0YZYb9pa7KFeaDZSLMXrxxoahg5zL4AJsUx90Pwcg="}'
                prv:
                  type: string
                  description: User private key
                  example: xprv9s21ZrQH143K3e1981rUcbKjJ9G57SDCDZ9HY4Sqhx5ZqMoyK1j49kAf1vuM1G9nhRr6kzqbUQb3gj5zuzrsvNRQ84tYf32EcyapRgBNpp4
                pub:
                  $ref: '#/components/schemas/Pub'
                ethAddress:
                  type: string
                  description: Ethereum address corresponding to this keychain
                  example: '0xf5b7cca8621691f9dde304cb7128b6bb3d409363'
                source:
                  type: string
                  description: Party that created the key
                  example: user
                coinSpecific:
                  type: object
                  description: Coin specific key data
            backupKeychain:
              type: object
              description: Backup keychain
              properties:
                id:
                  $ref: '#/components/schemas/Id'
                prv:
                  type: string
                  description: Backup private key
                  example: xprv9s21ZrQH143K47iEnAFZRJz36E5ZxuEDBJETFYxJTsTVxuPc9z7oGWADUK6icX5P3ruoe244yxMt9uZ2LjWhddvnJJ4zB7zK93qBtxYrmN6
                pub:
                  $ref: '#/components/schemas/Pub'
                source:
                  type: string
                  description: Party that created the key
                  example: backup
                ethAddress:
                  type: string
                  description: Ethereum address corresponding to this keychain
                  example: '0xf5b7cca8621691f9dde304cb7128b6bb3d409363'
                coinSpecific:
                  type: object
                  description: Coin specific key data
            bitgoKeychain:
              type: object
              description: BitGo keychain
              properties:
                id:
                  $ref: '#/components/schemas/Id'
                pub:
                  $ref: '#/components/schemas/Pub'
                isBitGo:
                  type: boolean
                  description: Flag for identifying keychain as created by BitGo
                  example: true
                source:
                  type: string
                  description: Party that created the key
                  example: bitgo
                ethAddress:
                  type: string
                  description: Ethereum address corresponding to this keychain
                  example: '0xa487900d0de75107b1cc7ade0e2662980e5ce940'
                coinSpecific:
                  type: object
                  description: Coin specific key data
            warning:
              type: string
              description: If the backup key is held by the user, this is a message warning the user to securely backup their backup keychain.
              example: Be sure to backup the backup keychain -- it is not stored anywhere else!
    ExpressInitWalletRequest:
      type: object
      properties:
        passphrase:
          type: string
          description: Passphrase to encrypt the admin macaroon of the signer node.
    ExpressLightningNodeStateResponse:
      type: object
      properties:
        state:
          description: Current state of the node
          type: string
          enum:
            - NON_EXISTING
            - LOCKED
            - UNLOCKED
            - RPC_ACTIVE
            - SERVER_ACTIVE
            - WAITING_TO_START
    ExpressListInvoicesResponse:
      type: object
      properties:
        valueMsat:
          type: string
          description: Amount in millisatoshis
        paymentHash:
          type: string
          description: Payment hash of the invoice
        invoice:
          type: string
          description: The BOLT 11 encoded invoice string
        walletId:
          type: string
          description: The public BitGo walletId to which this invoice belongs to
        status:
          type: string
          enum:
            - open
            - settled
            - canceled
          description: Current status of the invoice
        expiresAt:
          type: string
          format: date-time
          description: Expiration date in ISO format
        createdAt:
          type: string
          format: date-time
          description: Creation date in ISO format
        updatedAt:
          type: string
          format: date-time
          description: Last update date in ISO format
        amtPaidMsat:
          type: string
          description: Amount actually paid in millisatoshis (may be greater than valueMsat)
    ExpressPayInvoiceRequest:
      type: object
      properties:
        invoice:
          type: string
          description: The BOLT 11 invoice to pay
        amountMsat:
          type: string
          description: The amount to pay in millisatoshis
        passphrase:
          type: string
          description: The wallet passphrase
        feeLimitMsat:
          type: string
          description: Optional maximum fee to pay in millisatoshis
        feeLimitRatio:
          type: number
          description: Optional maximum fee expressed as a ratio of the payment amount
          example: 0.1
        sequenceId:
          type: string
          description: Optional sequence ID for the payment transfer
        comment:
          type: string
          description: Optional comment for the payment transfer
      required:
        - invoice
        - amountMsat
        - passphrase
    ExpressPayInvoiceResponse:
      type: object
      properties:
        txRequestId:
          type: string
          description: Transaction request identifier
        txRequestState:
          $ref: '#/components/schemas/TransactionRequestState1'
        pendingApproval:
          $ref: '#/components/schemas/PendingApproval1'
        paymentStatus:
          type: object
          properties:
            status:
              type: string
              enum:
                - in_flight
                - settled
                - failed
              description: State of the lightning payment
            paymentHash:
              type: string
              description: Hash of the lightning payment, unique identifier used when doing transfer lookup
            paymentPreimage:
              type: string
              description: Optional preimage of the payment
            amountMsat:
              type: string
              description: Amount in millisatoshis
            feeMsat:
              type: string
              description: Fee in millisatoshis
            failureReason:
              $ref: '#/components/schemas/LightningPaymentFailureReason'
        transfer:
          $ref: '#/components/schemas/AnnotatedTransferWithInputsOutputs'
    ExpressPingResponse:
      type: object
      properties:
        status:
          type: string
    ExpressResolvePendingApprovalRequest:
      type: object
      properties:
        state:
          type: string
          description: New state for the pending approval
          enum:
            - approved
            - rejected
        walletPassphrase:
          type: string
          description: Passphrase to decrypt the user key on the wallet
        xprv:
          type: string
          description: Private key in string form, if walletPassphrase is not available
        otp:
          $ref: '#/components/schemas/Otp'
    ExpressSendCoinsRequest:
      allOf:
        - type: object
          properties:
            address:
              allOf:
                - $ref: '#/components/schemas/AddressString3'
              description: Destination address
            amount:
              allOf:
                - $ref: '#/components/schemas/IntegerOrIntegerString'
              description: Amount in base units (e.g. satoshi, wei, drops, stroops). For doge, only string is allowed.
            walletPassphrase:
              type: string
              description: Passphrase to decrypt the user key on the wallet
            prv:
              type: string
              description: Optional, private key in string form, if `walletPassphrase` is not available or encrypted private key is not stored by BitGo.
        - $ref: '#/components/schemas/BuildParams'
        - type: object
          properties:
            data:
              type: string
              description: (ETH only) Optional data to pass to the transaction
            hop:
              type: boolean
              description: (ETH, AVAXC and POLYGON) Set to true if funds to destination need to come from single sig address
            tokenName:
              type: string
              description: Token name, defined in the BitGoJS Statics package.
    ExpressSendCoinsResponse:
      anyOf:
        - $ref: '#/components/schemas/ExpressSendCoinsResponseMultisig'
        - $ref: '#/components/schemas/ExpressSendCoinsResponseMultisigWithPendingApproval'
        - $ref: '#/components/schemas/ExpressSendCoinsResponseTxRequest'
        - $ref: '#/components/schemas/ExpressSendCoinsResponseTxRequestWithPendingApproval'
    ExpressSendCoinsResponseMultisig:
      description: Multisig wallet send coins response when no pending approval is required.
      allOf:
        - $ref: '#/components/schemas/ExpressSendCoinsResponseTransfer'
    ExpressSendCoinsResponseMultisigWithPendingApproval:
      description: Multisig wallet send coins response when pending approval is required.
      allOf:
        - $ref: '#/components/schemas/PendingApproval1'
    ExpressSendCoinsResponseTransfer:
      type: object
      properties:
        transfer:
          $ref: '#/components/schemas/Transfer'
        txid:
          type: string
          description: Unique transaction identifier
        tx:
          oneOf:
            - type: string
              description: Encoded transaction hex (or base64 for XLM)
            - $ref: '#/components/schemas/PsbtHex'
        status:
          type: string
          description: Transfer status
          enum:
            - signed
            - signed (suppressed)
            - pendingApproval
    ExpressSendCoinsResponseTxRequest:
      description: Wallet send coins response when no pending approval is required for MPC wallets and lightning wallets.
      allOf:
        - type: object
          properties:
            txRequest:
              $ref: '#/components/schemas/TransactionRequestFull1'
        - $ref: '#/components/schemas/ExpressSendCoinsResponseTransfer'
    ExpressSendCoinsResponseTxRequestWithPendingApproval:
      description: Wallet send coins response when pending approval is required for MPC wallets and lightning wallets.
      type: object
      properties:
        txRequest:
          $ref: '#/components/schemas/TransactionRequestFull1'
        pendingApproval:
          $ref: '#/components/schemas/PendingApproval1'
    ExpressSendConsolidationResponse:
      type: object
      properties:
        success:
          description: An Array of TransactionRequest or Transfers.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransactionRequestLite1'
              - $ref: '#/components/schemas/TransactionRequestFull1'
              - $ref: '#/components/schemas/Transfer'
        failure:
          type: array
          description: An Array of Error messages.
          items:
            type: string
      required:
        - success
        - failure
    ExpressSendManyRequest:
      allOf:
        - type: object
          properties:
            recipients:
              type: array
              items:
                type: object
                description: List of recipient addresses and amounts to send
                properties:
                  address:
                    allOf:
                      - $ref: '#/components/schemas/AddressString3'
                    description: Destination address
                  amount:
                    allOf:
                      - $ref: '#/components/schemas/IntegerOrIntegerString'
                    description: The amount in base units (e.g. satoshis) to send. For doge, only string is allowed.
                  tokenName:
                    type: string
                    description: The token name. Required for MPC wallets token transactions.
                    example: sol:natix
                  tokenData:
                    allOf:
                      - $ref: '#/components/schemas/RecipientTokenData'
                    description: Data set to build a transaction that involves a token interaction.
              description: A list of recipient addresses and amounts. Must be present but empty for CPFP transactions.
            otp:
              type: string
              description: Two factor auth code to enable sending the transaction. Not necessary if using a long lived access token within the spending limit.
            walletPassphrase:
              type: string
              description: |
                Passphrase to decrypt the user key on the wallet.
                Required if External Signer is not used to sign the transactions.
            prv:
              type: string
              description: |
                The un-encrypted user private key in string form.
                If the key is a JSON object it must be stringified.
                Required if `walletPassphrase` is not available or encrypted private key is not stored by BitGo.
        - $ref: '#/components/schemas/BuildParams'
        - type: object
          properties:
            data:
              type: string
              description: (ETH only) Optional data to pass to the transaction
    ExpressShareWalletRequest:
      type: object
      properties:
        email:
          type: string
          description: Email address of the user being invited
          example: foo@bar.com
        permissions:
          type: string
          allOf:
            - $ref: '#/components/schemas/WalletPermission'
        walletPassphrase:
          type: string
          description: Wallet passphrase of the user sharing the wallet
        message:
          type: string
          description: User readable message to display to the share recipient
        reshare:
          type: boolean
          description: Flag for reinviting a user to the wallet. This is required if the invitee has already been invited to the wallet, but has changed their password and needs a new invite
        skipKeychain:
          type: boolean
          description: If true, skips using a shared key (for when the wallet is shared without spend permission).
        disableEmail:
          type: boolean
          description: Flag for disabling invite notification email
      required:
        - email
        - permissions
    ExpressSignTssTx:
      anyOf:
        - $ref: '#/components/schemas/TransactionRequestLite1'
        - $ref: '#/components/schemas/ExpressSignTssTxFull'
    ExpressSignTssTxFull:
      title: Full
      type: object
      properties:
        txRequestId:
          description: |
            The transaction request ID.
            This is the ID returned by the Create Transaction Request API.
          type: string
        walletPassphrase:
          description: |
            The wallet passphrase.
            Required if External Signer is not used to sign the transactions.
          type: string
        prv:
          description: |
            The un-encrypted user private key of the wallet.
            If the key is a JSON object it must be stringified.
            Required for Self-Managed Cold wallets when External Signer is not used to sign the transactions.
          type: string
      required:
        - txRequestId
    ExpressSignTxRequest:
      type: object
      properties:
        prv:
          type: string
          description: user private key
          example: xprv9s21ZrQH143K3xQwj4yx3fHjDieEdqFDweBvFxn28qGvfQGvweUWuUuDRpepDu6opq3jiWHU9h3yYTKk5vvu4ykRuGA4i4Kz1vmFMPLTsoC
        txPrebuild:
          type: object
          properties:
            wallet:
              $ref: '#/components/schemas/Id'
            txHex:
              type: string
              description: Serialized transaction hex
            txBase64:
              type: string
              description: Serialized transaction base64 (applies to XLM only) The request must include this or a txHex
            txInfo:
              oneOf:
                - $ref: '#/components/schemas/UtxoTxInfo'
                - $ref: '#/components/schemas/XlmTxInfo'
            feeInfo:
              type: object
              properties:
                size:
                  type: integer
                  description: Estimated size of the transaction in bytes
                  example: 776
                fee:
                  type: integer
                  description: Estimated fee in base units for the transaction
                  example: 38800
                feeRate:
                  allOf:
                    - $ref: '#/components/schemas/IntegerOrString'
                    - example: 10000
                  description: |
                    Custom fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte.

                    If the `feeRate` is less than the minimum required network fee, then the minimum fee applies. For example, 1000 sat/kvByte, a flat 1000 microAlgos, or a flat 10 drops of xrp. For XRP, the actual fee is usually 4.5 times the open ledger fee.

                    Note: The `feeRate` overrides the `maxFeeRate` and `minFeeRate`.
                payGoFee:
                  type: integer
                  description: BitGo fee of the transaction (in base units)
                  example: 0
                payGoFeeString:
                  type: integer
                  description: BitGo fee of the transaction (in base units) represented as a String
                  example: '0'
        isLastSignature:
          type: boolean
          description: Should be set to true if you are signing the second time, attaching the final signature. Default to false.
        pubs:
          type: array
          description: Public Keys (user, backup, bitgo) for the wallet (UTXO coins only)
          items:
            type: string
          example:
            - string
            - string
            - string
    ExpressSignTxResponse:
      type: object
      properties:
        txInfo:
          oneOf:
            - title: Hex
              type: object
              properties:
                txHex:
                  $ref: '#/components/schemas/TxHex'
            - title: Base64
              type: object
              properties:
                halfSigned:
                  type: object
                  properties:
                    txBase64:
                      $ref: '#/components/schemas/TxBase64'
    ExpressSweepRequest:
      type: object
      properties:
        address:
          type: string
          description: The destination address for the sweep transaction
        walletPassphrase:
          type: string
          description: Passphrase to decrypt the user key on the wallet
        xprv:
          type: string
          description: Private key in string form, if walletPassphrase is not available
        otp:
          type: string
          description: Two factor auth code to enable sending the transaction
        feeTxConfirmTarget:
          type: string
          description: Number of blocks to wait to confirm the transaction
        feeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrString'
            - example: 10000
          description: |
            Custom fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte.

            If the `feeRate` is less than the minimum required network fee, then the minimum fee applies. For example, 1000 sat/kvByte, a flat 1000 microAlgos, or a flat 10 drops of xrp. For XRP, the actual fee is usually 4.5 times the open ledger fee.

            Note: The `feeRate` overrides the `maxFeeRate` and `minFeeRate`.
        maxFeeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrIntegerString'
            - example: 20000
          description: |
            (BTC only) The maximum fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte. The `maxFeeRate` limits the fee rate generated by both `feeMultiplier` and `numBlocks`.

            Note: The `feeRate` overrides the `maxFeeRate`.
        allowPartialSweep:
          type: boolean
          default: false
          description: |
            Use `allowPartialSweep: true` to sweep part of a wallet when there are too many unspents to empty the wallet in a
            single transaction. While the expected outcome of a single sweep call would usually be an empty wallet, using the
            allowPartialSweep option may leave some funds in the wallet. Making repeated calls with the allowPartialSweep
            option allows emptying wallets with many unspents without consolidating first.
        txFormat:
          $ref: '#/components/schemas/UtxoTransactionFormat'
    ExpressUnlockLightningWalletRequest:
      type: object
      properties:
        passphrase:
          type: string
          description: Passphrase to decrypt the unlock the node.
    ExpressUnlockLightningWalletResponse:
      type: object
      properties:
        message:
          type: string
          example: ok
    ExpressVerifyCoinAddressRequest:
      type: object
      properties:
        address:
          type: string
          allOf:
            - $ref: '#/components/schemas/AddressString3'
          description: Address which should be verified for correct format
    ExpressWallet:
      title: Wallet
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        users:
          type: array
          description: Ids of users with access to the wallet
          items:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/Id'
              permissions:
                type: array
                description: Array of permissions for the user
                items:
                  type: string
                  example:
                    - admin
                    - view
                    - spend
        coin:
          type: string
          description: Name of the blockchain the wallet is on
          example: tbtc4
        label:
          type: string
          description: Name the user assigned to the wallet
          example: My TBTC4 Wallet
        m:
          type: integer
          description: Number of signatures required for the wallet to send
          example: 2
        'n':
          type: integer
          description: Number of signers on the wallet
          example: 3
        keys:
          type: array
          description: Ids of wallet keys
          items:
            $ref: '#/components/schemas/Id'
        keySignatures:
          type: object
          description: Signatures for the backup and BitGo public keys signed by the user key
          properties:
            backupPub:
              type: string
              description: Signature for the backup pub
              example: 1fe81d0c91457d89993b01475bfb9e5809067ae046926faeab6e63beea009d8dd460387e0c3843034570798a9c2bcc1dbbea2988ee5a36979e0bbe6e02f7840af2
            bitgoPub:
              type: string
              description: Signature for the BitGo pub
              example: 209d0e9a6d4352b66fae0a35ce62c1059bcc4db9e2883abc4f1b3d20481c5cebb7299c581efd9e0151abaf2496da7c6d75d276de36ed3de37c94e9cc5a2ea77e59
        tags:
          type: array
          description: Tags set on the wallet
          items:
            $ref: '#/components/schemas/Id'
        receiveAddress:
          $ref: '#/components/schemas/Address2'
        balance:
          type: integer
          description: Wallet balance as number
          example: 0
        balanceString:
          type: string
          description: Wallet balance as string
          example: '0'
        confirmedBalance:
          type: integer
          description: Confirmed wallet balance as number
          example: 0
        confirmedBalanceString:
          type: string
          description: Confirmed wallet balance as string
          example: '0'
        spendableBalance:
          type: integer
          description: Spendable wallet balance as number
          example: 0
        spendableBalanceString:
          type: string
          description: Spendable wallet balance as string
          example: '0'
        deleted:
          type: boolean
          description: Flag which indicates the wallet has been deleted
          example: false
        isCold:
          type: boolean
          description: Flag for identifying cold wallets
          example: false
        freeze:
          type: object
          description: Freeze state (used to stop the wallet from spending)
          properties:
            time:
              type: string
              format: date-time
              description: Time when the wallet becomes frozen
            expires:
              type: string
              format: date-time
              description: Time when the wallet is unfrozen and allowed to spend
          example: {}
        disableTransactionNotifications:
          type: boolean
          description: Flag for disabling wallet transaction notifications
          example: false
        admin:
          type: object
          description: Admin data (wallet policies)
          example: {}
        approvalsRequired:
          type: integer
          description: Number of admin approvals required for an action to fire
          example: 1
        pendingApprovals:
          type: array
          description: Pending approvals on the wallet
          items:
            $ref: '#/components/schemas/PendingApproval1'
          example: []
        allowBackupKeySigning:
          type: boolean
          description: Flag for allowing signing with backup key
          example: false
        coinSpecific:
          type: object
          description: Coin-specific data
        clientFlags:
          type: array
          items:
            type: string
        recoverable:
          type: boolean
          description: Flag indicating whether this wallet's user key is recoverable with the passphrase held by the user.
        startDate:
          type: string
          format: date-time
          description: Time when this wallet was created
        hasLargeNumberOfAddresses:
          type: boolean
          description: |
            Flag indicating that this wallet is large (more than 100,000 addresses). If this is set, some APIs may omit
            properties which are expensive to calculate for wallets with many addresses (for example, the total address
            counts returned by the List Addresses API).
        config:
          type: object
          description: Custom configuration options for this wallet
    ExpressWalletRecoverTokenRequest:
      type: object
      properties:
        tokenContractAddress:
          type: string
          description: Contract address of the unsupported token
        recipient:
          type: string
          description: Destination address recovered tokens should be sent to
        walletPassphrase:
          type: string
          description: Wallet passphrase
        prv:
          type: string
          description: User private key
        broadcast:
          type: boolean
          description: Whether to send to BitGo for cosigning and broadcast the transaction. If false, a half-siged transaction will be returned.
    ExpressWalletRecoverTokenResponse:
      type: object
      properties:
        halfSigned:
          type: object
          properties:
            contractSequenceId:
              type: integer
              example: 1101
            expireTime:
              type: integer
              example: 1550088020
            gasLimit:
              type: integer
              example: 500000
            gasPrice:
              type: integer
              example: 20000000000
            operationHash:
              type: string
              example: 9.44792020725999e+76
            recipient:
              type: object
              properties:
                address:
                  type: string
                  example: 4.7261295088313645e+47
                amount:
                  type: string
                  example: '2400'
            signature:
              type: string
              example: 1.9519588812712557e+156
            tokenContractAddress:
              type: string
              example: 3.8941146273864216e+46
            walletId:
              $ref: '#/components/schemas/Id'
    ExpressWalletSignTxRequest:
      type: object
      properties:
        keychain:
          type: object
          properties:
            encryptedPrv:
              type: string
              description: Encrypted user private key
          description: |
            The user's keychain object with an `encryptedPrv` property. The `walletPassphrase` parameter is required when using `keychain`. Any request must include either `keychain` or `prv`.
        prv:
          type: string
          description: |
            User private key

            Note: The request must include either `prv` or `keychain`
          example: xprv9s21ZrQH143K3xQwj4yx3fHjDieEdqFDweBvFxn28qGvfQGvweUWuUuDRpepDu6opq3jiWHU9h3yYTKk5vvu4ykRuGA4i4Kz1vmFMPLTsoC
        txPrebuild:
          type: object
          properties:
            wallet:
              $ref: '#/components/schemas/Id'
            txHex:
              type: string
              description: Serialized transaction hex
            txBase64:
              type: string
              description: Serialized transaction base64 (applies to XLM only). The request must include this or a txHex
            txInfo:
              oneOf:
                - $ref: '#/components/schemas/UtxoTxInfo'
                - $ref: '#/components/schemas/XlmTxInfo'
            feeInfo:
              oneOf:
                - $ref: '#/components/schemas/UtxoFeeInfo'
                - $ref: '#/components/schemas/XlmFeeInfo'
          description: The transaction description object as created by 'Build Transaction'
        coldDerivationSeed:
          type: string
          description: |
            A seed used to create a deterministic BIP-32 path which is then used to derive a private key. This is useful when one wants to create multiple BitGo cold wallets but only protect a single master private key. Using the seed one can create a child key for a specific wallet, for instance an Ethereum wallet could use the "eth" seed while an XRP wallet could use "xrp" as a seed. Both of these child keys would be derived from a single master key and so only the master key needs to be stored and protected.
        walletPassphrase:
          type: string
          description: |
            Passphrase to decrypt the user keychain. `walletPassphrase` is a required parameter when the parameter `keychain` is provided.
        recipients:
          type: array
          items:
            type: object
          description: Array of objects describing the recipients. See buildTransaction for more detail. Required on ETH.
    ExtDepositsResp:
      title: ExtDepositsResp
      type: array
      items:
        type: object
        properties:
          onChainTxId:
            type: string
            minLength: 1
          transferId:
            type: string
          currency:
            type: string
            description: The currency code of the deposited asset.
            minLength: 1
          quantity:
            type: number
          id:
            type: string
            title: uuid
          settlementId:
            type: string
            title: uuid
          createdAt:
            type: string
            description: ISO-formatted creation timestamp of the deposit record.
            format: date-time
            title: ISO Date String
          updatedAt:
            type: string
            description: ISO-formatted timestamp of the last update to the deposit record.
            format: date-time
            title: ISO Date String
          externalSettlementId:
            type: string
            description: Partner's unique identifier for the settlement associated with this deposit.
            minLength: 1
        required:
          - onChainTxId
          - currency
          - id
          - settlementId
          - createdAt
          - updatedAt
          - externalSettlementId
    FederationError:
      type: object
      properties:
        status:
          type: number
          description: HTTP status code
        detail:
          type: string
          description: Human-readable error message
        error:
          type: string
          description: Human-readable error message
        name:
          type: string
          description: Error code
        requestId:
          type: string
          description: Client request id
      required:
        - status
        - detail
        - error
        - name
        - requestId
    Fee:
      title: Fee
      allOf:
        - $ref: '#/components/schemas/FeeObject'
    FeeAddressBalanceResponse:
      type: object
      properties:
        balance:
          type: string
          description: |
            Total balance in enterprise gas tank.
    FeeAddressTransferIntent:
      title: FeeAddressTransferIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - feeAddressTransfer
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intentType
            - recipients
        - $ref: '#/components/schemas/BaseIntent'
    FeeObject:
      allOf:
        - type: object
          properties:
            coin:
              $ref: '#/components/schemas/BackingFiatCoin'
          required:
            - coin
        - $ref: '#/components/schemas/ConfigFeeInformation'
    FeeOption:
      title: FeeOption
      type: object
      properties:
        unit:
          type: string
          enum:
            - baseUnit
            - cpu
            - ram
        formula:
          type: string
          enum:
            - fixed
            - feeRate
            - perKB
            - custom
            - perVKB
        feeType:
          type: string
          enum:
            - base
            - max
            - tip
        gasLimit:
          $ref: '#/components/schemas/optionalNumber'
        gasPrice:
          $ref: '#/components/schemas/optionalNumber'
    FiatAddress:
      title: Fiat Address
      type: object
      properties:
        bankAccountId:
          type: string
        faBankAccountId:
          type: string
        bankAccount:
          $ref: '#/components/schemas/BankAccountJson'
    FiatWallet:
      title: Fiat Wallet
      type: object
      properties:
        backingBankAccountId: {}
        backingSENBankAccountId: {}
        lastUsedNonce:
          type: number
      required:
        - backingBankAccountId
        - backingSENBankAccountId
        - lastUsedNonce
    FillNonceIntent:
      title: FillNonceIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - fillNonce
            nonce:
              oneOf:
                - type: string
                - type: number
          required:
            - intentType
            - nonce
        - $ref: '#/components/schemas/BaseIntentWithoutNonce'
    FillUpdated:
      title: Fill Updated
      allOf:
        - $ref: '#/components/schemas/TradeBaseOrder'
        - type: object
          properties:
            cumulativeQuantity:
              type: string
              format: decimal
              description: The cumulative quantity of the fill
            averagePrice:
              type: string
              format: decimal
              description: The average price of the fill
            tradeId:
              type: string
              description: The ID of the trade
            fillQuantity:
              type: string
              format: decimal
              description: The quantity of the fill
            fillPrice:
              type: string
              format: decimal
              description: The price of the fill
      example:
        channel: orders
        time: '2019-04-25T01:02:03.045678Z'
        accountId: f230fdebfa084ffebc7e00515f54603f
        orderId: 14db12f5-4d3d-4fd8-8ced-062aa81bb4bc
        clientOrderId: my-order-1
        product: TBTC-TUSD*
        status: opened
        type: market
        side: buy
        quantity: '1.01'
        cumulativeQuantity: '0.5'
        averagePrice: '7090.1'
        tradeId: a6a9ab1b-2947-41b7-b44d-4ce61fca8b92
        fillQuantity: '0.50'
        fillPrice: '7090.1'
    FilteringConditions:
      type: object
      description: |
        Wrapper object for a list of Filtering Conditions. Not paginated.
      required:
        - conditions
      properties:
        conditions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/WalletTypeCondition'
              - $ref: '#/components/schemas/WalletIdsCondition'
              - $ref: '#/components/schemas/WalletAllCondition'
    FinalApprovalAction:
      title: Require final approval from wallet users
      type: object
      description: Requires final approval from wallet users after wallet-admin approval. Final approvers don't have to be wallet admins.
      required:
        - name
        - label
        - description
        - status
        - adminOnly
        - parameters
      properties:
        name:
          type: string
          description: The name of the action.
          enum:
            - approvals.customer.finalApproval
          example: approvals.customer.finalApproval
        label:
          type: string
          description: A label for the action which can be shown to an end user.
          example: Require final approval from wallet users
        description:
          type: string
          description: A description for the action which can be shown to an end user.
          example: Require final approval from wallet users
        status:
          type: string
          description: |
            Status of the action. Indicates if the Actions is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The action is available for use.
            * `INACTIVE` - The action is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        adminOnly:
          type: boolean
          description: true, if this is an internal action, false otherwise.
          example: false
        parameters:
          type: array
          description: A list of Parameters to control how the action behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/FinalApproversUserIdsActionParameter'
              - $ref: '#/components/schemas/InitiatorIsAllowedToApproveActionParameter'
    FinalApprovalActionRequest:
      title: Require final approval from wallet users
      type: object
      description: Require final approval from wallet users.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.customer.finalApproval
          example: approvals.customer.finalApproval
        parameters:
          type: object
          description: Required data needed to configure the Action.
          required:
            - userIds
          properties:
            userIds:
              type: array
              items:
                type: string
                example: 63cf101298470200073bbae71add80d5
              description: The final approvers
              example:
                - 63cf101298470200073bbae71add80d5
            initiatorIsAllowedToApprove:
              type: boolean
              description: Whether the initiator is allowed to approve this action. true by default.
              example: true
              default: true
        operator:
          $ref: '#/components/schemas/OperatorType'
    FinalApproversUserIdsActionParameter:
      title: Final approvers user ids
      type: object
      description: The final approvers.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the action parameter.
          enum:
            - userIds
          example: userIds
        label:
          type: string
          description: A label for the action parameter which can be shown to an end user.
          example: Users
        description:
          type: string
          description: A description for the action parameter which can be shown to an end user.
          example: List of users for final approval
        type:
          type: string
          description: The type of acceptable values for this action parameter.
          enum:
            - BITGO_USER_ID
          example: BITGO_USER_ID
        required:
          type: string
          description: A value must be always provided for exactly one or more of the action Parameters with a 'required' value of `ONE_OR_MORE`. In other words, all the action Parameters with a 'required' of `ONE_OR_MORE` form a group, and a value must be provided for one or more of the action Parameters in the group.
          enum:
            - ONE_OR_MORE
          example: ONE_OR_MORE
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: true
    FlattenedPricingType:
      title: FlattenedPricingType
      allOf:
        - type: object
          properties:
            name:
              $ref: '#/components/schemas/PricingTypeName'
          required:
            - name
        - $ref: '#/components/schemas/ActiveDateRange'
    Freeze:
      title: Freeze
      type: object
      properties:
        time:
          oneOf:
            - type: string
              format: date
              title: Date String
            - type: string
              format: date-time
              title: ISO Date String
          description: When the freeze started
          format: date-time
        expires:
          oneOf:
            - type: string
              format: date
              title: Date String
            - type: string
              format: date-time
              title: ISO Date String
          description: When the freeze will end
          format: date-time
        reason:
          type: string
          description: The reason the entity was frozen
        frozenBy:
          type: string
          description: The user that froze the entity
        unFrozenBy:
          type: string
          description: The user that unfroze the entity
    Freeze1:
      type: object
      properties:
        time:
          type: string
          format: date-time
          description: When the freeze started
        expires:
          type: string
          format: date-time
          description: When the freeze will end
    FtxHostType:
      title: FtxHostType
      type: string
      enum:
        - COM
        - LIQUID
        - US
    FundingType:
      type: string
      enum:
        - margin
        - funded
      description: The funding type of the order. Funded orders will be placed with the user's available balance. Margin orders will be placed with the user's margin balance.
      default: funded
    GeneralError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        status:
          type: integer
    GenericReportParamsJSON:
      title: GenericReportParamsJSON
      type: object
      properties:
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          minLength: 1
          pattern: ^[0-9a-f]{32}$
        type:
          allOf:
            - $ref: '#/components/schemas/SnowflakeReportType'
          description: Type of report
        format:
          allOf:
            - $ref: '#/components/schemas/ReportFormatType'
          description: Format of report
        status:
          allOf:
            - $ref: '#/components/schemas/ReportStatus1'
          description: Status of report
        createdAt:
          type: string
          description: Date report was created
          format: date-time
          title: ISO Date String
        completedAt:
          type: string
          description: Date report was completed
          format: date-time
          title: ISO Date String
        documentName:
          type: string
          description: Name of the report document
          minLength: 1
        user:
          type: string
          description: ID of the user who requested the report
          example: 59cd72485007a239fb00282ed480da1f
          minLength: 1
          pattern: ^[0-9a-f]{32}$
      required:
        - id
        - type
        - format
        - status
        - createdAt
        - user
    GeographicAddress:
      title: GeographicAddress
      type: object
      properties:
        addressType:
          type: string
        name:
          type: string
          description: Legal name of the enterprise, not necessarily the same as the display name
        street:
          type: string
          description: Address line
        street2:
          nullable: true
          type: string
          description: Optional second address line
        suite:
          nullable: true
          type: string
          description: Optional suite number
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or region
        postalCode:
          type: string
          description: Postal code
        country:
          type: string
          description: ISO 3166-1 Alpha-3 country code
    GetEnterpriseResponse:
      title: GetEnterpriseResponse
      allOf:
        - type: object
          properties:
            wallets:
              type: array
              items:
                type: string
                minLength: 1
            tags:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  id:
                    type: string
                required:
                  - name
                  - id
          required:
            - wallets
            - tags
        - $ref: '#/components/schemas/Enterprise'
    GetEnterpriseUserSigningKeyResponse:
      title: GetEnterpriseUserSigningKeyResponse
      type: object
      properties:
        userId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        userEmail:
          type: string
          example: user@email.com
          format: email
        derivedPubkey:
          type: string
          description: The derived public key of the user.
          example: 0205f47704d137205ba32560e01ed182428c758760d9a05ae58cf2f66069f5d717
        derivationPath:
          nullable: true
          type: string
          description: The derivation path used to derive derivedPubkey. Returned only if you're fetching your own signing key.
          example: m/999999/51550848/191290384
        ecdhKeychain:
          nullable: true
          type: string
          description: The bip32 public key that you can use to fetch a v1 keychain. Returned only if you're fetching your own signing key.
          example: xpub661MyMwAqRbcFm7W87Qcns2ybFoSHsHEkGzNQj1KhPeLNUtV7KKiQvtLVLwPpWFaohqXrCBqCit9sM6G5kmtZHaJYSvMC65ge9HATFShe1S
      required:
        - userId
        - userEmail
        - derivedPubkey
    GetInvoicesResponse:
      title: GetInvoicesResponse
      type: object
      properties:
        invoices:
          type: array
          items:
            type: object
            properties:
              memo:
                type: string
                description: A memo or description for the invoice
                example: Payment for the coffee
              amtPaidMsat:
                type: string
                description: The number of millisats actually paid to this invoice, this may be greater than the amount requested by the invoice, since lightning allows overpaying (but not underpaying) invoices.
                format: number
              invoice:
                type: string
                description: The BOLT \#11 encoded invoice
                example: lnbc500n1p3zv5vkpp5x0thcaz8wep54clc2xt5895azjdzmthyskzzh9yslggy74qtvl6sdpdg3hkuct5d9hkugrxdaezqjn0dphk2fmnypkk2mtsdahkccqzpgxqyz5vqsp5v80q4vq4pwakq2l0hcqgtelgajsymv4ud4jdcrqtnzhvet55qlus9qyyssquqh2wl2m866qs5n72c5vg6wmqx9vzwhs5ypualq4mcu76h2tdkcq3jtjwtggfff7xwtdqxlnwqk8cxpzryjghrmmq3syraswp9vjr7cqry9l96
              paymentHash:
                type: string
                description: The payment hash of the invoice
                example: 63d9ce82e09d16761a85116ed8b65407db4fb22f85d03573de09c480f2c6d175
              valueMsat:
                type: string
                description: The value of the invoice in satoshis
                example: '50000'
                format: number
              expiresAt:
                type: string
                description: ISO-8601 string representing when the invoice will expire
                example: '2022-04-01T18:46:24.677Z'
                format: date-time
                title: ISO Date String
              status:
                type: string
                enum:
                  - open
                  - settled
                  - canceled
                description: The status of the invoice
              walletId:
                allOf:
                  - $ref: '#/components/schemas/WalletIdString'
                description: The wallet to which this invoice belongs
              createdAt:
                type: string
                description: ISO-8601 string representing when the invoice was created
                example: '2022-04-01T18:46:24.677Z'
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                description: ISO-8601 string representing when the invoice was updated
                example: '2022-04-01T18:46:24.677Z'
                format: date-time
                title: ISO Date String
            required:
              - invoice
              - paymentHash
              - valueMsat
              - expiresAt
              - status
              - walletId
              - createdAt
              - updatedAt
        nextBatchPrevId:
          type: string
      required:
        - invoices
    GetPaymentsResponse:
      title: GetPaymentsResponse
      type: object
      properties:
        payments:
          type: array
          items:
            type: object
            description: Off-chain payment information
            properties:
              id:
                type: string
              paymentHash:
                type: string
              walletId:
                type: string
              txRequestId:
                type: string
              status:
                $ref: '#/components/schemas/PaymentStatus'
              invoice:
                type: string
              feeLimitMsat:
                type: string
                format: number
              destination:
                type: string
              updatedAt:
                type: string
                format: date-time
                title: ISO Date String
              createdAt:
                type: string
                format: date-time
                title: ISO Date String
              amountMsat:
                type: string
                format: number
              feeMsat:
                type: string
                format: number
              failureReason:
                $ref: '#/components/schemas/PaymentFailureReason'
              paymentPreimage:
                type: string
            required:
              - id
              - paymentHash
              - walletId
              - txRequestId
              - status
              - invoice
              - feeLimitMsat
              - destination
              - updatedAt
              - createdAt
              - amountMsat
        nextBatchPrevId:
          type: string
      required:
        - payments
    GetPinnedWalletsCountResponse:
      title: GetPinnedWalletsCountResponse
      type: object
      properties:
        pinnedWalletsCount:
          type: number
      required:
        - pinnedWalletsCount
    GetPotentialStuckEthTxs:
      title: Potential Stuck Eth Transactions
      type: object
      properties:
        nonce:
          type: number
          description: The nonce value of the potentially stuck transaction
          example: 200000
          pattern: ^-?\d+$
        txHex:
          type: string
          description: Serialized transaction hex
          example: 01000000000101d58f82d996dd872012675adadf4606734906b25a413f6e2ee535c0c10aef96020000000000ffffffff028de888000000000017a914c91aa24f65827eecec775037d886f2952b73cbe48740420f000000000017a9149304d18497b9bfe9532778a0f06d9fff3b3befaf870500473044022023d7210ba6d8bbd7a28b8af226f40f7235caab79156f93f9c9969fc459ea7f73022050fbdca788fba3de686b66b3501853695ff9d6f375867470207d233b099576e001000069522103d4788cda52f91c1f6c82eb91491ca76108c9c5f0839bc4f02eccc55fedb3311c210391bcef9dcc89570a79ba3c7514e65cd48e766a8868eca2769fa9242fdcc796662102ef3c5ebac4b54df70dea1bb2655126368be10ca0462382fcb730e55cddd2dd6a53aec8b11400
        txId:
          type: string
          description: The on-chain transaction id
          example: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
        txType:
          type: string
          description: The transaction type
          example: AddressInitialization
        sendTransfer:
          type: object
          properties:
            baseValue:
              type: number
              description: The value (in base units) sent by this transfer, excluding network fees. BitGo is deprecating this field in the future.
            baseValueString:
              type: string
              description: The value (in base units) sent by this transfer, excluding network fees represented as a string. BitGo is deprecating this field in the future.
              example: '2000000'
              pattern: ^-?\d+$
            bitgoOrg:
              type: string
              enum:
                - BitGo Trust
                - BitGo New York
                - BitGo Germany
                - BitGo Switzerland
                - BitGo Europe ApS
                - Frankfurt DE Trust
                - BitGo Singapore
                - BitGo Korea
                - BitGo Custody MENA FZE
                - BitGo India
                - BitGo Sister Trust 1
                - BitGo Inc
            coin:
              $ref: '#/components/schemas/CoinString'
            comment:
              nullable: true
              type: string
              description: A comment from the user
            date:
              type: string
              description: The date this Transfer was last updated
              format: date-time
              title: ISO Date String
            enterprise:
              type: string
              example: 59cd72485007a239fb00282ed480da1f
              pattern: ^[0-9a-f]{32}$
            entries:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                    description: An address affected by this Transfer
                    example: 2NAUwNgXaoFj2VVnSEvNLGuez8CfdU2UCMZ
                  associatedNativeCoinAddress:
                    type: string
                    description: The native coin receive address associated with the solana ATA address. This is currently present only for BitGo addresses. This change was done so that there is a mapping between the two addresses in the transfer entries.
                  backingFeeString:
                    type: string
                    description: Backing fee represented as a string
                  failed:
                    type: boolean
                    description: True if this entry is failed
                  isChange:
                    type: boolean
                    description: True if this address is a change address (only exists for UTXO coins) and if this is a "send" transfer
                  isFee:
                    type: boolean
                    description: Indicates if this entry is a fee
                  isInternal:
                    type: boolean
                    description: Indicates if this entry is internal
                  isPayGo:
                    type: boolean
                    description: True if this address is the BitGo PayGo wallet
                  isReward:
                    type: boolean
                    description: Indicates if this entry is a reward
                  memo:
                    type: string
                    description: Memo associated with this entry
                  nftId:
                    type: string
                    description: NFT ID associated with this entry
                  nftSymbol:
                    type: string
                  rewardAddress:
                    type: string
                    description: Reward address associated with this entry
                  subtype:
                    type: string
                    description: Subtype of this entry
                  token:
                    type: string
                    description: If this is a token entry, the token's symbol
                    example: omg
                  tokenContractHash:
                    type: string
                    description: Token contract hash associated with this entry
                  type:
                    type: string
                    enum:
                      - flushForwarderTokens
                      - walletFunding
                      - walletInitialization
                      - addressInitialization
                      - importedOutput
                  value:
                    type: number
                    description: The change (in base units) in the address' balance
                  valueString:
                    type: string
                    description: The change (in base units) in the address' balance represented as a string
                    example: '20000'
                    pattern: '"^-?\d+$"'
                  wallet:
                    type: string
                    description: Only visible when the user has access to the wallet
                    example: 59cd72485007a239fb00282ed480da1f
                    pattern: ^[0-9a-f]{32}$
                required:
                  - address
                description: An array of objects describing the change in address balances made as a result of this Transfer
            history:
              type: array
              items:
                type: object
                properties:
                  action:
                    $ref: '#/components/schemas/TransferAction'
                  comment:
                    nullable: true
                    type: string
                    description: If this history object is of action "commented", this is the comment from the user
                  date:
                    type: string
                    description: The date of this history object
                    format: date-time
                    title: ISO Date String
                  transferId:
                    type: string
                    description: The ID of the transfer that this history object is associated with
                  txid:
                    type: string
                    description: The transaction ID of the transaction that this history object is associated with
                  user:
                    type: string
                    example: 59cd72485007a239fb00282ed480da1f
                    pattern: ^[0-9a-f]{32}$
                required:
                  - action
                  - date
                description: An audit log of events that have happened to the Transfer during its lifecycle
            id:
              type: string
              example: 59cd72485007a239fb00282ed480da1f
              pattern: ^[0-9a-f]{32}$
            organization:
              type: string
              example: 59cd72485007a239fb00282ed480da1f
              pattern: ^[0-9a-f]{32}$
            pendingApproval:
              type: string
            replacedBy:
              type: array
              items:
                type: string
                description: Transaction IDs that replace this transfer.
            replaces:
              type: array
              items:
                type: string
                description: Transaction IDs that this transfer replaces.
            stakingParams:
              type: object
              properties:
                actionType:
                  type: string
                coreDao:
                  type: object
                  properties:
                    amount:
                      type: string
                      format: number
                    expiration:
                      type: string
                      format: date-time
                      title: ISO Date String
                    fee:
                      type: number
                    rewardAddress:
                      type: string
                    validator:
                      type: string
                    version:
                      type: number
                  required:
                    - amount
                    - expiration
                    - fee
                    - rewardAddress
                    - validator
                    - version
                requestId:
                  type: string
                source:
                  type: string
                  enum:
                    - external
                    - internal
                validator:
                  type: string
              required:
                - actionType
                - requestId
            state:
              $ref: '#/components/schemas/TransferState1'
            txid:
              type: string
              description: The on-chain transaction id
              example: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
            type:
              allOf:
                - $ref: '#/components/schemas/TransferType1'
              description: Defines whether or not this Transfer was sent or received by the user
            usd:
              type: number
              description: The amount of USD of this Transfer (will be negative if it's a send)
            usdRate:
              type: number
              description: The USD rate at the time this Transfer was created
            value:
              type: number
              description: The total value (in base units) sent by this Transfer (may be approximate for ETH and other coins where amounts in base units can exceed 2^53 - 1)
            valueString:
              type: string
              description: The total value (in base units) sent by this Transfer represented as a String
              example: '2000000'
              pattern: ^-?\d+$
            wallet:
              type: string
              example: 59cd72485007a239fb00282ed480da1f
              pattern: ^[0-9a-f]{32}$
            walletType:
              type: string
              enum:
                - backing
                - cold
                - custodial
                - custodialPaired
                - hot
                - trading
              description: Wallet type
          required:
            - coin
            - date
            - entries
            - history
            - id
            - state
            - type
            - valueString
            - wallet
        cause:
          type: string
          description: The reason the transaction is potentially stuck
        message:
          type: string
          description: Possible steps to remediate the stuck transaction.
        transferIds:
          type: array
          items:
            type: string
        gasAccelerationFee:
          type: object
          description: Fee required to remediate a stuck transaction when the cause is 'fee acceleration'.
          properties:
            gasPrice:
              type: string
              example: '200000'
              pattern: ^-?\d+$
            maxFeePerGas:
              type: string
              example: '200000'
              pattern: ^-?\d+$
            maxPriorityFeePerGas:
              type: string
              example: '200000'
              pattern: ^-?\d+$
        userActionDisabled:
          type: boolean
          description: True, if manual user action is disabled on this stuck transaction
      required:
        - cause
        - message
    GetPotentialStuckTxsResponse:
      title: GetPotentialStuckTxsResponse
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/GetPotentialStuckEthTxs'
          - $ref: '#/components/schemas/GetPotentialStuckUtxoTxs'
    GetPotentialStuckUtxoTxs:
      title: Potential Stuck UTXO Transactions
      type: object
      properties:
        txId:
          type: string
          description: The on-chain transaction id
          example: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
          minLength: 1
        sendTransfer:
          $ref: '#/components/schemas/Transfer1'
        rbf:
          type: boolean
      required:
        - txId
    GetSequenceIdsResponse:
      title: GetSequenceIdsResponse
      type: object
      properties:
        sequenceIds:
          type: array
          items:
            type: object
            properties:
              txid:
                type: string
                description: The on-chain transaction id
                example: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
                minLength: 1
              contractSequenceId:
                type: number
                description: The contract sequence id of the transaction
            required:
              - txid
              - contractSequenceId
      required:
        - sequenceIds
    GetTokenConstantsResponse:
      title: GetTokenConstantsResponse
      type: object
      properties:
        trustAccountWalletId:
          type: string
          description: Identifier for the trust account wallet that holds and manages token assets
          example: fake_trust_go_account_id
      required:
        - trustAccountWalletId
    GetTransactionRequestsResponse:
      title: GetTransactionRequestsResponse
      type: object
      properties:
        nextBatchPrevId:
          type: string
          description: When a result set is truncated, this field returns the id of the last object in the previous batch. To get the next batch of results, pass this value via the "prevId" query parameter.
          format: uuid
        txRequests:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransactionRequestLite2'
              - $ref: '#/components/schemas/TransactionRequestFull'
      required:
        - txRequests
    GetTransactionRequestsWithWalletPermissionsResponse:
      title: GetTransactionRequestsWithWalletPermissionsResponse
      type: object
      properties:
        nextBatchPrevId:
          type: string
        txRequests:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        state:
                          $ref: '#/components/schemas/TransactionState'
                        unsignedTx:
                          $ref: '#/components/schemas/UnsignedTransaction'
                        signatureShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  privateShareProof:
                                    type: string
                                    description: The private share proof
                                  publicShare:
                                    type: string
                                    description: The public share
                                  vssProof:
                                    type: string
                                    description: The VSS proof of the signature share
                              - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                        commitmentShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - commitment
                                    description: The type of the commitment share
                                required:
                                  - type
                              - $ref: '#/components/schemas/BaseShare'
                        txHash:
                          type: string
                        updatedDate:
                          type: string
                          format: date-time
                          title: ISO Date String
                        createdDate:
                          type: string
                          format: date-time
                          title: ISO Date String
                      required:
                        - state
                        - unsignedTx
                      description: The transactions associated with the transaction request
                  messages:
                    type: array
                    items:
                      type: object
                      description: The messages associated with the transaction request
                      properties:
                        state:
                          allOf:
                            - $ref: '#/components/schemas/TransactionState'
                          description: The current state of the message
                        signatureShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  privateShareProof:
                                    type: string
                                    description: The private share proof
                                  publicShare:
                                    type: string
                                    description: The public share
                                  vssProof:
                                    type: string
                                    description: The VSS proof of the signature share
                              - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                            description: Signature shares for the message
                        privateSignatureShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  privateShareProof:
                                    type: string
                                    description: The private share proof
                                  publicShare:
                                    type: string
                                    description: The public share
                                  vssProof:
                                    type: string
                                    description: The VSS proof of the signature share
                              - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                            description: Private signature shares for the message
                        commitmentShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - commitment
                                    description: The type of the commitment share
                                required:
                                  - type
                              - $ref: '#/components/schemas/BaseShare'
                            description: Commitment shares for the message (used for EdDSA)
                        encryptedShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  type:
                                    $ref: '#/components/schemas/ShareType'
                                required:
                                  - type
                              - $ref: '#/components/schemas/BaseShare'
                            description: Encrypted shares for the message
                        txHash:
                          type: string
                          description: Transaction hash
                        updatedDate:
                          type: string
                          description: Date when the message was last updated
                          format: date-time
                          title: ISO Date String
                        createdDate:
                          type: string
                          description: Date when the message was created
                          format: date-time
                          title: ISO Date String
                        messageRaw:
                          type: string
                          description: The raw message to be signed
                        messageEncoded:
                          type: string
                          description: The encoded message
                        messageBroadcastable:
                          type: string
                          description: The broadcastable message
                        messageStandardType:
                          type: string
                          description: The encoded message
                        derivationPath:
                          type: string
                          description: Derivation path for the message
                        combineSigShare:
                          type: string
                          description: Combined signature share
                        coin:
                          type: string
                          description: Coin type for the message
                        bitgoPaillierChallenge: {}
                        encryptedChallenge:
                          type: string
                          description: BitGo's encrypted challenge for ECDSA with Range Proofs
                      required:
                        - state
                        - messageRaw
              - $ref: '#/components/schemas/TransactionRequestBase'
      required:
        - txRequests
    GetWalletBalanceResponse:
      title: GetWalletBalanceResponse
      type: object
      properties:
        balances:
          type: array
          items:
            type: object
            properties:
              coin:
                allOf:
                  - $ref: '#/components/schemas/CoinNonEmptyString'
                description: A cryptocurrency or token ticker symbol.
              balanceString:
                type: string
                description: String representation of the balance in base units. Guaranteed to not lose precision.
              confirmedBalanceString:
                type: string
                description: String representation of the confirmed balance in base units. Guaranteed to not lose precision.
              spendableBalanceString:
                type: string
                description: String representation of the spendable in base units. Guaranteed to not lose precision. Will not be included if `excludeSpendableBalances=false`
              stakingBalanceString:
                type: string
                description: The staked balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
              rewardBalanceString:
                type: string
                description: The staking reward balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
              offchain:
                allOf:
                  - $ref: '#/components/schemas/OffChainWalletBalance'
                description: Lightning Balances
            required:
              - coin
              - balanceString
              - confirmedBalanceString
      required:
        - balances
    GetWalletBalancesByCoinResponse:
      title: GetWalletBalancesByCoinResponse
      allOf:
        - type: object
          properties:
            balance:
              type: number
              description: The total balance of all wallets containing the given coin type. May lose precision for large values.
            confirmedBalance:
              type: number
              description: The total balance of confirmed transactions for all wallets containing the given coin type. May lose precision for large values.
            spendableBalance:
              type: number
              description: The total balance of all wallets containing the given coin which may be used as inputs for creating new transactions. May lose precision for large values.
            stakedBalance:
              type: number
              description: The total balance of all wallets containing the given coin which has been staked. May lose precision for large values.
            stakedBalanceString:
              type: string
              description: String representation of 'stakedBalance'. Guaranteed to not lose precision.
            tokens:
              allOf:
                - $ref: '#/components/schemas/tokenBalances'
              description: Object of key value pairs where the keys are the token symbols (e.g. omg) and the values are the balance data for that token symbol.
            unsupportedTokens:
              allOf:
                - $ref: '#/components/schemas/tokenBalances'
              description: Object of key value pairs where the keys are the unsupported token contracts (e.g. 0x9928e4046d7c6513326ccea028cd3e7a91c7590a) and the values are the balance data for that token contract. UnsupportedTokens will only be returned for wallets that supports Metamask Institutional and has enableMMI flag turned on
          required:
            - balance
            - confirmedBalance
            - spendableBalance
        - $ref: '#/components/schemas/baseBalanceStrings'
    GoUnstakeIntent:
      title: GoUnstakeIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - goUnstake
              description: Unstake and transfer funds from a staking wallet to a go account.
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intentType
            - recipients
        - $ref: '#/components/schemas/BaseGoStakeIntent'
    GrantTypes:
      title: GrantTypes
      type: string
      enum:
        - password
        - passkey
        - refresh_token
        - authorization_code
        - oauth
    GreaterThanOrEqualToValue:
      title: Greater than or equal to
      type: object
      description: The greater than or equal to (>=) operator.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - '>='
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Greater than or equal to
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: The transfer amount must be greater than or equal to the given limit for the condition to trigger
    GreaterThanValue:
      title: Greater than
      type: object
      description: The greater than (>) operator.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - '>'
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Greater than
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: The transfer amount must be greater than the given limit for the condition to trigger
    HederaAddress:
      title: Hedera Address
      type: object
      properties:
        baseAddress:
          type: string
        memoId:
          type: string
      required:
        - baseAddress
        - memoId
    HederaWallet:
      title: Hedera Wallet
      type: object
      properties:
        addressCount:
          type: number
        pendingChainInitialization:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        trustedTokens:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TrustedTokenState'
              - $ref: '#/components/schemas/Token'
        deployTxHash:
          type: string
        baseAddress:
          type: string
        confirmedTransactionId:
          type: string
      required:
        - addressCount
        - pendingChainInitialization
        - creationFailure
        - trustedTokens
    HistoricalPrice:
      type: object
      required:
        - time
        - open
        - high
        - low
        - close
        - base_volume
        - quote_volume
      properties:
        time:
          type: string
          format: date-time
        open:
          type: number
          format: float
        high:
          type: number
          format: float
        low:
          type: number
          format: float
        close:
          type: number
          format: float
        base_volume:
          type: number
          format: float
        quote_volume:
          type: number
          format: float
      example:
        time: '2014-11-07T22:19:28.578Z'
        open: 576.0590066
        high: 576.0590066
        low: 575.8330204
        close: 575.978887
        base_volume: 296.23
        quote_volume: 170627.62385
    HistoricalPriceResult:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - prices
            - nextBatchPrevId
          properties:
            prices:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/HistoricalPrice'
            nextBatchPrevId:
              type: string
      example:
        data:
          prices:
            BTC-USD:
              - time: '2014-11-07T22:19:28.578Z'
                open: 576.0590066
                high: 576.0590066
                low: 575.8330204
                close: 575.978887
                base_volume: 296.23
                quote_volume: 170627.62385
          nextBatchPrevId: a0dbb6aad06d9a37c9882231d8dc32ef
    HotValue:
      title: Self-managed hot wallet
      type: object
      description: Self-managed hot wallet wallet.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - hot
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Hot Wallet
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: A hot wallet
    IcpPaymentIntent:
      title: ICP Payment Intent
      allOf:
        - type: object
          properties:
            memo:
              $ref: '#/components/schemas/optionalString'
        - $ref: '#/components/schemas/PaymentIntent'
    Id:
      title: ID
      type: string
      pattern: ^[0-9a-f]{32}$
      example: 59cd72485007a239fb00282ed480da1f
    IdArray:
      type: array
      items:
        $ref: '#/components/schemas/Id'
      example:
        - 585951a5df8380e0e3063e9f
        - 585951a5df8380e0e304a553
    Identity:
      title: Identity
      type: object
      properties:
        kyc:
          $ref: '#/components/schemas/Kyc'
        verified:
          type: boolean
          description: Whether the user is verified
    IdentityCreateResponse:
      title: IdentityCreateResponse
      type: object
      properties:
        id:
          type: string
          title: uuid
        status:
          type: string
          minLength: 1
      required:
        - id
        - status
    IdentityDocumentGetResponse:
      title: IdentityDocumentGetResponse
      type: object
      properties:
        documents:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                title: uuid
              identityId:
                type: string
                title: uuid
              status:
                type: string
                minLength: 1
              createdAt:
                type: string
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                format: date-time
                title: ISO Date String
              fileUploads:
                type: array
                items:
                  type: object
                  properties:
                    fileName:
                      type: string
                      minLength: 1
                    fileSize:
                      type: number
                    uploadStatus:
                      type: string
                      minLength: 1
                    documentType:
                      $ref: '#/components/schemas/IdentityDocumentType'
                  required:
                    - fileName
                    - fileSize
                    - uploadStatus
                    - documentType
              selectedIdClass:
                $ref: '#/components/schemas/PersonaIdClass'
            required:
              - id
              - identityId
              - status
              - createdAt
              - updatedAt
      required:
        - documents
    IdentityDocumentType:
      title: IdentityDocumentType
      type: string
      enum:
        - frontPhoto
        - backPhoto
        - proofOfResidency
    IdentityGetResponse:
      title: IdentityGetResponse
      type: object
      properties:
        identities:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                title: uuid
              status:
                type: string
                minLength: 1
              organizationId:
                type: string
                minLength: 1
              enterpriseId:
                type: string
                minLength: 1
              userId:
                type: string
                minLength: 1
              createdAt:
                type: string
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                format: date-time
                title: ISO Date String
              errorDescription:
                type: string
                minLength: 1
              occupation:
                type: string
              countryOfCitizenship:
                type: string
              govIdCountryOfIssuance:
                type: string
              politicallyExposedPerson:
                type: boolean
              debugStatus:
                type: string
              country:
                type: string
              countryOfResidence:
                type: string
              addressCity:
                type: string
              addressPostalCode:
                type: string
              addressStreet1:
                type: string
              addressStreet2:
                type: string
              addressSubdivision:
                type: string
              birthDate:
                type: string
                format: date-time
                title: ISO Date String
              identificationNumber:
                type: string
              nameFirst:
                type: string
              nameLast:
                type: string
              nameMiddle:
                type: string
              phoneNumber:
                type: string
              selectedIdClass:
                type: string
              debugFailureReason:
                type: string
              emailAddress:
                type: string
              contractSignerNameFull:
                type: string
              contractSignedDate:
                type: string
                format: date-time
                title: ISO Date String
              contractSignedIPAddress:
                type: string
              contractVersion:
                type: string
              userAgreesToTerms:
                type: string
              signatureSubmitted:
                type: string
              signaturesSubmitted:
                type: array
                items:
                  type: string
                  enum:
                    - csa
                    - mpa
                    - mic
                    - wvr
              signaturesRequired:
                type: array
                items:
                  type: string
                  enum:
                    - csa
                    - mpa
                    - mic
                    - wvr
            required:
              - id
              - status
      required:
        - identities
    IdentityOccupation:
      title: IdentityOccupation
      type: string
      enum:
        - Agriculture
        - Art Dealer / Auctioneer / Import / Export Company
        - Financial Services (Asset Mgmt., Bank, Broker Dealer, Commodities, Mutual Fund, Ins. Co)
        - Casinos and Gambling Establishments
        - Charity/NGO/Non-Profit/Foundation/Endowment
        - Computer Programmer / Administrator / Software Engineer / IT or Software / Technology Company
        - Crypto Services (ATM, Exchange, Lender, Coins/Token)
        - Education / Teacher
        - Extractive Industry (Oil, Gas, etc.) / Jewels / Gemstones / Precious Metals
        - Family Office
        - Film / TV / Entertainment (not adult)
        - Government/State owned/Political Org. (i.e. Sovereign Wealth Fund)
        - Healthcare
        - Law Enforcement / Military / Protective Services
        - Miner / Mining Pool
        - Money Service Business
        - Other
        - Private Equity / Venture Capital
        - Professional Service Providers (lawyers accountants etc.)
        - Real estate brokers developers and appraisers
        - Recreation / Hospitality
        - Student / Unemployed / Retired
        - Traders / Trading (High Frequency, Proprietary, Market Maker)
        - Other - Default
        - Weapons Dealers
    IdentityStatus:
      type: string
      enum:
        - approved
        - declined
        - input error
        - ssn error
        - gov id error
        - ssn verified
        - gov id verified
        - evaluating submission
        - awaiting document upload
        - records uploaded
        - in review
        - incomplete verifications
        - awaiting signature
        - signature submitted
        - initiating
        - additional information submitted
    IdentityStatusEnum:
      title: IdentityStatusEnum
      type: string
      enum:
        - created
        - approved
        - declined
        - needs review
        - input error
        - ssn error
        - gov id error
        - ssn verified
        - gov id verified
        - enrichment
        - awaiting document upload
        - records uploaded
        - in review
        - incomplete verifications
        - records uploaded 2
        - awaiting signature
        - signature submitted
        - initiating
        - additional information submitted
    IdentityUpdateResponse:
      title: IdentityUpdateResponse
      type: object
      properties:
        id:
          type: string
          title: uuid
        status:
          type: string
          minLength: 1
        organizationId:
          type: string
          minLength: 1
        enterpriseId:
          type: string
          minLength: 1
        userId:
          type: string
          minLength: 1
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          format: date-time
          title: ISO Date String
        errorDescription:
          type: string
          minLength: 1
        signaturesSubmitted:
          $ref: '#/components/schemas/ContractTypes'
        signaturesRequired:
          $ref: '#/components/schemas/ContractTypes'
      required:
        - id
        - status
        - organizationId
    InboundTrade:
      title: InboundTrade
      allOf:
        - type: object
          properties:
            counterpartyConnectionId:
              type: string
              title: uuid
        - $ref: '#/components/schemas/TradeBaseReq'
        - $ref: '#/components/schemas/TradeBaseQuoteInbound'
    InitiateTrustlineParams:
      type: object
      properties:
        memo:
          type: object
          properties:
            type:
              type: string
            value:
              type: string
          description: |
            The memo contains optional extra information that can also be used to identify payments in Stellar.
        comment:
          type: string
          description: |
            Optional metadata (only persisted in BitGo) to be applied to the transaction. Use this to add transaction-specific information such as the transaction's purpose or another identifier that you want to reference later. The value is shown in the UI in the transfer listing page.
          maxLength: 256
        trustlines:
          type: array
          items:
            $ref: '#/components/schemas/Trustline'
          description: List of trustlines to manage on the account.
      required:
        - trustlines
    InitiatorIsAllowedToApproveActionParameter:
      title: Initiator is allowed to approve
      type: object
      description: Whether the initiator is allowed to approve this action.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the action parameter.
          enum:
            - initiatorIsAllowedToApprove
          example: initiatorIsAllowedToApprove
        label:
          type: string
          description: A label for the action parameter which can be shown to an end user.
          example: Initiator Is Allowed To Approve
        description:
          type: string
          description: A description for the action parameter which can be shown to an end user.
          example: Whether the initiator is allowed to approve this action
        type:
          type: string
          description: The type of acceptable values for this action parameter.
          enum:
            - BOOLEAN
          example: BOOLEAN
        required:
          type: string
          description: A value is not required.
          enum:
            - OPTIONAL
          example: OPTIONAL
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: false
    InquiryStatus:
      title: InquiryStatus
      type: string
      enum:
        - completed
        - failed
    InquirySubType:
      title: InquirySubType
      type: string
      enum:
        - withdrawalLivenessCheck
        - managePolicyLivenessCheck
    InquiryType:
      title: InquiryType
      type: string
      enum:
        - livenessCheck
    InscriptionId:
      type: string
      description: The ID of the inscription in the form <txid>i<vin>
      example: 003f688cc349f1fca8ac5ffa21671ca911b6ef351085c60733ed8c2ebf162cb8i2
      pattern: ^[\da-f]{64}i[\d]+$
    IntegerOrIntegerString:
      oneOf:
        - type: string
          pattern: ^-?\d+$
          example: '2000000'
        - type: integer
    IntegerOrString:
      oneOf:
        - type: string
          example: '2000000'
        - type: integer
    IntegerString:
      type: string
      pattern: ^-?\d+$
      example: '2000000'
    IntentType:
      title: IntentType
      type: string
      enum:
        - payment
        - transferToken
        - consolidate
        - consolidateToken
        - fanout
        - stake
        - unstake
        - delegate
        - undelegate
        - switchValidator
        - claim
        - stakeClaimRewards
        - pledge
        - voteDelegation
        - vote
        - createAccount
        - updateAccount
        - addTrustLine
        - removeTrustLine
        - signMessage
        - signTypedStructuredData
        - enableToken
        - authorize
        - acceleration
        - fillNonce
        - walletRecovery
        - contractCall
        - deactivate
        - customTx
        - closeAssociatedTokenAccount
        - stakeWithCallData
        - feeAddressTransfer
        - tokenApproval
        - goUnstake
        - createBtcDelegation
    IntentType1:
      title: IntentType
      type: string
      enum:
        - payment
        - transferToken
        - consolidate
        - consolidateToken
        - fanout
        - stake
        - unstake
        - delegate
        - undelegate
        - switchValidator
        - claim
        - stakeClaimRewards
        - pledge
        - vote
        - createAccount
        - updateAccount
        - addTrustLine
        - removeTrustLine
        - signMessage
        - signTypedStructuredData
        - enableToken
        - authorize
        - acceleration
        - fillNonce
        - walletRecovery
        - contractCall
        - deactivate
        - customTx
        - closeAssociatedTokenAccount
    InternalUserOAuthSetting:
      title: InternalUserOAuthSetting
      type: object
      properties:
        clientId:
          type: string
        tenantId:
          type: string
        oauthProvider:
          $ref: '#/components/schemas/OAuthProvider'
        clientSecret:
          type: string
      required:
        - clientId
        - tenantId
        - oauthProvider
        - clientSecret
    InternationalWireAccountResponseProps:
      title: InternationalWireAccountResponseProps
      type: object
      properties:
        type:
          type: string
          enum:
            - wire
        swiftCode:
          $ref: '#/components/schemas/SwiftCodeType'
        accountType:
          $ref: '#/components/schemas/OptionalAccountType'
      required:
        - type
        - swiftCode
        - accountType
    InternationalWireBankAccount:
      title: International Wire Bank Account
      type: object
      description: |
        An external bank account. `routingNumber` must be set for US bank accounts.
        `swiftCode` must be set for banks outside the US.
      properties:
        accountNumber:
          description: Bank account number or IBAN.
          type: string
          minLength: 1
          maxLength: 34
          example: 114584906
        enterpriseId:
          $ref: '#/components/schemas/Id'
        address:
          type: string
          example: 2390 El Camino Real, Palo Alto, CA 94306
        address1:
          type: string
          example: 2390 El Camino Real
        address2:
          type: string
          example: Palo Alto, CA 94306
        address3:
          type: string
          example: ''
        name:
          type: string
          example: America California Bank
        ownerName:
          type: string
          example: Donald E. Knuth
        ownerAddress:
          type: string
          example: 2390 El Camino Real, Palo Alto, CA 94306
        owner:
          type: object
          description: Bank account owner
          properties:
            name:
              type: string
              example: Donald E. Knuth
            address1:
              type: string
              example: Computer Science Department
            address2:
              type: string
              example: Stanford University
            address3:
              type: string
              example: Stanford, CA 94305-9045
          required:
            - name
            - address1
        swiftCode:
          description: Bank identifier code, as specified by ISO 9362.  Required for international wire transfers.
          type: string
          example: DEUTDEFF500
          minLength: 8
          maxLength: 11
          pattern: ^[A-Z]{6}[0-9A-Z]{2}([0-9A-Z]{3})?$
        shortCountryCode:
          $ref: '#/components/schemas/ShortCountryCode'
        type:
          $ref: '#/components/schemas/BankAccountType'
        currency:
          $ref: '#/components/schemas/BankAccountCurrency'
        furtherCreditTo:
          type: string
          example: Donald E. Knuth
        intermediaryBankName:
          type: string
          example: America California Bank
        intermediaryBankId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
      required:
        - accountNumber
        - address1
        - shortCountryCode
        - name
        - owner
        - enterpriseId
        - swiftCode
    InternationalWireBankAccountRequest:
      title: InternationalWireBankAccountRequest
      description: Request schema for creating an international wire bank account
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - wire
              description: Must be 'wire' for international wire accounts
            swiftCode:
              type: string
              description: SWIFT/BIC code for the international wire account
          required:
            - type
            - swiftCode
        - $ref: '#/components/schemas/BankAccountRequest1'
    InternationalWireBankAccountResponse:
      title: InternationalWireBankAccountResponse
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/InternationalWireAccountResponseProps'
        - $ref: '#/components/schemas/BankAccountResponseProps'
    InvalidAddress:
      title: Invalid Address
      allOf:
        - type: object
          properties:
            name:
              type: string
              enum:
                - InvalidAddress
          required:
            - name
        - $ref: '#/components/schemas/InvalidId'
    InvalidAddress1:
      title: Invalid address
      allOf:
        - $ref: '#/components/schemas/PlatformErrorNoName3'
        - properties:
            context:
              type: object
              properties:
                address:
                  type: string
                coin:
                  $ref: '#/components/schemas/Coin'
              required:
                - address
                - coin
            name:
              type: string
              description: Error code
              enum:
                - InvalidAddress
          required:
            - coin
            - context
            - address
            - name
    InvalidEnterpriseId:
      title: Invalid Enterprise ID
      allOf:
        - type: object
          properties:
            name:
              type: string
              enum:
                - InvalidEnterpriseId
          required:
            - name
        - $ref: '#/components/schemas/InvalidId'
    InvalidEnterpriseId1:
      title: Invalid enterprise ID
      allOf:
        - $ref: '#/components/schemas/InvalidId1'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - InvalidEnterpriseId
          required:
            - name
    InvalidId:
      title: InvalidId
      allOf:
        - type: object
          properties:
            context:
              type: object
              properties:
                id:
                  type: string
                  example: 59cd72485007a239fb00282ed480da1f
                  pattern: ^[0-9a-f]{32}$
              required:
                - id
          required:
            - context
        - $ref: '#/components/schemas/PlatformErrorNoName'
    InvalidId1:
      allOf:
        - $ref: '#/components/schemas/PlatformErrorNoName3'
        - properties:
            context:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/Id'
          required:
            - context
    InvalidOFAC:
      title: Address error
      allOf:
        - $ref: '#/components/schemas/PlatformErrorNoName3'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - AddressError
            error:
              type: string
              description: Human-readable error message
              example: Address cannot be used
          required:
            - name
    InvalidOrganizationId:
      title: Invalid Organization ID
      allOf:
        - type: object
          properties:
            name:
              type: string
              enum:
                - InvalidOrganizationId
          required:
            - name
        - $ref: '#/components/schemas/InvalidId'
    InvalidPaymentHash:
      title: Invalid Payment Hash
      allOf:
        - type: object
          properties:
            name:
              type: string
              enum:
                - InvalidPaymentHash
          required:
            - name
        - $ref: '#/components/schemas/InvalidId'
    InvalidPaymentId:
      title: Invalid Payment Id
      allOf:
        - type: object
          properties:
            name:
              type: string
              enum:
                - InvalidPaymentId
          required:
            - name
        - $ref: '#/components/schemas/InvalidId'
    InvalidTransferId:
      title: Invalid transfer ID
      allOf:
        - $ref: '#/components/schemas/InvalidId1'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - InvalidTransferId
          required:
            - name
    InvalidTxId:
      title: Invalid TxId
      allOf:
        - type: object
          properties:
            name:
              type: string
              enum:
                - InvalidTxId
          required:
            - name
        - $ref: '#/components/schemas/InvalidId'
    InvalidUserId:
      title: Invalid user ID
      allOf:
        - $ref: '#/components/schemas/InvalidId1'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - InvalidUserId
          required:
            - name
    InvalidWalletId:
      title: Invalid wallet id
      allOf:
        - $ref: '#/components/schemas/InvalidId1'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - InvalidWalletId
          required:
            - name
    InvalidWalletId1:
      title: Invalid Wallet ID
      allOf:
        - type: object
          properties:
            name:
              type: string
              enum:
                - InvalidWalletId
          required:
            - name
        - $ref: '#/components/schemas/InvalidId'
    Ip:
      type: string
      format: ipv4
      example: 127.0.0.1
    Key:
      title: Multisig
      allOf:
        - $ref: '#/components/schemas/KeyCommon'
        - type: object
          properties:
            pub:
              $ref: '#/components/schemas/Pub'
      required:
        - id
        - type
    Key1:
      title: Key
      type: object
      properties:
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        pub:
          type: string
          description: Public part of a key pair
          example: xpub661MyMwAqRbcGMVhmc7wqQRYMtcX9LAvSj1pjB213y5TsrkV2uuzJjWnjBrT1FUeNWGPjaVm5p7o6jdNcQJrV1cy3a1R8NQ9m7LuYKA8RpH
        ethAddress:
          type: string
          description: Ethereum address associated with this key
        derivedFromParentWithSeed:
          type: string
        source:
          allOf:
            - $ref: '#/components/schemas/KeySourceC'
          example: user
        hsmType:
          type: string
          enum:
            - institutional
            - nitro
            - SDTrustNitro
          description: The type of HSM that owns this key.
          example: institutional
        isBitGo:
          type: boolean
          description: '"true" if this key is owned by BitGo'
          example: false
        isTrust:
          type: boolean
          description: '"true" if this key is owned by Trust'
          example: false
        encryptedPrv:
          type: string
          description: The encrypted private key
        aspKeyId:
          type: number
        coinSpecific:
          type: object
          additionalProperties: {}
        type:
          allOf:
            - $ref: '#/components/schemas/KeyTypeC'
          default: independent
          description: A value from a string enum denoting what kind of key this is. Defaults to “independent” indicating an on-chain key is requested. If set to “tss” this tells us that a “tss” key is requested.
          example: tss
        commonKeychain:
          type: string
          description: The commonKeychain for the key if this is a MPC key. This value is required to be set when the type is set to “tss” and when the source is either “user” or “backup”. Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key. This value is the concatenation of the common public key (32-byte) with the common chaincode (32-byte) as a hex string.
        verifiedVssProof:
          type: boolean
        commonPub:
          type: string
          description: e common public key. This value is required to be set for BLS keys when the source is either "user" or "backup". Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key.
        commonPubSig:
          type: string
        provider:
          type: string
        distributedCustody:
          type: string
        webauthnDevices:
          type: array
          items:
            type: object
            properties:
              authenticatorInfo:
                allOf:
                  - $ref: '#/components/schemas/AuthenticatorInfo'
                description: The information about the authenticator
              encryptedPrv:
                type: string
                description: The encrypted private key
              otpDeviceId:
                type: string
                description: The OTP device ID
              prfSalt:
                type: string
                description: The PRF salt
            required:
              - authenticatorInfo
              - encryptedPrv
              - otpDeviceId
              - prfSalt
        migratedFrom:
          type: string
      required:
        - id
        - pub
        - source
        - type
    KeyCommon:
      type: object
      properties:
        encryptedPrv:
          type: string
          description: The encrypted private key
        id:
          $ref: '#/components/schemas/Id'
        isBitGo:
          type: boolean
          description: True, if this key is owned by BitGo
          example: false
        source:
          $ref: '#/components/schemas/KeySource'
        type:
          $ref: '#/components/schemas/KeyType'
      required:
        - id
        - type
    KeyCreateCoinSpecific:
      type: object
      properties:
        lnbtc:
          $ref: '#/components/schemas/KeyCreateCoinSpecificLnbtc'
        tlnbtc:
          $ref: '#/components/schemas/KeyCreateCoinSpecificLnbtc'
    KeyCreateCoinSpecificLnbtc:
      type: object
      properties:
        purpose:
          allOf:
            - $ref: '#/components/schemas/KeyPurpose'
          description: The purpose of the key.
    KeyListItem:
      title: KeyListItem
      type: object
      properties:
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        encryptedPrv:
          type: string
          description: The encrypted private key
      required:
        - id
    KeyListResponse:
      title: KeyListResponse
      type: array
      items:
        type: object
        properties:
          walletId:
            type: string
          key:
            allOf:
              - $ref: '#/components/schemas/KeyListItem'
            description: Represents a key associated with a wallet. The key can either be a valid `Key` object or `null` if no key is associated.
        required:
          - walletId
    KeyPurpose:
      type: string
      enum:
        - userAuth
        - nodeAuth
      example: userAuth
    KeyShare:
      type: object
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The source of the key share.
        to:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The recipient of the key share.
        publicShare:
          type: string
          description: Public part of the share concatenated with chain code (64+64 characters hex string).
        privateShare:
          type: string
          description: Private part of the share concatenated with chain code (64+64 characters hex string). Depending on who the source and the recipient are, the share might be encrypted against the recipient's public key.
        privateShareProof:
          type: string
          description: The certificate of the private share, signed by the source of the key share.
        vssProof:
          type: string
          description: The verifiable shamir share verification value
      required:
        - from
        - to
        - publicShare
        - privateShare
    KeyShareResponse:
      allOf:
        - $ref: '#/components/schemas/KeyShare'
        - type: object
          properties:
            hsmSig:
              type: string
              description: openPGP ASCII armored public key format string. Can be used to ensure that the "u" value came from the HSM. This contains the HSM signature/certification (signed by bitgo GPG key pair) of the public form of the "u" value and notation packets that indicate the commonPublicKey and the key ids of the two GPG keys used to share wrapping (userGPGPublicKey and backupGPGPublicKey).
      required:
        - hsmSig
    KeyShareSource:
      type: string
      enum:
        - user
        - backup
        - bitgo
      example: user
    KeySource:
      type: string
      enum:
        - backup
        - bitgo
        - cold
        - user
      example: user
    KeySourceC:
      title: KeySourceC
      type: string
      enum:
        - user
        - cold
        - bitgo
        - backup
    KeyTSS:
      title: MPC
      allOf:
        - $ref: '#/components/schemas/KeyCommon'
        - type: object
          properties:
            commonKeychain:
              type: string
              description: The commonKeychain for the key if this is a MPC key. This value is required to be set when the type is set to “tss” and when the source is either “user” or “backup”. Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key. This value is the concatenation of the common public key (32-byte) with the common chaincode (32-byte) as a hex string.
            commonPub:
              type: string
              description: The common public key. This value is required to be set for BLS keys when the source is either "user" or "backup". Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key.
      required:
        - id
        - type
        - source
    KeyTSSCreated:
      title: MPC key
      description: This schema contains KeyTSS attributes and several ephemeral fileds which are only available during the key creation since they are not stored.
      allOf:
        - $ref: '#/components/schemas/KeyTSS'
        - type: object
          properties:
            commonKeychainSig:
              type: string
              description: openPGP ASCII armored pubkey format string. This contains the HSM signature/certification (signed by BitGo MPC GPG key pair) of the commonKeychain. This is necessary for verification purposes to ensure that the commonKeychain value came from BitGo's HSM. Used for full custody/OVC operations.
            commonPublicKeySig:
              type: string
              description: OpenPGP ASCII pubkey armoured string containing HSM signature certification. Allows to ensure that commonPublicKey came from the HSM
            keyShares:
              type: array
              items:
                $ref: '#/components/schemas/KeyShareResponse'
            walletHSMGPGPublicKeySigs:
              type: string
              description: GPG ASCII armored public key format that consists of HSM signature/certification and GPG notation data appended to the key signature subpackets
      required:
        - id
        - type
        - source
    KeyType:
      type: string
      enum:
        - tss
        - independent
        - blsdkg
      default: independent
      description: A value from a string enum denoting what kind of key this is. Defaults to “independent” indicating an on-chain key is requested. If set to “tss” this tells us that a “tss” key is requested.
      example: tss
    KeyTypeC:
      title: KeyTypeC
      type: string
      enum:
        - tss
        - independent
    Keys:
      type: array
      items:
        $ref: '#/components/schemas/Id'
      example:
        - 585951a5df8380e0e304a553
        - 585951a5df8380e0e30d645c
        - 585951a5df8380e0e30b6147
    KeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Key'
              - $ref: '#/components/schemas/KeyTSS'
      required:
        - keys
    Kyc:
      title: Kyc
      type: object
      properties:
        available:
          type: boolean
        required:
          type: boolean
        data:
          $ref: '#/components/schemas/KycData'
        documents:
          $ref: '#/components/schemas/KycDocuments'
        failureCount:
          type: number
        fullyRequired:
          type: boolean
        hasVideoID:
          type: boolean
        overallState:
          $ref: '#/components/schemas/UserKycState1'
        passport:
          $ref: '#/components/schemas/KycPassport'
        residency:
          $ref: '#/components/schemas/KycResidency'
        isScreeningRequired:
          type: boolean
        documentsWaived:
          type: boolean
        unverifiedPaygoUser:
          type: boolean
        enterpriseVideoCallInfo:
          type: array
          items:
            type: object
            properties:
              enterpriseId:
                type: string
              videoCallId:
                type: string
            required:
              - enterpriseId
              - videoCallId
      required:
        - available
        - required
    KycData:
      title: KycData
      type: object
      properties:
        state:
          $ref: '#/components/schemas/UserKycState1'
        fields:
          nullable: true
          type: object
          additionalProperties: {}
      required:
        - state
    KycDocuments:
      title: KycDocuments
      type: object
      properties:
        state:
          $ref: '#/components/schemas/UserKycState1'
      required:
        - state
    KycPassport:
      title: KycPassport
      type: object
      properties:
        required:
          type: boolean
        state:
          $ref: '#/components/schemas/UserKycState1'
      required:
        - required
    KycResidency:
      title: KycResidency
      type: object
      properties:
        state:
          $ref: '#/components/schemas/UserKycState1'
      required:
        - state
    KycState:
      title: KycState
      type: string
      enum:
        - unverified
        - approved
        - rejected
        - pending
    LegalIdentifiers:
      title: LegalIdentifiers
      type: object
      properties:
        legalPersonNameIdentifierType:
          $ref: '#/components/schemas/LegalPersonNameIdentifierType'
        legalPersonName:
          type: string
      required:
        - legalPersonNameIdentifierType
    LegalPersonNameIdentifierType:
      title: LegalPersonNameIdentifierType
      type: string
      enum:
        - LEGL
    LessThanOrEqualToValue:
      title: Less than or equal to
      type: object
      description: The less than or equal to (<=) operator.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - <=
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Less than or equal to
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: The transfer amount must be less than or equal to the given limit for the condition to trigger
    LessThanValue:
      title: Less than
      type: object
      description: The less than (>) operator.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - <
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Less than
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: The transfer amount must be less than the given limit for the condition to trigger
    Level1OrderBookSnapshot:
      required:
        - askPrice
        - askSize
        - bidPrice
        - bidSize
        - product
        - time
      type: object
      properties:
        time:
          type: string
          format: date-time
        product:
          type: string
          description: Product name e.g. BTC
        bidPrice:
          type: string
          format: decimal
        bidSize:
          type: string
          format: decimal
        askPrice:
          type: string
          format: decimal
        askSize:
          type: string
          format: decimal
      example:
        time: {}
        product: BTC-USD
        bidPrice: '7090.96'
        bidSize: '1.253433'
        askPrice: '7090.97'
        askSize: '25.23881'
    Level2OrderBookSnapshot:
      required:
        - asks
        - bids
        - product
        - time
      type: object
      properties:
        time:
          type: string
          format: date-time
        product:
          type: string
          description: Product name e.g. BTC
        bids:
          type: array
          description: An array of levels of [price, size]
          items:
            type: string
            format: decimal
        asks:
          type: array
          description: An array of levels of [price, size]
          items:
            type: string
            format: decimal
      example:
        time: {}
        product: BTC-USD
        bids:
          - - '7090.96'
            - '1.253433'
        asks:
          - - '7090.97'
            - '25.23881'
    LightningBackupResponse:
      type: object
      properties:
        chanPoints:
          type: array
          items:
            $ref: '#/components/schemas/LightningChanPoints'
          description: List of channel points
        multiChanBackup:
          type: string
          description: Multi-channel backup
    LightningChanPoints:
      type: object
      properties:
        fundingTxid:
          type: string
          description: Funding transaction ID
        outputIndex:
          type: integer
          description: Output index
    LightningCoin:
      title: Coin
      description: A lightning coin name.
      type: string
      example: lnbtc
    LightningCoinWallet:
      title: Lightning Coin Wallet
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
      required:
        - keys
    LightningInvoice:
      title: LightningInvoice
      type: object
      properties:
        memo:
          type: string
          description: A memo or description for the invoice
          example: Payment for the coffee
        amtPaidMsat:
          type: string
          description: The number of millisats actually paid to this invoice, this may be greater than the amount requested by the invoice, since lightning allows overpaying (but not underpaying) invoices.
          format: number
        invoice:
          type: string
          description: The BOLT \#11 encoded invoice
          example: lnbc500n1p3zv5vkpp5x0thcaz8wep54clc2xt5895azjdzmthyskzzh9yslggy74qtvl6sdpdg3hkuct5d9hkugrxdaezqjn0dphk2fmnypkk2mtsdahkccqzpgxqyz5vqsp5v80q4vq4pwakq2l0hcqgtelgajsymv4ud4jdcrqtnzhvet55qlus9qyyssquqh2wl2m866qs5n72c5vg6wmqx9vzwhs5ypualq4mcu76h2tdkcq3jtjwtggfff7xwtdqxlnwqk8cxpzryjghrmmq3syraswp9vjr7cqry9l96
        paymentHash:
          type: string
          description: The payment hash of the invoice
          example: 63d9ce82e09d16761a85116ed8b65407db4fb22f85d03573de09c480f2c6d175
        valueMsat:
          type: string
          description: The value of the invoice in satoshis
          example: '50000'
          format: number
        expiresAt:
          type: string
          description: ISO-8601 string representing when the invoice will expire
          example: '2022-04-01T18:46:24.677Z'
          format: date-time
          title: ISO Date String
        status:
          type: string
          enum:
            - open
            - settled
            - canceled
          description: The status of the invoice
        walletId:
          allOf:
            - $ref: '#/components/schemas/WalletIdString'
          description: The wallet to which this invoice belongs
        createdAt:
          type: string
          description: ISO-8601 string representing when the invoice was created
          example: '2022-04-01T18:46:24.677Z'
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: ISO-8601 string representing when the invoice was updated
          example: '2022-04-01T18:46:24.677Z'
          format: date-time
          title: ISO Date String
      required:
        - invoice
        - paymentHash
        - valueMsat
        - expiresAt
        - status
        - walletId
        - createdAt
        - updatedAt
    LightningOnchainRequest:
      title: LightningOnchainRequest
      type: object
      properties:
        recipients:
          type: array
          items:
            type: object
            properties:
              amountSat:
                type: string
                format: number
              address:
                type: string
            required:
              - amountSat
              - address
        satsPerVbyte:
          type: string
          format: number
      required:
        - recipients
    LightningPaymentFailureReason:
      type: string
      enum:
        - TIMEOUT
        - NO_ROUTE
        - ERROR
        - INCORRECT_PAYMENT_DETAILS
        - INSUFFICIENT_BALANCE
        - INSUFFICIENT_WALLET_BALANCE
        - EXCESS_WALLET_BALANCE
        - INVOICE_EXPIRED
        - CANCELED
      description: |
        Reason for payment failure:
        * TIMEOUT - Payment timed out
        * NO_ROUTE - No route found
        * ERROR - Non-recoverable error
        * INCORRECT_PAYMENT_DETAILS - Payment details are incorrect
        * INSUFFICIENT_BALANCE - Insufficient channel outbound capacity
        * INSUFFICIENT_WALLET_BALANCE - Insufficient custodial lightning balance
        * EXCESS_WALLET_BALANCE - Excess custodial lightning balance
        * INVOICE_EXPIRED - Invoice has expired
        * CANCELED - Payment was canceled
    LightningPaymentIntent:
      title: Lightning Payment Intent
      oneOf:
        - allOf:
            - type: object
              properties:
                intentType:
                  type: string
                  enum:
                    - payment
              required:
                - intentType
            - $ref: '#/components/schemas/BaseIntent'
            - $ref: '#/components/schemas/LightningPaymentRequestWithSig'
        - allOf:
            - type: object
              properties:
                intentType:
                  type: string
                  enum:
                    - payment
                onchainRequest:
                  $ref: '#/components/schemas/LightningOnchainRequest'
              required:
                - intentType
                - onchainRequest
            - $ref: '#/components/schemas/BaseIntent'
    LightningPaymentRequest:
      title: LightningPaymentRequest
      type: object
      properties:
        invoice:
          type: string
        amountMsat:
          type: string
          format: number
        feeLimitMsat:
          type: string
          format: number
        feeLimitRatio:
          type: number
      required:
        - invoice
    LightningPaymentRequestWithSig:
      title: LightningPaymentRequestWithSig
      type: object
      properties:
        signedRequest:
          $ref: '#/components/schemas/LightningPaymentRequest'
        signature:
          type: string
      required:
        - signedRequest
        - signature
    LightningWalletAddress:
      title: LightningWalletAddress
      allOf:
        - type: object
          properties:
            coin:
              $ref: '#/components/schemas/CoinString'
            wallet:
              type: string
          required:
            - coin
            - wallet
        - $ref: '#/components/schemas/BaseWalletAddress'
    LimitRuleCondition:
      title: LimitRuleCondition
      type: object
      properties:
        amountString:
          type: string
          example: '2000000'
          pattern: ^-?\d+$
        timeWindow:
          type: number
          description: Time window in seconds for a velocity limit, between 1 and 30 days
          minimum: 0
          maximum: 2678400
        groupTags:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date-time
          title: ISO Date String
      required:
        - amountString
        - timeWindow
    ListAuditLogsResponse:
      title: ListAuditLogsResponse
      type: object
      properties:
        logs:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              type:
                $ref: '#/components/schemas/AuditLogType1'
              ip:
                type: string
                description: The client IP that caused the AuditLog entry to be written
                example: 127.0.0.1
                format: ipv4
              user:
                type: string
                description: The user that caused the AuditLog entry to be written
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              requestId:
                type: string
              walletId:
                $ref: '#/components/schemas/WalletIdString'
              enterpriseId:
                $ref: '#/components/schemas/EnterpriseIdString'
              organizationId:
                $ref: '#/components/schemas/OrganizationIdString'
              coin:
                $ref: '#/components/schemas/CoinString'
              data: {}
              date:
                type: string
                format: date-time
                title: ISO Date String
            required:
              - id
              - type
            description: The audit logs
        coin:
          $ref: '#/components/schemas/CoinString'
        nextBatchPrevId:
          type: string
          description: When a result set is truncated, this field returns the id of the last object in the previous batch. To get the next batch of results, pass this value via the 'prevId' query parameter.
          example: 59cd72485007a239fb00282ed480da1f
      required:
        - logs
    ListEnterpriseWebhooksResponse:
      title: ListEnterpriseWebhooksResponse
      type: object
      properties:
        webhooks:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              created:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              coin:
                type: string
                description: A cryptocurrency or token ticker symbol.
                example: btc
              url:
                type: string
                example: https://your.server.com/webhook
                format: uri
              version:
                type: number
                description: 2 for coins running on API v2.
                example: 2
              scope:
                $ref: '#/components/schemas/WebhookScope'
              state:
                $ref: '#/components/schemas/WebhookState'
              successiveFailedAttempts:
                type: number
                example: 0
              listenToFailureStates:
                type: boolean
                description: Whether or not to listen to failed transactions on chain.
              label:
                type: string
                description: Label of the new webhook.
              walletId:
                type: string
              enterpriseId:
                type: string
              organizationId:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              userId:
                type: string
              type:
                allOf:
                  - $ref: '#/components/schemas/WebhookType'
                description: Event type to listen to.
              numConfirmations:
                type: number
                example: 6
              lastAttempt:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              failingSince:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              allToken:
                type: boolean
              txRequestStates:
                type: array
                items:
                  type: string
                  enum:
                    - pendingApproval
                    - canceled
                    - rejected
                    - initialized
                    - pendingDelivery
                    - delivered
                    - pendingUserSignature
                    - pendingUserCommitment
                    - pendingUserRShare
                    - pendingUserGShare
                    - readyToSend
                    - signed
                    - failed
                  description: If present, only transaction request state changes from the list will trigger notifications. If not present, all transaction request state changes will trigger notifications.
              txRequestTransactionStates:
                type: array
                items:
                  type: string
                  enum:
                    - initialized
                    - pendingSignature
                    - eddsaPendingCommitment
                    - eddsaPendingRShare
                    - eddsaPendingGShare
                    - ecdsaMPCv2Round1
                    - ecdsaMPCv2Round2
                    - ecdsaMPCv2Round3
                    - readyToCombineShares
                    - signed
                    - held
                    - delivered
                    - invalidSignature
                    - rejected
                  description: If present, only transaction request transaction state changes from the list will trigger notifications. If not present, all transaction request transaction state changes will trigger notifications.
            required:
              - id
              - created
              - coin
              - url
              - version
              - scope
              - state
              - successiveFailedAttempts
              - listenToFailureStates
        nextBatchPrevId:
          type: string
      required:
        - webhooks
    ListOrganizationWebhookResponseC:
      title: ListOrganizationWebhookResponseC
      type: object
      properties:
        webhooks:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              created:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              coin:
                type: string
                description: A cryptocurrency or token ticker symbol.
                example: btc
              url:
                type: string
                example: https://your.server.com/webhook
                format: uri
              version:
                type: number
                description: 2 for coins running on API v2.
                example: 2
              scope:
                $ref: '#/components/schemas/WebhookScope'
              state:
                $ref: '#/components/schemas/WebhookState'
              successiveFailedAttempts:
                type: number
                example: 0
              listenToFailureStates:
                type: boolean
                description: Whether or not to listen to failed transactions on chain.
              label:
                type: string
                description: Label of the new webhook.
              walletId:
                type: string
              enterpriseId:
                type: string
              organizationId:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              userId:
                type: string
              type:
                allOf:
                  - $ref: '#/components/schemas/WebhookType'
                description: Event type to listen to.
              numConfirmations:
                type: number
                example: 6
              lastAttempt:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              failingSince:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              allToken:
                type: boolean
              txRequestStates:
                type: array
                items:
                  type: string
                  enum:
                    - pendingApproval
                    - canceled
                    - rejected
                    - initialized
                    - pendingDelivery
                    - delivered
                    - pendingUserSignature
                    - pendingUserCommitment
                    - pendingUserRShare
                    - pendingUserGShare
                    - readyToSend
                    - signed
                    - failed
                  description: If present, only transaction request state changes from the list will trigger notifications. If not present, all transaction request state changes will trigger notifications.
              txRequestTransactionStates:
                type: array
                items:
                  type: string
                  enum:
                    - initialized
                    - pendingSignature
                    - eddsaPendingCommitment
                    - eddsaPendingRShare
                    - eddsaPendingGShare
                    - ecdsaMPCv2Round1
                    - ecdsaMPCv2Round2
                    - ecdsaMPCv2Round3
                    - readyToCombineShares
                    - signed
                    - held
                    - delivered
                    - invalidSignature
                    - rejected
                  description: If present, only transaction request transaction state changes from the list will trigger notifications. If not present, all transaction request transaction state changes will trigger notifications.
            required:
              - id
              - created
              - coin
              - url
              - version
              - scope
              - state
              - successiveFailedAttempts
              - listenToFailureStates
        nextBatchPrevId:
          type: string
      required:
        - webhooks
    ListPendingApprovalsCountByEnterpriseResponse:
      title: ListPendingApprovalsCountByEnterpriseResponse
      type: object
      properties:
        enterprises:
          $ref: '#/components/schemas/PendingApprovalsCountSchema'
        organizations:
          type: object
          additionalProperties:
            type: object
            properties:
              pendingApprovalsCount:
                type: number
                description: The number of pending approvals
            required:
              - pendingApprovalsCount
      required:
        - enterprises
    ListReportsJSON:
      title: ListReportsJSON
      type: object
      properties:
        reports:
          type: array
          items:
            allOf:
              - type: object
                properties: {}
              - $ref: '#/components/schemas/ReportParams'
              - $ref: '#/components/schemas/GenericReportParamsJSON'
        nextBatchPrevId:
          type: string
          minLength: 1
      required:
        - reports
    ListRuleEntryType:
      type: string
      enum:
        - address
        - walletId
        - enterpriseId
      description: the kind of resource a list rule entry refers to
    ListTxRequestAwaitingSignatureForWalletResponse:
      title: ListTxRequestAwaitingSignatureForWalletResponse
      type: object
      properties:
        txRequests:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        state:
                          $ref: '#/components/schemas/TransactionState'
                        unsignedTx:
                          $ref: '#/components/schemas/UnsignedTransaction'
                        signatureShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  privateShareProof:
                                    type: string
                                    description: The private share proof
                                  publicShare:
                                    type: string
                                    description: The public share
                                  vssProof:
                                    type: string
                                    description: The VSS proof of the signature share
                              - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                        commitmentShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - commitment
                                    description: The type of the commitment share
                                required:
                                  - type
                              - $ref: '#/components/schemas/BaseShare'
                        txHash:
                          type: string
                        updatedDate:
                          type: string
                          format: date-time
                          title: ISO Date String
                        createdDate:
                          type: string
                          format: date-time
                          title: ISO Date String
                      required:
                        - state
                        - unsignedTx
                      description: The transactions associated with the transaction request
                  messages:
                    type: array
                    items:
                      type: object
                      description: The messages associated with the transaction request
                      properties:
                        state:
                          allOf:
                            - $ref: '#/components/schemas/TransactionState'
                          description: The current state of the message
                        signatureShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  privateShareProof:
                                    type: string
                                    description: The private share proof
                                  publicShare:
                                    type: string
                                    description: The public share
                                  vssProof:
                                    type: string
                                    description: The VSS proof of the signature share
                              - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                            description: Signature shares for the message
                        privateSignatureShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  privateShareProof:
                                    type: string
                                    description: The private share proof
                                  publicShare:
                                    type: string
                                    description: The public share
                                  vssProof:
                                    type: string
                                    description: The VSS proof of the signature share
                              - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                            description: Private signature shares for the message
                        commitmentShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - commitment
                                    description: The type of the commitment share
                                required:
                                  - type
                              - $ref: '#/components/schemas/BaseShare'
                            description: Commitment shares for the message (used for EdDSA)
                        encryptedShares:
                          type: array
                          items:
                            allOf:
                              - type: object
                                properties:
                                  type:
                                    $ref: '#/components/schemas/ShareType'
                                required:
                                  - type
                              - $ref: '#/components/schemas/BaseShare'
                            description: Encrypted shares for the message
                        txHash:
                          type: string
                          description: Transaction hash
                        updatedDate:
                          type: string
                          description: Date when the message was last updated
                          format: date-time
                          title: ISO Date String
                        createdDate:
                          type: string
                          description: Date when the message was created
                          format: date-time
                          title: ISO Date String
                        messageRaw:
                          type: string
                          description: The raw message to be signed
                        messageEncoded:
                          type: string
                          description: The encoded message
                        messageBroadcastable:
                          type: string
                          description: The broadcastable message
                        messageStandardType:
                          type: string
                          description: The encoded message
                        derivationPath:
                          type: string
                          description: Derivation path for the message
                        combineSigShare:
                          type: string
                          description: Combined signature share
                        coin:
                          type: string
                          description: Coin type for the message
                        bitgoPaillierChallenge: {}
                        encryptedChallenge:
                          type: string
                          description: BitGo's encrypted challenge for ECDSA with Range Proofs
                      required:
                        - state
                        - messageRaw
              - $ref: '#/components/schemas/TransactionRequestBase'
        bitgoRangeProofChallenge:
          allOf:
            - type: object
              properties:
                ntildeProof:
                  $ref: '#/components/schemas/NtildeProof'
              required:
                - ntildeProof
            - $ref: '#/components/schemas/Challenge'
        totalCount:
          type: number
        nextBatchPrevId:
          type: string
          description: When a result set is truncated, this field returns the id of the last object in the previous batch. To get the next batch of results, pass this value via the "prevId" query parameter.
          example: 585951a5df8380e0e3063e9f
          format: uuid
      required:
        - txRequests
    ListWalletShareRequestResponse:
      title: ListWalletShareRequestResponse
      type: object
      properties:
        walletShareRequests:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              walletId:
                $ref: '#/components/schemas/WalletIdString'
              walletLabel:
                type: string
              coin:
                type: string
              userId:
                type: string
              userEmail:
                type: string
              userFullName:
                type: string
              permissions:
                type: array
                items:
                  type: string
                  enum:
                    - spend
              created:
                type: string
                format: date-time
                title: ISO Date String
            required:
              - id
              - walletId
              - walletLabel
              - coin
              - userId
              - userEmail
              - userFullName
              - permissions
              - created
      required:
        - walletShareRequests
    ListWalletSharesCountByEnterpriseResponse:
      title: ListWalletSharesCountByEnterpriseResponse
      type: object
      properties:
        enterprises:
          $ref: '#/components/schemas/WalletSharesCountSchema'
      required:
        - enterprises
    ListWalletSharesResponse:
      type: object
      properties:
        incoming:
          type: array
          items:
            $ref: '#/components/schemas/WalletShare1'
        outgoing:
          type: array
          items:
            $ref: '#/components/schemas/WalletShare1'
    LivenessVerificationFromEnterpriseAdminActionRequest:
      title: Liveness Verification From Enterprise Admins
      type: object
      description: Require liveness verification from enterprise admins.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.bitgo.livenessVerificationFromEnterpriseAdmins
          example: approvals.bitgo.livenessVerificationFromEnterpriseAdmins
        parameters:
          type: object
          description: Required data needed to configure the Action.
          required:
            - minRequired
          properties:
            minRequired:
              type: number
              description: Minimum required number of approvers
              example: 1
            initiatorIsAllowedToApprove:
              type: boolean
              description: Whether the initiator is allowed to approve this action. false by default.
              example: false
              default: false
        operator:
          $ref: '#/components/schemas/OperatorType'
    LivenessVerificationFromEnterpriseUsersActionRequest:
      title: Liveness Verification From Specific Users
      type: object
      description: Require liveness verification from specific users.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.bitgo.livenessVerificationFromUsers
          example: approvals.bitgo.livenessVerificationFromUsers
        parameters:
          type: object
          description: Required data needed to configure the Action.
          required:
            - userIds
            - minRequired
          properties:
            userIds:
              type: array
              items:
                type: string
                example: 63cf101298470200073bbae71add80d5
              description: List of enterprise users for approval
              example:
                - 63cf101298470200073bbae71add80d5
            minRequired:
              type: number
              description: Minimum required number of approvers
              example: 1
            initiatorIsAllowedToApprove:
              type: boolean
              description: Whether the initiator is allowed to approve this action. false by default.
              example: false
              default: false
        operator:
          $ref: '#/components/schemas/OperatorType'
    LivenessVerificationFromRequestorActionRequest:
      title: Liveness Verification From Requestor
      type: object
      description: Require liveness verification from the requestor.
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.bitgo.livenessVerificationFromRequestor
          example: approvals.bitgo.livenessVerificationFromRequestor
        parameters:
          type: object
          description: Required data needed to configure the Action.
          properties:
            minRequired:
              type: number
              description: Minimum required number of approvers
              example: 1
            initiatorIsAllowedToApprove:
              type: boolean
              description: Whether the initiator is allowed to approve this action. false by default.
              example: false
              default: false
        operator:
          $ref: '#/components/schemas/OperatorType'
    LivenessVerificationParameter:
      title: LivenessVerificationParameter
      type: string
      enum:
        - transactionInitiator
        - walletAdmins
        - videoIdUsers
    LockedSession:
      type: object
      properties:
        created:
          type: string
          format: date-time
        expires:
          type: string
          format: date-time
        id:
          $ref: '#/components/schemas/Id'
        ip:
          allOf:
            - $ref: '#/components/schemas/Ip'
          description: IP address of the client that requested this access token
        ipRestrict:
          type: array
          items:
            type: string
            format: ipv4
          description: IP addresses of clients that are allowed to use this token
        origin:
          type: string
          example: test.bitgo.com
          description: BitGo environment that issued this token.  The token is only valid in this environment.
        scope:
          allOf:
            - $ref: '#/components/schemas/Scope'
          description: Session permissions
        user:
          $ref: '#/components/schemas/Id'
      required:
        - created
        - expires
        - id
        - origin
        - scope
        - user
    LoginResponse:
      title: LoginResponse
      type: object
      properties:
        access_token:
          type: string
          example: 9b72c68ef394f5146f0f3efc1feafb7a971752cb00e79fafcfd8c1d2db83639c
        derivationPath:
          type: string
        encryptedECDHXprv:
          type: string
        encryptedToken:
          type: string
        expires_at:
          type: number
          description: Unix timestamp
          example: 1534201288
        expires_in:
          type: number
        noECDHKeychain:
          type: boolean
        scope:
          type: array
          example:
            - crypto_compare
            - user_manage
            - openid
            - profile
            - wallet_create
            - wallet_manage_all
            - wallet_approve_all
            - wallet_spend_all
            - wallet_edit_all
            - wallet_view_all
          items:
            type: string
        token_type:
          type: string
        grant_type:
          allOf:
            - $ref: '#/components/schemas/GrantTypes'
          description: Represents the login method that was used
        user:
          $ref: '#/components/schemas/User2'
        warning:
          type: string
      required:
        - expires_at
        - expires_in
        - scope
        - token_type
        - grant_type
        - user
    LowerProof:
      title: LowerProof
      type: object
      properties:
        Proof:
          type: string
        VerificationKey:
          type: string
        MerkleRoot:
          type: string
        MerkleRootWithAssetSumHash:
          type: string
        MerklePath:
          type: array
          items:
            type: string
        MerklePosition:
          type: number
      required:
        - Proof
        - VerificationKey
        - MerkleRoot
        - MerkleRootWithAssetSumHash
        - MerklePath
        - MerklePosition
    MarginNetOpenPosition:
      type: object
      required:
        - currency
        - enterpriseId
        - netOpenPosition
        - netOpenPositionValue
        - shortMarginPositionNotionalLimit
        - longMarginPositionNotionalLimit
        - unrealizedPnL
        - lastModified
      properties:
        currency:
          type: string
          description: Symbol of the instrument (ex. BTC)
        enterpriseId:
          type: string
          format: uuid
          description: Enterprise ID for the margin NOP limit
        netOpenPosition:
          type: number
          format: decimal
          description: Number representing the current net open position for the NOP instrument in question (ex. -10 BTC). Negative means a short position and positive means a long position.
        netOpenPositionValue:
          type: number
          format: decimal
          description: Number representing the net open position denoted in notional amount (ex 600,000 USD)
        shortMarginPositionNotionalLimit:
          allOf:
            - $ref: '#/components/schemas/Amount3'
            - type: object
              description: Number representing the maximum open margin position that can be short in terms of the notional instrument (ex. 10,000 USD) in absolute notional terms, as the NOP is signed
        longMarginPositionNotionalLimit:
          allOf:
            - $ref: '#/components/schemas/Amount3'
            - type: object
              description: Number representing the maximum open margin position that can be long in terms of the notional instrument (ex. 10,000 USD)
        unrealizedPnL:
          allOf:
            - $ref: '#/components/schemas/Amount3'
            - type: object
              description: Number representing the unrealized profit and loss. Difference between the NOP value at the time of creation and the NOP value as of now.
        lastModified:
          type: string
          format: date-time
          description: ISO format datetime for date and time the record was last updated in the database
      example:
        currency: BTC
        enterpriseId: 63925f940c259a00061853808ffea830
        netOpenPosition: -2.3242
        netOpenPositionValue: -124017.22
        shortMarginPositionNotionalLimit:
          quantity: 1000000
          currency: USD
        longMarginPositionNotionalLimit:
          quantity: 1000000
          currency: USD
        unrealizedPnL:
          quantity: 1200
          currency: USD
        lastModified: '2024-07-29T21:13:09.000Z'
    MarginNetOpenPositionLimit:
      type: object
      required:
        - enterpriseId
        - currency
        - shortMarginPositionNotionalLimit
        - longMarginPositionNotionalLimit
      properties:
        enterpriseId:
          type: string
          description: The unique identifier for the enterprise (e.g., "enterprise-123").
        currency:
          type: string
          description: The currency symbol for the net open position limit (e.g., "BTC").
        shortMarginPositionNotionalLimit:
          allOf:
            - $ref: '#/components/schemas/Amount3'
            - type: object
              description: Quantity representing the notional limit for short margin positions in the specified currency (e.g., "1000000"). Currency represents the currency in which the quantity is valued (e.g., "BTC").
        longMarginPositionNotionalLimit:
          allOf:
            - $ref: '#/components/schemas/Amount3'
            - type: object
              description: Quantity representing the notional limit for long margin positions in the specified currency (e.g., "2000000"). Currency represents the currency in which the quantity is valued (e.g., "BTC").
      example:
        enterpriseId: enterprise-123
        currency: BTC
        shortMarginPositionNotionalLimit:
          quantity: '1000000'
          currency: USD
        longMarginPositionNotionalLimit:
          quantity: '2000000'
          currency: USD
    MarketDataError:
      type: object
      description: Market Data Error
      properties:
        error:
          type: string
        errorName:
          type: string
      required:
        - error
        - errorName
      example:
        errorName: backend:common:invalidArgument
        error: backend:common:invalidArgument key=instrument
    MaskedV1SettlementTransfersOutput:
      title: MaskedV1SettlementTransfersOutput
      type: array
      items:
        type: object
        properties:
          sourceTradingAccountId:
            type: string
            description: The go account id of the source party.
            minLength: 1
          sourceNetworkAccountId:
            type: string
            description: The network account id of the source party.
            title: uuid
          destinationTradingAccountId:
            type: string
            description: The go account id of the destination party.
            minLength: 1
          destinationNetworkAccountId:
            type: string
            description: The network account id of the destination party (if the destination party is a connection).
            title: uuid
          currency:
            type: string
            description: The currency involved in the settlement movement.
            minLength: 1
          quantity:
            allOf:
              - $ref: '#/components/schemas/NonZeroBigAmount'
            description: The amount of currency being transferred in the settlement transfer. This is a non-zero value represented as a string. If the value is positive, that means funds were moved from the source account to the destination account. If the value is negative, that means funds were moved from the destination account to the source account.
          txIds:
            type: array
            items:
              type: string
              minLength: 1
              description: The transaction IDs associated with the settlement transfer. Only populated once the transfer is completed.
          status:
            allOf:
              - $ref: '#/components/schemas/SettlementTransferStatus'
            description: 'The status of the settlement transfer. Possible values and implications are: - pending: The transfer is pending and has not yet been processed. - pending_onchain: The transfer is pending on-chain movement (only relevant to on-chain settlements). - onchain_initiated: The transfer has been initiated on-chain (only relevant to on-chain settlements). - onchain_failed: The on-chain transfer has failed (only relevant to on-chain settlements). - completed: The transfer has been completed successfully. - failed: The transfer has failed. - rejected: The transfer has been rejected. - disputed: The transfer is disputed.'
          usdValue:
            nullable: true
            oneOf:
              - type: string
                format: number
              - type: number
            description: The USD value of the settlement transfer in cents. This is a non-negative value represented as a string.
          settlementId:
            type: string
            description: The unique identifier of the settlement the settlement transfer is associated with. This is a UUID that uniquely identifies the settlement.
            title: uuid
          disputeClosureId:
            type: string
            description: The unique identifier of the dispute closure the settlement transfer was created from. This is a UUID that uniquely identifies dispute closure if the transfer was created as a result of closing a dispute.
            title: uuid
          id:
            type: string
            description: The unique identifier of the settlement transfer. This is a UUID that uniquely identifies the settlement transfer record.
            title: uuid
          createdAt:
            type: string
            description: The date and time when the settlement transfer was created. Represented as an ISO 8601 formatted date string.
            format: date-time
            title: ISO Date String
          updatedAt:
            type: string
            description: The date and time when the settlement transfer was last updated. Represented as an ISO 8601 formatted date string.
            format: date-time
            title: ISO Date String
          settlementStatus:
            allOf:
              - $ref: '#/components/schemas/SettlementStatuses'
            description: 'The status of the settlement the settlement transfer is associated with. Possible values and implications are: - pending: The settlement is pending and has not yet been processed. - failed: The settlement has failed to process. This is a non-terminal state and should be retried. - completed: The settlement has been completed successfully. - rejected: The settlement has been rejected by a BitGo admin (only relevant to on-chain settlements).'
          settlementNotes:
            type: string
            description: Optional notes for the settlement
            minLength: 1
          sourceClientName:
            type: string
            description: The client name of the source party. Will be obfuscated if the source party is not the calling client.
            minLength: 1
          destinationClientName:
            type: string
            description: The client name of the destination party. Will be obfuscated if the destination party is not the calling client.
            minLength: 1
          sourceConnectionName:
            type: string
            description: The name of the source connection (if the source party is a connection). Will be obfuscated if the source party is not the calling client.
            minLength: 1
          destinationConnectionName:
            type: string
            description: The name of the destination connection (if the destination party is a connection). Will be obfuscated if the destination party is not the calling client.
            minLength: 1
        required:
          - currency
          - quantity
          - txIds
          - status
          - usdValue
          - settlementId
          - id
          - createdAt
          - updatedAt
          - settlementStatus
    MaticStakingDelegation:
      title: MATIC
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
      properties:
        unstakeable:
          description: True if unable to unstake.
          type: boolean
    MaticStakingRequest:
      title: MATIC
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        gasPrice:
          type: string
          description: User overridden gas price to apply for the generated transactions for this request. GasPrice is in base units.
        delegations:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/MaticStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/MaticStakingTransaction'
        amount:
          description: Amount to stake in base units (i.e. Wei for MATIC)
          type: string
    MaticStakingRequestPOSTBody:
      title: MATIC stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        gasPrice:
          type: string
          description: User overridden gas price to apply for the generated transactions for this request. GasPrice is in base units.
    MaticStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
      properties:
        gasPrice:
          description: The gas limit in base units.
          type: string
    MaticUnStakingRequestPOSTBody:
      title: MATIC unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        gasPrice:
          type: string
          description: User overridden gas price to apply for the generated transactions for this request.  GasPrice is in base units.
    MemoObject:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
      description: |
        Extra transaction information for CSPR, EOS, HBAR, RUNE, STX, TON, XLM, and XRP. Required for XLM transactions.

        Note: For XRP this is the destination tag (DT). For CSPR this is the transfer ID.
    MemoString:
      type: string
      maxLength: 100
      description: A memo for this specific transaction. This format is only available for Stacks.
    Message:
      type: object
      properties:
        coin:
          type: string
          description: The coin associated with the wallet.
        combineSigShare:
          type: string
        createdDate:
          description: The date the message was created.
          type: string
          format: date-time
        messageEncoded:
          description: The message encoded as a hex string.
          type: string
        messageRaw:
          description: The message as human readable text.
          type: string
        signatureShares:
          type: array
          items:
            $ref: '#/components/schemas/PlatformSignatureShare'
        state:
          $ref: '#/components/schemas/PlatformTransactionRequestState'
        txHash:
          type: string
          description: The signed hex of the message.
        updatedDate:
          description: The date when the message state was updated.
          type: string
          format: date-time
      required:
        - messageRaw
        - state
    Message1:
      type: object
      properties:
        coin:
          type: string
          description: The coin associated with the wallet.
        combineSigShare:
          type: string
        createdDate:
          description: The date the message was created.
          type: string
          format: date-time
        messageEncoded:
          description: The message encoded as a hex string.
          type: string
        messageRaw:
          description: The message as human readable text.
          type: string
        signatureShares:
          type: array
          items:
            $ref: '#/components/schemas/SignatureShare'
        state:
          $ref: '#/components/schemas/TransactionRequestState1'
        txHash:
          type: string
          description: The signed hex of the message.
        updatedDate:
          description: The date when the message state was updated.
          type: string
          format: date-time
      required:
        - messageRaw
        - state
    MessageIntent:
      title: MessageIntent
      type: object
      properties:
        messageRaw:
          type: string
        intentType:
          $ref: '#/components/schemas/IntentType'
        custodianMessageId:
          type: string
        isTss:
          type: boolean
        messageStandardType:
          type: string
      required:
        - messageRaw
        - intentType
    MinRequireActionParameter:
      title: Minimum number of approvals required
      type: object
      description: Minimum required number of approvers.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the action parameter.
          enum:
            - minRequired
          example: minRequired
        label:
          type: string
          description: A label for the action parameter which can be shown to an end user.
          example: Approvals Required
        description:
          type: string
          description: A description for the action parameter which can be shown to an end user.
          example: Minimum required number of approvers
        type:
          type: string
          description: The type of acceptable values for this action parameter.
          enum:
            - POSITIVE_NUMBER
          example: POSITIVE_NUMBER
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: false
    MmiSignMessageIntent:
      title: MMI Sign Message Intent
      allOf:
        - type: object
          properties:
            custodianMessageId:
              type: string
          required:
            - custodianMessageId
        - $ref: '#/components/schemas/SignMessageIntent'
    MmiSignTransactionIntent:
      title: MMI Sign Transaction Intent
      allOf:
        - type: object
          properties:
            custodianTransactionId:
              type: string
          required:
            - custodianTransactionId
        - $ref: '#/components/schemas/PaymentIntent'
    MultiSigType:
      title: MultiSigType
      type: string
      enum:
        - onchain
        - tss
        - blsdkg
    MultisigTypeVersion:
      title: MultisigTypeVersion
      type: string
      enum:
        - MPCv2
    MultisigTypeVersion1:
      type: string
      enum:
        - MPCv2
    MutabilityConstraint:
      title: MutabilityConstraint
      type: string
      enum:
        - permanent
        - managed
    MutabilityConstraint1:
      type: string
      description: |
        Specifies whether a BitGo admin can change `lockDate`
        * `managed` - Not locked, but requires approval from a BitGo admin to change
        * `permanent` - `lockDate` cannot be changed
      enum:
        - managed
        - permanent
    Name:
      type: object
      properties:
        first:
          type: string
          example: Jane
        full:
          type: string
          example: Jane Doe
        last:
          type: string
          example: Doe
    Name1:
      title: Name
      type: object
      properties:
        first:
          type: string
          example: Jane
        full:
          type: string
          example: Jane Doe
        last:
          type: string
          example: Doe
      required:
        - first
        - full
        - last
    NearStakeIntent:
      title: Near Stake Intent
      allOf:
        - type: object
          properties:
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - recipients
        - $ref: '#/components/schemas/StakeIntent'
    NearStakeIntent1:
      title: Near Stake
      allOf:
        - $ref: '#/components/schemas/StakeIntent2'
        - type: object
          properties:
            recipients:
              type: array
              items:
                $ref: '#/components/schemas/RecipientEntry1'
          required:
            - recipients
    NearStakingDelegation:
      title: NEAR
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    NearStakingRequest:
      title: NEAR
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/NearStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/NearStakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
    NearStakingRequestPOSTBody:
      title: NEAR stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '12000000000000000000'
    NearStakingRequestWithTransactions:
      title: NEAR
      allOf:
        - $ref: '#/components/schemas/NearStakingRequest'
        - type: object
          properties:
            transactions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/NearStakingTransaction'
    NearStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
    NearUnStakingRequestPOSTBody:
      title: NEAR unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '12000000000000000000'
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
      required:
        - amount
        - type
    NearUnstakeIntent:
      title: Near Unstake Intent
      allOf:
        - type: object
          properties:
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - recipients
        - $ref: '#/components/schemas/UnstakeIntent'
    NearUnstakeIntent1:
      title: Near Unstake
      allOf:
        - $ref: '#/components/schemas/UnstakeIntent2'
        - type: object
          properties:
            recipients:
              type: array
              items:
                $ref: '#/components/schemas/RecipientEntry1'
          required:
            - recipients
    NearWallet:
      title: Near Wallet
      type: object
      properties:
        nonceAddress:
          type: string
        lastNonce:
          type: number
        addressCount:
          type: number
        pendingChainInitialization:
          type: boolean
        rootAddrss:
          type: string
        lastChainIndex:
          type: object
          additionalProperties:
            type: number
      required:
        - nonceAddress
        - lastNonce
        - addressCount
        - pendingChainInitialization
    NearWithdrawIntent:
      title: Near Withdraw Intent
      allOf:
        - type: object
          properties:
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - recipients
        - $ref: '#/components/schemas/WithdrawIntent'
    NearWithdrawIntent1:
      title: Near Claim Unstake
      allOf:
        - $ref: '#/components/schemas/WithdrawIntent2'
        - type: object
          properties:
            recipients:
              type: array
              items:
                $ref: '#/components/schemas/RecipientEntry1'
          required:
            - recipients
    NetworkAccountBalanceRecordForClient:
      title: NetworkAccountBalanceRecordForClient
      type: object
      additionalProperties:
        type: object
        description: Network account balance information formatted for client consumption. Contains details about a partner connection and associated balances.
        properties:
          partnerId:
            type: string
            description: Unique identifier of the partner associated with this connection. This UUID uniquely identifies the OES partner within the BitGo system.
            title: uuid
          partnersConnectionId:
            type: string
            description: External identifier of the connection as known by the partner system. This is the identifier that the partner uses to reference this connection.
            minLength: 1
          name:
            type: string
            description: Human-readable name of the connection. This is typically set during connection creation to help identify the connection.
            minLength: 1
          balances:
            allOf:
              - $ref: '#/components/schemas/AccountBalanceRecord'
            description: Balances available for this connection, indexed by currency code. Represents the funds that have been allocated to this connection and their status.
          partnerInstitutionIdentifier:
            type: string
            description: Optional institution identifier of the partner. When present, provides an additional identifier that may be useful for integration with external systems or regulatory reporting.
            minLength: 1
        required:
          - partnerId
          - partnersConnectionId
          - name
          - balances
    NewLimitOrderRequest:
      title: Limit
      required:
        - product
        - quantity
        - quantityCurrency
        - side
        - type
        - limitPrice
      type: object
      properties:
        clientOrderId:
          type: string
          description: Custom order ID. This must be a unique ID associated with an order and cannot be the same across multiple requests.
          maxLength: 256
        product:
          type: string
          description: Product name e.g. BTC-USD
        type:
          type: string
          description: Must be set to "limit"
        fundingType:
          $ref: '#/components/schemas/FundingType'
        side:
          $ref: '#/components/schemas/Side'
        quantity:
          type: string
          format: decimal
        quantityCurrency:
          type: string
          description: The quantity currency must be in the base currency for both buy and sell. e.g. If product is BTC-USD, the base currency will be BTC.
        limitPrice:
          type: string
          format: decimal
        duration:
          type: integer
          description: Duration of the limit order in minutes. For orders that are good till cancelled, skip duration and use timeInForce=GTC.
        timeInForce:
          type: string
          description: Time in force for the order. GTC (Good Till Cancelled) is the only allowed value.
          enum:
            - GTC
      example:
        clientOrderId: myorder1
        type: limit
        product: BTC-USD
        side: buy
        quantity: '1'
        quantityCurrency: BTC
        limitPrice: '10005'
        duration: 60
    NewMarketOrderRequest:
      title: Market
      required:
        - product
        - quantity
        - quantityCurrency
        - side
        - type
        - fundingType
      type: object
      properties:
        clientOrderId:
          type: string
          description: Custom order ID. This must be a unique ID associated with an order and cannot be the same across multiple requests.
          maxLength: 256
        product:
          type: string
          description: Product name e.g. BTC-USD
        type:
          type: string
          description: Must be set to "market"
        fundingType:
          $ref: '#/components/schemas/FundingType'
        side:
          $ref: '#/components/schemas/Side'
        quantity:
          type: string
          format: decimal
        quantityCurrency:
          type: string
          description: The quantity currency must be in quote currency for buy and base currency for sell. e.g. If product is BTC-USD, the base currency will be BTC.
      example:
        clientOrderId: myorder1
        type: market
        product: BTC-USD
        side: buy
        quantity: '10000'
        quantityCurrency: USD
    NewOrderRequest:
      oneOf:
        - $ref: '#/components/schemas/NewMarketOrderRequest'
        - $ref: '#/components/schemas/NewLimitOrderRequest'
        - $ref: '#/components/schemas/NewTWAPOrderRequest'
        - $ref: '#/components/schemas/NewSteadyPaceOrderRequest'
    NewSteadyPaceOrderRequest:
      title: Steady Pace
      required:
        - product
        - quantity
        - quantityCurrency
        - side
        - type
      type: object
      properties:
        clientOrderId:
          type: string
          description: Custom order ID. This must be a unique ID associated with an order and cannot be the same across multiple requests.
          maxLength: 256
        product:
          type: string
          description: Product name e.g. BTC-USD
        type:
          type: string
          description: Must be set to "steady_pace"
        fundingType:
          $ref: '#/components/schemas/FundingType'
        side:
          $ref: '#/components/schemas/Side'
        quantity:
          type: string
          format: decimal
        quantityCurrency:
          type: string
          description: The quantity currency must be in quote currency for buy unless a limit price is specified, in which case buy orders can only be placed in the base currency. For sell, the quantity currency must be in base. e.g. If product is BTC-USD, the base currency will be BTC.
        limitPrice:
          type: string
          format: decimal
        scheduledDate:
          type: string
          format: date-time
        parameters:
          allOf:
            - $ref: '#/components/schemas/SteadyPaceOrderParameters'
      example:
        clientOrderId: myorder1
        type: steady_pace
        product: BTC-USD
        side: buy
        quantity: '100000'
        quantityCurrency: USD
        parameters:
          interval: 5
          intervalUnit: minute
          subOrderSize: '20000'
          variance: 0.02
    NewTWAPOrderRequest:
      title: TWAP
      required:
        - product
        - quantity
        - quantityCurrency
        - side
        - type
        - duration
      type: object
      properties:
        clientOrderId:
          type: string
          description: Custom order ID. This must be a unique ID associated with an order and cannot be the same across multiple requests.
          maxLength: 256
        product:
          type: string
          description: Product name e.g. BTC-USD
        type:
          type: string
          description: Must be set to "twap"
        fundingType:
          $ref: '#/components/schemas/FundingType'
        side:
          $ref: '#/components/schemas/Side'
        quantity:
          type: string
          format: decimal
        quantityCurrency:
          type: string
          description: The quantity currency must be in quote currency for buy unless a limit price is specified, in which case buy orders can only be placed in the base currency. For sell, the quantity currency must be in base. e.g. If product is BTC-USD, the base currency will be BTC.
        limitPrice:
          type: string
          format: decimal
        duration:
          type: integer
          description: Duration of the TWAP order in minutes.
        interval:
          type: integer
          description: Interval of the time-sliced TWAP order in minutes. Only required if `isTimeSliced` is `true`.
        scheduledDate:
          type: string
          format: date-time
        parameters:
          allOf:
            - $ref: '#/components/schemas/TWAPOrderParameters'
      example:
        clientOrderId: myorder1
        type: twap
        product: BTC-USD
        side: buy
        quantity: '100000'
        quantityCurrency: USD
        duration: 60
        interval: 5
        parameters:
          isTimeSliced: false
          boundsControl: wide
    NextBatchPrevId:
      type: string
      format: uuid
      example: 585951a5df8380e0e3063e9f
      description: When a result set is truncated, this field returns the id of the last object in the previous batch.  To get the next batch of results, pass this value via the `prevId` query parameter.
    NonNegativeBigAmount:
      title: NonNegativeBigAmount
      type: string
    NonParticipationTransactionBuildRequest:
      title: Non participation transaction
      allOf:
        - $ref: '#/components/schemas/BuildParams'
        - type: object
          properties:
            nonParticipation:
              type: boolean
          required:
            - nonParticipation
    NonWhitelistedAddressValue:
      title: Not whitelisted
      type: object
      description: The destination is not whitelisted.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - nonWhitelistedAddress
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Non-whitelisted address
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: The destination is not whitelisted
    NonZeroBigAmount:
      title: NonZeroBigAmount
      type: string
    NoneActionRequest:
      title: None
      type: object
      description: No action required.
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.bitgo.noop
          example: approvals.bitgo.noop
        parameters:
          type: object
          description: Required data needed to configure the Action.
          additionalProperties: true
        operator:
          $ref: '#/components/schemas/OperatorType'
    NtildeProof:
      title: NtildeProof
      type: object
      description: The ntildeProof value is only required when creating the initial config.
      properties:
        h1WrtH2:
          type: object
          properties:
            alpha:
              type: array
              items:
                type: string
                description: The alpha value of the range proof challenge proof is an array of 128 hex strings.
            t:
              type: array
              items:
                type: string
                description: The t value of the range proof challenge proof is an array of 128 hex strings.
          required:
            - alpha
            - t
        h2WrtH1:
          type: object
          properties:
            alpha:
              type: array
              items:
                type: string
                description: The alpha value of the range proof challenge proof is an array of 128 hex strings.
            t:
              type: array
              items:
                type: string
                description: The t value of the range proof challenge proof is an array of 128 hex strings.
          required:
            - alpha
            - t
      required:
        - h1WrtH2
        - h2WrtH1
    NullableString:
      title: NullableString
      allOf:
        - $ref: '#/components/schemas/NullableStringType'
    NullableStringType:
      type: string
      nullable: true
    NumKeychains:
      description: |
        Number of keys provided.  This value must be 3 for hot wallets,
        1 for **ofc** wallets, and not specified for custodial wallets.
      type: integer
      example: 3
    NumSignatures:
      description: |
        Number of signatures required.  This value must be 2 for
        hot wallets, 1 for **ofc** wallets, and not specified for custodial
        wallets.
      type: integer
      example: 2
    NumberLike:
      title: NumberLike
      type: number
    NumberOrString:
      oneOf:
        - type: string
          pattern: ^-?[\d\.]+$
          example: '1.5'
        - type: number
    OAuthAccessToken:
      title: OAuthAccessToken
      type: object
      properties:
        bitgoAdminPermissions:
          type: array
          items:
            type: string
            description: The BitGo admin permissions associated with the access token
        client:
          type: string
          description: The client associated with the access token
        created:
          type: string
          description: The creation date of the access token
          format: date-time
          title: ISO Date String
        enterprise:
          type: string
          description: The enterprise associated with the access token
        expires:
          type: string
          description: The expiration date of the access token
          format: date-time
          title: ISO Date String
        extensionAddress:
          type: string
          description: The extension address associated with the access token
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        internal:
          type: boolean
        ip:
          type: string
          description: IP address of the client that requested this access token
          example: 127.0.0.1
          format: ipv4
        ipRestrict:
          type: array
          items:
            type: string
            description: IP addresses of clients that are allowed to use this token
        isExtensible:
          type: boolean
          description: Indicates if the access token is extensible
        label:
          type: string
          description: The label associated with the access token
        organizations:
          type: array
          items:
            type: string
            description: The organizations associated with the access token
        origin:
          type: string
          description: BitGo environment that issued this token
          example: test.bitgo.com
        token:
          type: string
          description: The token value
        scope:
          type: array
          example:
            - crypto_compare
            - user_manage
            - openid
            - profile
            - wallet_create
            - wallet_manage_all
            - wallet_approve_all
            - wallet_spend_all
            - wallet_edit_all
            - wallet_view_all
          items:
            type: string
            description: Session permissions
        unlock:
          allOf:
            - type: object
              properties:
                spendingLimits:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/PerCoinLimit'
            - $ref: '#/components/schemas/Unlock'
          description: The unlock object, returned if this session is currently unlocked
        user:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
      required:
        - id
        - isExtensible
    OAuthProvider:
      title: OAuthProvider
      type: string
      enum:
        - msEntra
    OAuthSetting:
      title: OAuthSetting
      allOf:
        - type: object
          properties:
            clientSecret:
              type: string
          required:
            - clientSecret
        - $ref: '#/components/schemas/InternalUserOAuthSetting'
    OffChainWalletBalance:
      title: OffChainWalletBalance
      type: object
      properties:
        inboundBalance:
          type: string
          description: Inbound balance in millisatoshis (remote balance)
        inboundPendingBalance:
          type: string
          description: Pending inbound balance in millisatoshis (pending open remote balance)
        inboundUnsettledBalance:
          type: string
          description: Unsettled inbound balance in millisatoshis (unsettled remote balance)
        outboundBalance:
          type: string
          description: Outbound balance in millisatoshis (local balance)
        outboundPendingBalance:
          type: string
          description: Pending outbound balance in millisatoshis (pending open local balance)
        outboundUnsettledBalance:
          type: string
          description: Unsettled outbound balance in millisatoshis (unsettled local balance)
        outboundLockedBalance:
          type: string
          description: Locked (from pending force closed channels) outbound balance in millisatoshis (locked local balance)
      required:
        - inboundBalance
        - inboundPendingBalance
        - inboundUnsettledBalance
        - outboundBalance
        - outboundPendingBalance
        - outboundUnsettledBalance
        - outboundLockedBalance
    Offchain:
      title: Offchain
      type: object
      properties:
        needsKeyReshareAfterPasswordReset:
          type: boolean
        pendingSystemInitialization:
          type: boolean
          description: If true, this wallet is waiting for the system to finish initializing. In this state, users cannot create addresses or initiate withdrawals.
      required:
        - needsKeyReshareAfterPasswordReset
    OffchainAddressSubdocument:
      title: Offchain Address
      type: object
      additionalProperties: {}
    OldOwner:
      title: OldOwner
      allOf:
        - $ref: '#/components/schemas/OldOwnerObject'
    OldOwnerObject:
      type: object
      deprecated: true
      description: DEPRECATED - Use ownerName and normalized address fields instead
      properties:
        name:
          type: string
          minLength: 1
          deprecated: true
          description: DEPRECATED - Use ownerName instead
        address1:
          items:
            allOf:
              - $ref: '#/components/schemas/NullableString'
          deprecated: true
          description: DEPRECATED - Use ownerAddressLine1 instead
        address2:
          items:
            allOf:
              - $ref: '#/components/schemas/NullableString'
          deprecated: true
          description: DEPRECATED - Use ownerAddressLine2 instead
        address3:
          items:
            allOf:
              - $ref: '#/components/schemas/NullableString'
          deprecated: true
          description: DEPRECATED - Use additional normalized address fields instead
    OnboardingAgreement:
      title: OnboardingAgreement
      type: object
      description: For users doing self-service onboarding, they just need to click a checkbox to agree to the terms. we will track who & when that happened on a feature-by-feature basis.
      properties:
        user:
          type: string
        date:
          oneOf:
            - type: string
            - type: string
              format: date-time
              title: ISO Date String
            - type: string
              format: date
              title: Date String
        ip:
          type: string
      required:
        - user
        - date
    OperatorConditionParameter:
      title: Operator
      type: object
      description: The boolean operator used when comparing the transfer amount with the limit defined in this condition.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
        - values
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - operator
          example: operator
        label:
          type: string
          description: A label for the condition parameter that you can display to users.
          example: Comparison Operator
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The comparison operator to use when comparing the transfer amount with the given amount
        type:
          type: string
          description: Accepts only enumerated values as listed in the 'values' property of this condition.
          enum:
            - ENUMERATED
          example: ENUMERATED
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
        values:
          $ref: '#/components/schemas/ValidValues'
    OperatorType:
      type: string
      description: Boolean operators that join Conditions, and/or Actions. Must be null on the last Condition or Action, or if there is only one Condition or Action, must be non-null on all others.
      enum:
        - AND
        - OR
      example: AND
    OptionalAccountType:
      title: OptionalAccountType
      type: string
      nullable: true
      enum:
        - checking
        - saving
        - unknown
    Order:
      required:
        - id
        - accountId
        - time
        - creationDate
        - completionDate
        - type
        - fundingType
        - status
        - product
        - side
        - quantity
        - quantityCurrency
        - filledQuantity
        - filledQuoteQuantity
        - averagePrice
      type: object
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
        clientOrderId:
          type: string
        time:
          type: string
          format: date-time
          description: DEPRECATED
        creationDate:
          type: string
          format: date-time
        scheduledDate:
          type: string
          format: date-time
        lastFillDate:
          type: string
          format: date-time
        completionDate:
          type: string
          format: date-time
        settleDate:
          type: string
          format: date-time
        type:
          type: string
        fundingType:
          $ref: '#/components/schemas/FundingType'
        status:
          $ref: '#/components/schemas/OrderStatus'
        product:
          type: string
          description: Product name e.g. BTC-USD
        side:
          $ref: '#/components/schemas/Side'
        quantity:
          type: string
          format: decimal
          description: The specified quantity.
        quantityCurrency:
          type: string
          description: The specified quantity currency.
        filledQuantity:
          type: string
          format: decimal
          description: The base quantity that was filled.
        filledQuoteQuantity:
          type: string
          format: decimal
          description: The quote quantity that was filled.
        averagePrice:
          type: string
          format: decimal
        limitPrice:
          type: string
          format: decimal
        duration:
          type: integer
          description: Duration of the order in minutes.
        twapInterval:
          type: integer
          description: Interval length of the TWAP order in minutes.
        reason:
          description: Reason for order cancellation. 'internalError' indicates an error occurred within the server while processing the order, resulting in an order cancellation. 'insufficientFunds' indicates that the order was cancelled due to shortage of funds to complete the transaction.
          type: string
          enum:
            - internalError
            - insufficientFunds
          example: insufficientFunds
        parameters:
          allOf:
            - $ref: '#/components/schemas/TWAPOrderParameters'
            - $ref: '#/components/schemas/SteadyPaceOrderParameters'
      example:
        id: 67fd640c-cb6c-4218-80ae-49e79ec15646
        accountId: 60e740e7898f7d00064d43769a73dc48
        clientOrderId: myorderid1
        time: {}
        creationDate: {}
        scheduledDate: {}
        lastFillDate: {}
        completionDate: {}
        settleDate: {}
        fundingType: funded
        type: market
        status: completed
        product: BTC-USD
        side: buy
        quantity: '1000'
        quantityCurrency: USD
        filledQuantity: '0.02457152'
        filledQuoteQuantity: '1000'
        averagePrice: '40697.32'
    OrderBooksRequest:
      title: Order Books
      required:
        - type
        - channel
        - accountId
        - productId
      type: object
      properties:
        type:
          type: string
          description: The event type (e.g. "subscribe" or "unsubscribe")
        channel:
          type: string
          description: The subscription channel (e.g. "level2" for order books)
        accountId:
          type: string
          description: The ID of the account
        productId:
          type: string
          description: The ID of product. (e.g. "TBTC-TUSD*")
      example:
        type: subscribe
        channel: level2
        accountId: f230fdebfa084ffebc7e00515f54603f
        productId: TBTC-TUSD*
    OrderBooksResponse:
      title: Order Books Response
      type: object
      properties:
        channel:
          type: string
          description: The channel name (e.g. "level2").
        type:
          type: string
          description: The type of the response (e.g. "snapshot").
        product:
          type: string
          description: The product name (e.g. "TBTC-TUSD*").
        time:
          type: string
          format: date-time
          description: The timestamp of the snapshot.
        bids:
          type: array
          description: An array of bid levels [price, size].
          items:
            type: array
            items:
              type: string
        asks:
          type: array
          description: An array of ask levels [price, size].
          items:
            type: array
            items:
              type: string
      example:
        channel: level2
        type: snapshot
        product: TBTC-TUSD*
        time: '2020-01-01T09:35:26.465Z'
        bids:
          - - '7001.10'
            - '1.5084'
        asks:
          - - '7002.55'
            - '2.7524'
    OrderCanceled:
      title: Order Canceled
      allOf:
        - $ref: '#/components/schemas/TradeBaseOrder'
        - type: object
          properties:
            cumulativeQuantity:
              type: string
              format: decimal
              description: The cumulative quantity of the fill
            averagePrice:
              type: string
              format: decimal
              description: The average price of the fill
      example:
        channel: orders
        time: '2019-04-25T01:02:03.045678Z'
        accountId: f230fdebfa084ffebc7e00515f54603f
        orderId: 14db12f5-4d3d-4fd8-8ced-062aa81bb4bc
        clientOrderId: my-order-1
        product: TBTC-TUSD*
        status: canceled
        type: market
        side: buy
        quantity: '1.01'
        cumulativeQuantity: '0.50'
        averagePrice: '7090.1'
    OrderCompleted:
      title: Order Completed
      allOf:
        - $ref: '#/components/schemas/TradeBaseOrder'
        - type: object
          properties:
            cumulativeQuantity:
              type: string
              format: decimal
              description: The cumulative quantity of the fill
            averagePrice:
              type: string
              format: decimal
              description: The average price of the fill
      example:
        channel: orders
        time: '2019-04-25T01:02:03.045678Z'
        accountId: f230fdebfa084ffebc7e00515f54603f
        orderId: 14db12f5-4d3d-4fd8-8ced-062aa81bb4bc
        clientOrderId: my-order-1
        product: TBTC-TUSD*
        status: completed
        type: market
        side: buy
        quantity: '1.01'
        cumulativeQuantity: '1.01'
        averagePrice: '7090.1'
    OrderCreated:
      title: Order Created
      allOf:
        - $ref: '#/components/schemas/TradeBaseOrder'
        - type: object
      example:
        channel: orders
        time: '2019-04-25T01:02:03.045678Z'
        accountId: f230fdebfa084ffebc7e00515f54603f
        orderId: 14db12f5-4d3d-4fd8-8ced-062aa81bb4bc
        clientOrderId: my-order-1
        product: TBTC-TUSD*
        status: opened
        type: market
        side: buy
        quantity: '1.01'
    OrderError:
      title: Order Error
      allOf:
        - $ref: '#/components/schemas/TradeBaseOrder'
        - type: object
          properties:
            cumulativeQuantity:
              type: string
              format: decimal
              description: The cumulative quantity of the fill
            averagePrice:
              type: string
              format: decimal
              description: The average price of the fill
            message:
              type: string
              description: The error message
      example:
        channel: order
        time: '2019-04-25T01:02:03.045678Z'
        accountId: f230fdebfa084ffebc7e00515f54603f
        orderId: 14db12f5-4d3d-4fd8-8ced-062aa81bb4bc
        clientOrderId: my-order-1
        product: TBTC-TUSD*
        status: error
        message: insufficient fund
        type: market
        side: buy
        quantity: '1.01'
        cumulativeQuantity: '0.50'
        averagePrice: '7090.1'
    OrderHistoryBase:
      title: OrderHistoryBase
      type: object
      properties:
        status:
          type: string
          enum:
            - created
            - confirmed_fiat_deposit
            - confirmed_token_deposit
            - initiated_burn_token_transfer
            - completed_burn_token_transfer
            - approved_mint
            - triggering_mint
            - triggering_burn
            - completed_burn
            - approved_client_disbursal
            - initiated_client_disbursal
            - fulfilled
            - failed_mint_initiation
            - failed_mint_transaction
            - failed_burn_transaction
            - failed_burn_token_transfer
            - failed_to_mint
            - failed_to_burn
            - failed_to_initiate_disbursal
            - failed_to_complete_disbursal
          description: Status of the order
          example: created
        timestamp:
          type: string
          description: Timestamp when the status was updated
          example: '2025-04-04T09:25:48.216Z'
          format: date-time
          title: ISO Date String
      required:
        - status
        - timestamp
    OrderResponse:
      title: OrderResponse
      allOf:
        - type: object
          properties:
            fromAssetId:
              type: string
              description: Source asset identifier
              example: 08c1271e-b15d-4af8-8929-f75383903da4
              format: uuid
              title: uuid
            fromAmount:
              type: string
              description: Amount to be transferred from source asset, specified in its lowest denomination.
              example: '500'
              minLength: 1
            toAssetId:
              type: string
              description: Destination asset identifier
              example: 49ff49ea-3355-4717-bbb0-5e8f5cae2202
              format: uuid
              title: uuid
            toAmount:
              type: string
              description: Amount to be received in destination asset
              example: '5000000'
              minLength: 1
            destinationType:
              type: string
              enum:
                - go_account
                - address
                - wallet
              description: Type of destination for the order
              example: go_account
            sourceWalletId:
              type: string
              description: Source wallet identifier for the order
              example: 67bc4b038f5408faefbfc8edcf6e6577
              minLength: 1
              pattern: ^[0-9a-f]{32}$
            destinationWalletId:
              type: string
              description: Destination wallet identifier for go_account type
              example: 67bc4b038f5408faefbfc8edcf6e6577
              pattern: ^[0-9a-f]{32}$
            destinationAddress:
              type: string
              description: Destination blockchain address
              example: default_address
              minLength: 1
            userId:
              type: string
              description: User identifier who initiated the order
              example: 677cfdceca8396cf5f7534ddeb8d11e3
              minLength: 1
              pattern: ^[0-9a-f]{32}$
            clientDepositTxHash:
              type: string
              description: Transaction hash of the client deposit
              example: 512f64d10b5f358f6dbf3303f90013cfa46006b02a03282456d6bd6432cc5daf
              minLength: 1
            orderHistories:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/OrderHistoryBase'
                description: Array of order status changes with timestamps
            transactions:
              type: array
              items:
                type: object
                properties:
                  txId:
                    type: string
                    description: Transaction identifier
                    example: 512f64d10b5f358f6dbf3303f90013cfa46006b02a03282456d6bd6432cc5daf
                    minLength: 1
                  orderId:
                    type: string
                    description: Associated order identifier
                    example: 95bdbd9c-9cdc-41a4-ae70-165387b7aa51
                    format: uuid
                    title: uuid
                  assetId:
                    type: string
                    description: Asset identifier involved in transaction
                    example: 08c1271e-b15d-4af8-8929-f75383903da4
                    format: uuid
                    title: uuid
                  type:
                    type: string
                    enum:
                      - clientDeposit
                      - mint
                      - burn
                      - burnTokenTransfer
                      - clientDisbursement
                      - treasuryMintTransfer
                      - treasuryBurnTransfer
                    description: Type of transaction
                    example: clientDeposit
                  sender:
                    type: string
                    description: Sender identifier
                    example: client
                    minLength: 1
                  senderType:
                    type: string
                    enum:
                      - go_account
                      - address
                      - wallet
                    description: Type of sender
                    example: go_account
                  senderId:
                    type: string
                    description: Unique identifier of sender
                    example: 67bc4b038f5408faefbfc8edcf6e6577
                    minLength: 1
                    pattern: ^[0-9a-f]{32}$
                  sendAmount:
                    type: string
                    description: Amount sent in transaction
                    example: '500'
                    minLength: 1
                  receiver:
                    type: string
                    description: Receiver identifier
                    example: trust
                    minLength: 1
                  receiverType:
                    type: string
                    enum:
                      - go_account
                      - address
                    description: Type of receiver
                    example: go_account
                  receiverId:
                    type: string
                    description: Unique identifier of receiver
                    example: 6698e670115059e2efe672436a3aea3b
                    minLength: 1
                    pattern: ^[0-9a-f]{32}$
                  receiveAmount:
                    type: string
                    description: Amount received in transaction
                    example: '500'
                    minLength: 1
                  status:
                    type: string
                    enum:
                      - initiated
                      - signed
                      - unconfirmed
                      - confirmed
                      - rejected
                      - failed
                    description: Current status of transaction
                    example: confirmed
                  createdAt:
                    type: string
                    description: Timestamp when transaction was created
                    example: '2025-04-04T09:26:21.600Z'
                  updatedAt:
                    type: string
                    description: Timestamp when transaction was last updated
                    example: '2025-04-04T09:26:21.600Z'
                  pendingApprovalId:
                    type: string
                    description: Pending approval id
                    minLength: 1
                required:
                  - txId
                  - orderId
                  - assetId
                  - type
                  - sender
                  - senderType
                  - senderId
                  - sendAmount
                  - receiver
                  - receiverType
                  - receiverId
                  - receiveAmount
                  - status
                  - createdAt
                  - updatedAt
                  - pendingApprovalId
                description: List of transactions associated with the order
            metadata:
              type: string
              description: Additional metadata about the order
              minLength: 1
            createdAt:
              type: string
              description: Timestamp when the order was created
              example: '2025-04-04T09:25:48.216Z'
              format: date-time
              title: ISO Date String
            updatedAt:
              type: string
              description: Timestamp when the order was last updated
              example: '2025-04-04T09:55:09.136Z'
              format: date-time
              title: ISO Date String
          required:
            - fromAssetId
            - fromAmount
            - toAssetId
            - toAmount
            - destinationType
        - $ref: '#/components/schemas/OrderResponseBase'
    OrderResponseBase:
      title: OrderResponseBase
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the order
          example: 95bdbd9c-9cdc-41a4-ae70-165387b7aa51
          format: uuid
          title: uuid
        type:
          type: string
          enum:
            - mint
            - burn
            - reward
          description: Type of order operation
          example: mint
        status:
          type: string
          enum:
            - created
            - confirmed_fiat_deposit
            - confirmed_token_deposit
            - initiated_burn_token_transfer
            - completed_burn_token_transfer
            - approved_mint
            - triggering_mint
            - triggering_burn
            - completed_burn
            - approved_client_disbursal
            - initiated_client_disbursal
            - fulfilled
            - failed_mint_initiation
            - failed_mint_transaction
            - failed_burn_transaction
            - failed_burn_token_transfer
            - failed_to_mint
            - failed_to_burn
            - failed_to_initiate_disbursal
            - failed_to_complete_disbursal
          description: Current status of the order
          example: fulfilled
        enterpriseId:
          type: string
          description: The Enterprise ID
          example: 67bc4ae090e8af8f9b412d3d67e85252
          minLength: 1
          pattern: ^[0-9a-f]{32}$
      required:
        - id
        - type
        - status
        - enterpriseId
    OrderStatus:
      type: string
      enum:
        - pending_open
        - open
        - completed
        - pending_cancel
        - canceled
        - error
        - scheduled
    Orders:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    OrganizationIdString:
      title: OrganizationIdString
      type: string
      example: 59cd72485007a239fb00282ed480da1f
      pattern: ^[0-9a-f]{32}$
    OrganizationRole:
      title: OrganizationRole
      type: string
      enum:
        - serviceUser
        - admin
        - member
        - customer
      example: admin
    Otp:
      type: string
      example: '123456'
      description: Second factor authentication token
    OtpType:
      title: OtpType
      type: string
      enum:
        - authy
        - totp
        - u2f
        - webauthn
        - yubikey
    PaginatedResults:
      type: object
      description: Common fields of a paginated result.
      required:
        - page
        - totalPages
        - totalElements
      properties:
        page:
          type: integer
          description: Page number. Page numbers start at 1.
        totalPages:
          type: integer
          description: Total number of pages. Total pages start at 1.
        totalElements:
          type: integer
          description: Total number of elements across all pages.
    PaginatedResultsWithNextBatchPrevId:
      type: object
      description: Common fields of a paginated result paged with a nextBatchPrevId.
      required:
        - nextBatchPrevId
      properties:
        nextBatchPrevId:
          type: string
          description: The value to pass as the prevId to the API for getting the next page.
    PaillierBlumProof:
      title: PaillierBlumProof
      type: object
      description: The paillierBlumProof value is only required when creating the initial config.
      properties:
        w:
          type: string
          description: The w value of the Paillier Blum proof
        x:
          type: array
          items:
            type: string
            description: The x value of the Paillier Blum proof is an array of 80 hex strings
        z:
          type: array
          items:
            type: string
            description: The z value of the Paillier Blum proof is an array of 80 hex strings
      required:
        - w
        - x
        - z
    ParsedTx:
      title: ParsedTx
      type: object
      properties:
        inputs:
          type: array
          items:
            type: object
            properties:
              valueString:
                type: string
              _id:
                type: string
              address:
                type: string
              chain:
                type: number
              derivationIndex:
                type: number
              index:
                type: number
              value:
                oneOf:
                  - type: number
                  - type: number
            required:
              - valueString
        minerFee:
          oneOf:
            - type: string
            - type: number
        outputs:
          type: array
          items:
            type: object
            properties:
              valueString:
                type: string
              address:
                type: string
              change:
                type: boolean
              coinName:
                type: string
              data:
                type: string
              isPayGo:
                type: boolean
              value:
                oneOf:
                  - type: number
                  - type: number
              wallet:
                type: string
              walletV1:
                type: string
              baseAddress:
                type: string
              enterprise:
                type: string
            required:
              - valueString
        spendAmount:
          oneOf:
            - type: string
            - type: number
        gasPrice:
          type: number
        hasUnvalidatedData:
          type: boolean
        payGoFee:
          oneOf:
            - type: string
            - type: number
        spendAmounts:
          type: array
          items:
            type: object
            additionalProperties: {}
        type:
          type: string
      required:
        - inputs
        - minerFee
        - outputs
        - spendAmount
    PartnerAllocationStatusUpdate:
      title: PartnerAllocationStatusUpdate
      type: string
      enum:
        - cleared
        - released
    PartnerConnectionKeySchema:
      title: PartnerConnectionKeySchema
      type: string
      enum:
        - token
        - tokenAndSignature
        - apiKeyAndSecret
        - clearloop
    PartySettlementAmountsRecord:
      title: PartySettlementAmountsRecord
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: string
        description: For mapped settlement amounts where the amount will always be a bigint. This ensures consistent handling of large monetary values in settlements.
      description: Maps destination connection IDs to currency amounts for settlement. Record<Party (destination) connectionId, Record<Currency, Amount (bigint)>> Used for exchange-style settlements, where the exchange is always the source and client owned connections are the destination. Each entry maps a destination connection ID to the currency amounts being settled to that connection.
    PaymentFailureReason:
      title: PaymentFailureReason
      type: string
      enum:
        - TIMEOUT
        - NO_ROUTE
        - ERROR
        - INCORRECT_PAYMENT_DETAILS
        - INSUFFICIENT_BALANCE
        - INSUFFICIENT_WALLET_BALANCE
        - EXCESS_WALLET_BALANCE
        - INVOICE_EXPIRED
        - CANCELED
        - FORCE_FAILED
        - PAYMENT_ALREADY_SETTLED
        - PAYMENT_ALREADY_IN_FLIGHT
        - TRANSIENT_ERROR_RETRY_LATER
    PaymentInfo:
      title: PaymentInfo
      type: object
      description: Off-chain payment information
      properties:
        id:
          type: string
        paymentHash:
          type: string
        walletId:
          type: string
        txRequestId:
          type: string
        status:
          $ref: '#/components/schemas/PaymentStatus'
        invoice:
          type: string
        feeLimitMsat:
          type: string
          format: number
        destination:
          type: string
        updatedAt:
          type: string
          format: date-time
          title: ISO Date String
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
        amountMsat:
          type: string
          format: number
        feeMsat:
          type: string
          format: number
        failureReason:
          $ref: '#/components/schemas/PaymentFailureReason'
        paymentPreimage:
          type: string
      required:
        - id
        - paymentHash
        - walletId
        - txRequestId
        - status
        - invoice
        - feeLimitMsat
        - destination
        - updatedAt
        - createdAt
        - amountMsat
    PaymentIntent:
      title: PaymentIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - payment
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intentType
            - recipients
        - $ref: '#/components/schemas/BaseIntent'
    PaymentIntent1:
      title: PaymentIntent
      allOf:
        - type: object
          properties:
            intent:
              type: string
              enum:
                - payment
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address1'
                  amount:
                    $ref: '#/components/schemas/Amount1'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - intent
            - recipients
        - $ref: '#/components/schemas/BaseIntent1'
    PaymentStatus:
      title: PaymentStatus
      type: string
      enum:
        - in_flight
        - settled
        - failed
    PendingActivityAutoProcessing:
      title: PendingActivityAutoProcessing
      type: string
      enum:
        - requiresScreening
        - preapprovedRoutingNumber
        - screeningFailed
        - screeningApproved
    PendingActivityState:
      title: PendingActivityState
      allOf:
        - $ref: '#/components/schemas/PendingActivityStateObject'
    PendingActivityStateObject:
      oneOf:
        - $ref: '#/components/schemas/PendingActivityTrust'
        - $ref: '#/components/schemas/PendingActivityAutoProcessing'
    PendingActivityTrust:
      title: PendingActivityTrust
      type: string
      enum:
        - flaggedBrokerage
        - trustVerification
        - trustVerificationUpdated
        - trustNameVerification
        - ownerNameMismatch
    PendingApproval:
      title: PendingApproval
      type: object
      properties:
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        coin:
          type: string
          description: A cryptocurrency or token ticker symbol.
          example: btc
        wallet:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        walletType:
          type: string
        wallets:
          type: array
          items:
            type: string
            example: 59cd72485007a239fb00282ed480da1f
            pattern: ^[0-9a-f]{32}$
            description: The wallets of the pending approval
        enterprise:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        organization:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        organizationName:
          type: string
          description: The organization name
        bitgoOrg:
          type: string
          description: The BitGo organization
        creator:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        createDate:
          type: string
          description: The creation date of the pending approval
          format: date-time
          title: ISO Date String
        approvedDate:
          type: string
          description: The date when the approval was granted
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date when the approval was last updated (any update, not just processing)
          format: date-time
          title: ISO Date String
        keyCurve:
          type: string
          enum:
            - secp256k1
            - ed25519
            - bls12_381
          description: The key curve of the coin attached to this pending approval
        info:
          allOf:
            - $ref: '#/components/schemas/PendingApprovalInfo'
          description: Information about the pending approval
        state:
          allOf:
            - $ref: '#/components/schemas/PendingApprovalState'
          description: The state of the pending approval
        scope:
          type: string
          enum:
            - enterprise
            - wallet
            - organization
          description: What kind of entity the Pending Approval is tied to
        userIds:
          type: array
          items:
            type: string
            description: All the Users who should see this Pending Approval
        approvalsRequired:
          type: number
          example: 1
          minimum: 1
        walletLabel:
          type: string
          description: Label for the wallet
        addressLabels:
          type: array
          items:
            type: object
            properties:
              address:
                $ref: '#/components/schemas/AddressString'
              label:
                type: string
                description: The label
              walletLabel:
                type: string
                description: The wallet label
            required:
              - address
              - label
            description: Address labels of recipients in this Pending Approval
        resolvers:
          type: array
          items:
            type: object
            description: Resolvers for the pending approval
            properties:
              autoApproved:
                type: boolean
                description: Whether the resolution was auto approved
              date:
                type: string
                description: The date of resolution
                format: date-time
                title: ISO Date String
              resolutionAction:
                type: string
                enum:
                  - approve
                  - reject
                  - skip
                  - fail
                description: Action taken during resolution
              resolutionMemo:
                type: string
                description: Memo regarding the resolution
              resolutionType:
                allOf:
                  - $ref: '#/components/schemas/PendingApprovalStatePending'
                description: The type of resolution
              user:
                type: string
                description: The user who resolved the approval
              videoApprover:
                type: string
                description: The approver of the video resolution
              videoException:
                type: string
                description: Exception details for the video
              videoLink:
                type: string
                description: Link to the resolution video
            required:
              - resolutionType
        approvers:
          type: array
          items:
            type: string
            description: List of approvers
        singleRunResults:
          type: array
          items:
            type: object
            properties:
              ruleId:
                type: string
                description: The rule ID
              triggered:
                type: boolean
                description: Whether the rule was triggered
            description: Results from single run checks
        txRequestId:
          type: string
          description: Transaction request ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        videoId:
          type: object
          description: ID for the video related to the approval
          properties:
            date:
              type: string
              description: The date of the video ID
              format: date-time
              title: ISO Date String
            user:
              type: string
              description: The user associated with the video ID
            videoApprover:
              type: string
              description: The approver of the video
            videoException:
              type: string
              description: The exception related to the video
            videoLink:
              type: string
              description: The link to the video
        version:
          type: number
          description: Version of the pending approval
        policyEvaluationId:
          type: string
          description: ID for the policy evaluation
        actions:
          type: array
          items:
            type: object
            properties:
              approvers:
                type: array
                items:
                  type: string
                  description: The approvers of the action
              id:
                type: string
                description: The ID of the action
              name:
                type: string
                description: The name of the action
              operator:
                type: string
                enum:
                  - AND
                  - OR
                description: The operator of the action
              parameters:
                allOf:
                  - $ref: '#/components/schemas/PolicyActionParameters'
                description: The parameters of the action
              resolvers:
                type: array
                items:
                  type: object
                  description: The resolvers of the action
                  properties:
                    autoApproved:
                      type: boolean
                      description: Whether the resolution was auto approved
                    date:
                      type: string
                      description: The date of resolution
                      format: date-time
                      title: ISO Date String
                    resolutionAction:
                      type: string
                      enum:
                        - approve
                        - reject
                        - skip
                        - fail
                      description: Action taken during resolution
                    resolutionMemo:
                      type: string
                      description: Memo regarding the resolution
                    resolutionType:
                      allOf:
                        - $ref: '#/components/schemas/PendingApprovalStatePending'
                      description: The type of resolution
                    user:
                      type: string
                      description: The user who resolved the approval
                    videoApprover:
                      type: string
                      description: The approver of the video resolution
                    videoException:
                      type: string
                      description: Exception details for the video
                    videoLink:
                      type: string
                      description: Link to the resolution video
                  required:
                    - resolutionType
              status:
                allOf:
                  - $ref: '#/components/schemas/EvaluatedPolicyActionStatus'
                description: The status of the action
            required:
              - id
              - name
              - parameters
              - status
            description: List of actions taken
        resolutionOrder:
          type: array
          items:
            type: object
            properties:
              actions:
                type: array
                items:
                  type: string
                  minLength: 1
            required:
              - actions
            description: Order of resolution
        useLegacyPolicyEngine:
          type: boolean
          description: Flag to use legacy policy engine
        videoCallId:
          type: string
          description: ID for the video call
        lastUpdated:
          type: string
          description: The last date the approval was processing
          format: date-time
          title: ISO Date String
        freeze:
          type: object
          description: The freeze state
          properties:
            actions:
              type: array
              items:
                type: object
                properties:
                  reason:
                    type: string
                  state:
                    type: string
                    enum:
                      - frozen
                      - unFrozen
                  time:
                    type: string
                    format: date-time
                    title: ISO Date String
                  userId:
                    type: string
                  username:
                    type: string
            state:
              type: string
              enum:
                - frozen
                - unFrozen
        associatedInquiries:
          type: array
          items:
            type: object
            properties:
              inquiryId:
                type: string
              inquiryStatus:
                $ref: '#/components/schemas/InquiryStatus'
              inquirySubType:
                $ref: '#/components/schemas/InquirySubType'
              inquiryType:
                $ref: '#/components/schemas/InquiryType'
            required:
              - inquiryId
              - inquiryStatus
              - inquirySubType
              - inquiryType
            description: Associated inquiries
      required:
        - id
        - creator
        - createDate
        - info
        - state
        - scope
    PendingApproval1:
      title: Pending approval
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        coin:
          $ref: '#/components/schemas/Coin'
        wallet:
          $ref: '#/components/schemas/Id'
        enterprise:
          $ref: '#/components/schemas/Id'
        organization:
          $ref: '#/components/schemas/Id'
        creator:
          $ref: '#/components/schemas/Id'
        createDate:
          type: string
          format: date-time
        info:
          anyOf:
            - $ref: '#/components/schemas/PendingApprovalTransactionRequest'
            - $ref: '#/components/schemas/PendingApprovalTransactionRequestFull1'
            - $ref: '#/components/schemas/PendingApprovalUserChangeRequest'
            - $ref: '#/components/schemas/PendingApprovalPolicyRuleRequest'
            - $ref: '#/components/schemas/PendingApprovalUpdateApprovalsRequiredRequest'
            - $ref: '#/components/schemas/PendingApprovalEnterpriseModificationResponse1'
            - $ref: '#/components/schemas/PendingApprovalEnterpriseInviteRequest'
        state:
          $ref: '#/components/schemas/PendingApprovalState1'
        scope:
          description: What kind of entity the Pending Approval is tied to
          type: string
          enum:
            - enterprise
            - wallet
        userIds:
          description: All the Users who should see this Pending Approval
          type: array
          items:
            $ref: '#/components/schemas/Id'
        approvalsRequired:
          $ref: '#/components/schemas/ApprovalsRequired'
        walletLabel:
          type: string
        resolvers:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
              date:
                type: string
              resolutionType:
                type: string
                enum:
                  - approved
                  - awaitingSignature
                  - pending
                  - pendingBitGoAdminApproval
                  - pendingCryptographicApproval
                  - pendingCustodianApproval
                  - pendingFinalApproval
                  - pendingIdVerification
                  - pendingVideoApproval
                  - processing
                  - rejected
              signatures:
                type: array
                items:
                  type: string
              videoApprover:
                type: string
              videoLink:
                type: string
              videoException:
                type: string
            required:
              - user
              - date
              - resolutionType
              - signatures
        addressLabels:
          type: array
          items:
            $ref: '#/components/schemas/PendingApprovalAddressLabel'
    PendingApprovalAddressLabel:
      description: Address labels of recipients in this Pending Approval
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressString3'
        label:
          $ref: '#/components/schemas/AddressLabel'
        walletLabel:
          $ref: '#/components/schemas/WalletLabel'
      required:
        - address
        - label
    PendingApprovalEnterpriseInviteRequest:
      title: Enterprise Invite Request
      type: object
      properties:
        type:
          type: string
          enum:
            - enterpriseInviteRequest
        enterpriseInviteRequest:
          type: object
          properties:
            action:
              type: string
              enum:
                - add
            email:
              type: string
              description: The email address of the user being invited
            userId:
              $ref: '#/components/schemas/Id'
              description: The ID of the user being invited
            isVideoIdUser:
              type: boolean
            enterpriseInfo:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/Id'
                  description: The ID of the enterprise the user is being invited to
                name:
                  type: string
                  description: The name of the enterprise the user is being invited to
                requiredVerificationStep:
                  type: string
                  description: The required verification step needed (if any) before the user can join the enterprise
                invitedBy:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                      description: The ID of the user who invited the user
                    fullName:
                      type: string
                      description: The full name of the user who invited the user
                    email:
                      type: string
                      description: The email address of the user who invited the user
    PendingApprovalEnterpriseModificationResponse:
      title: Enterprise modification request
      type: object
      properties:
        policyRuleRequest:
          type: object
          properties:
            action:
              type: string
            updateEnterpriseRequest:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - updateEnterpriseRequest
                action:
                  type: string
                  enum:
                    - add
                    - remove
                permission:
                  type: string
                  enum:
                    - admin
                userId:
                  type: string
                email:
                  allOf:
                    - $ref: '#/components/schemas/PlatformEmail'
                  description: E-Mail address of newly added users
        type:
          type: string
          enum:
            - policyRuleRequest
    PendingApprovalEnterpriseModificationResponse1:
      title: Enterprise modification request
      type: object
      properties:
        policyRuleRequest:
          type: object
          properties:
            action:
              type: string
            updateEnterpriseRequest:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - updateEnterpriseRequest
                action:
                  type: string
                  enum:
                    - add
                    - remove
                permission:
                  type: string
                  enum:
                    - admin
                userId:
                  type: string
                email:
                  allOf:
                    - $ref: '#/components/schemas/Email'
                  description: E-Mail address of newly added users
        type:
          type: string
          enum:
            - policyRuleRequest
    PendingApprovalInfo:
      title: PendingApprovalInfo
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PendingApprovalType'
        userChangeRequest:
          type: object
          properties:
            action:
              type: string
              description: The action taken
            permissions:
              type: array
              items:
                type: string
                description: The permissions associated with the change
            userChanged:
              type: string
              description: The user that changed
        transactionRequest:
          type: object
          properties:
            buildParams: {}
            coinSpecific: {}
            comment:
              nullable: true
              type: string
              description: The comment for the transaction request
            fee: {}
            isUnsigned:
              nullable: true
              type: boolean
              description: Indicates if the transaction is unsigned
            policyUniqueId: {}
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                    description: The address of the recipient
                    example: 2MvrwRYBAuRtPTiZ5MyKg42Ke55W3fZJfZS
                    maxLength: 250
                  amount: {}
                  data:
                    type: string
                    description: Additional data for the transaction
                description: The recipients of the transaction
            requestedAmount: {}
            sourceWallet: {}
            triggeredPolicy: {}
            validTransaction:
              type: string
              description: Indicates if the transaction is valid
            validTransactionHash:
              type: string
              description: The hash of the valid transaction
            verificationItems:
              nullable: true
              type: array
              items:
                type: string
              description: The verification items for the transaction
            verificationRuleId:
              nullable: true
              type: string
              description: The ID of the verification rule
            videoApprovers:
              type: array
              items:
                description: The video approvers for the transaction
        transactionRequestFull:
          type: object
          properties:
            intent:
              allOf:
                - $ref: '#/components/schemas/PaymentIntent'
              description: The intent of the transaction request
            policyUniqueId:
              type: string
              description: The unique ID for the policy
            txRequest:
              oneOf:
                - $ref: '#/components/schemas/TransactionRequestLite2'
                - $ref: '#/components/schemas/TransactionRequestFull'
              description: The transaction request details
            txRequestId:
              allOf:
                - $ref: '#/components/schemas/TransactionRequestId'
              description: The ID of the transaction request
            verificationItems:
              type: array
              items:
                type: string
                description: The verification items for the transaction
            verificationRuleId:
              type: string
              description: The ID of the verification rule
            videoApprovers:
              type: array
              items:
                type: string
                description: The video approvers for the transaction
            walletRebalanceEventId:
              type: string
              description: The ID of the wallet rebalance event
          required:
            - txRequestId
        policyRuleRequest:
          type: object
          properties:
            action:
              type: string
              description: The action of the policy rule request
            update:
              type: object
              description: The update details of the policy rule request
              properties:
                action:
                  allOf:
                    - $ref: '#/components/schemas/PolicyRuleAction'
                  description: The action of the policy rule
                coin:
                  $ref: '#/components/schemas/CoinString'
                condition:
                  allOf:
                    - $ref: '#/components/schemas/PolicyRuleUpdateCondition'
                  description: The condition of the policy rule
                generatePolicy:
                  type: boolean
                  description: Should generate new whitelist policy when generatePolicy is undefined *
                id:
                  type: string
                  description: The ID of the policy rule
                lockDate:
                  type: string
                  format: date
                  title: Date String
                type:
                  allOf:
                    - $ref: '#/components/schemas/ApiRuleType'
                  description: The type of the API rule
        updateApprovalsRequiredRequest:
          type: object
          properties:
            requestedApprovalsRequired:
              type: number
              description: The number of requested approvals required
        updateEnterpriseRequest:
          type: object
          properties:
            action:
              type: string
              enum:
                - add
                - update
                - remove
            email:
              type: string
              description: The email of the user
            isVideoIdUser:
              type: boolean
              description: Indicates if the user is a video ID user
            permissions:
              type: string
              enum:
                - admin
                - auditor
              description: The permissions associated with the update
            userId:
              type: string
              description: The ID of the user
        updateOrganizationRequest:
          type: object
          properties:
            action:
              type: string
              enum:
                - add
                - update
                - remove
            email:
              type: string
              description: The email of the user
            role:
              type: string
              enum:
                - serviceUser
                - admin
                - member
                - customer
              description: The role of the user in the organization
              example: admin
            userId:
              type: string
              description: The ID of the user
        genericRequest:
          type: object
          properties:
            anchors:
              type: array
              items:
                type: object
                properties:
                  anchorType:
                    allOf:
                      - $ref: '#/components/schemas/AnchorType'
                    description: The type of the anchor
                  key:
                    type: string
                    description: The key of the anchor
                  value:
                    type: string
                    description: The value of the anchor
                required:
                  - anchorType
                  - key
                  - value
                description: The anchors associated with the request
            changeType:
              allOf:
                - $ref: '#/components/schemas/ChangeType'
              description: The type of change requested
            currentId:
              type: string
              description: The current ID associated with the request
            description:
              type: string
              description: The description of the request
            metadata:
              type: object
              additionalProperties:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
              description: The metadata of the request
            proposedId:
              type: string
              description: The proposed ID associated with the request
            resources:
              type: array
              items:
                type: object
                properties:
                  currentId:
                    type: string
                  metadata:
                    type: object
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                  proposedId:
                    type: string
                description: The resources associated with the request
            resourceType:
              type: string
              description: The resource type of the request
        enterpriseInviteRequest:
          type: object
          properties:
            action:
              type: string
              enum:
                - add
                - update
                - remove
            email:
              type: string
              description: The email of the user
            enterpriseInfo:
              type: object
              description: Additional info used by the client accepting the invite
              properties:
                id:
                  type: string
                invitedBy:
                  type: object
                  properties:
                    email:
                      type: string
                    fullName:
                      type: string
                    id:
                      type: string
                  required:
                    - email
                    - fullName
                    - id
                name:
                  type: string
                requiredVerificationStep:
                  type: string
                userKycState:
                  type: string
              required:
                - id
                - invitedBy
                - name
                - requiredVerificationStep
            isVideoIdUser:
              type: boolean
              description: Indicates if the user is a video ID user
            permissions:
              type: string
              enum:
                - admin
                - auditor
              description: The permissions associated with the invite
            userId:
              type: string
              description: The ID of the user
      required:
        - type
    PendingApprovalPolicyRuleRequest:
      title: Policy rule request
      type: object
      properties:
        policyRuleRequest:
          type: object
          properties:
            action:
              type: string
            update:
              type: object
              properties:
                action:
                  $ref: '#/components/schemas/PolicyRuleActions'
                coin:
                  $ref: '#/components/schemas/Coin'
                condition:
                  type: object
                  properties:
                    excludeTags:
                      $ref: '#/components/schemas/IdArray'
                    groupTags:
                      $ref: '#/components/schemas/IdArray'
                  additionalProperties: true
                id:
                  type: string
                  description: the id of the rule that is being updated
                type:
                  $ref: '#/components/schemas/PolicyRuleTriggers'
        type:
          type: string
          enum:
            - policyRuleRequest
    PendingApprovalState:
      title: PendingApprovalState
      oneOf:
        - $ref: '#/components/schemas/PendingApprovalStatePending'
        - $ref: '#/components/schemas/PendingApprovalStateResolved'
        - $ref: '#/components/schemas/PendingApprovalStateTrust'
        - $ref: '#/components/schemas/PendingApprovalStateProtected'
    PendingApprovalState1:
      anyOf:
        - $ref: '#/components/schemas/PendingApprovalStatePending1'
        - $ref: '#/components/schemas/PendingApprovalStateResolved'
    PendingApprovalStatePending:
      title: Pending
      type: string
      enum:
        - pending
        - awaitingSignature
        - pendingFinalApproval
        - pendingCustodianApproval
        - pendingVideoApproval
        - pendingIdVerification
        - pendingLivenessVerification
        - pendingManualTrustReview
        - pendingManualSupportReview
        - pendingVideoApprovalFromSupport
    PendingApprovalStatePending1:
      title: Pending
      type: string
      enum:
        - pending
        - awaitingSignature
        - pendingFinalApproval
        - pendingCustodianApproval
        - pendingVideoApproval
        - pendingIdVerification
    PendingApprovalStateProtected:
      title: Pending Protected
      type: string
      enum:
        - pendingVideoApproval
        - pendingIdVerification
        - awaitingSignature
        - pendingCustodianApproval
        - pendingManualTrustReview
    PendingApprovalStateResolved:
      title: Resolved
      type: string
      enum:
        - approved
        - processing
        - rejected
    PendingApprovalStateTrust:
      title: Pending Trust
      type: string
      enum:
        - pendingVideoApproval
        - pendingIdVerification
        - awaitingSignature
        - pendingCustodianApproval
        - pendingManualTrustReview
    PendingApprovalTransactionRequest:
      title: Transaction request (lite)
      type: object
      properties:
        transactionRequest:
          type: object
          properties:
            buildParams:
              type: object
            coinSpecific:
              type: object
            comment:
              type: string
            fee:
              $ref: '#/components/schemas/IntegerOrString'
            isUnsigned:
              type: boolean
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/AddressString3'
                  amount:
                    $ref: '#/components/schemas/IntegerOrIntegerString'
                  data:
                    type: string
            requestedAmount:
              $ref: '#/components/schemas/IntegerOrIntegerString'
            sourceWallet:
              $ref: '#/components/schemas/Id'
            triggeredPolicy:
              $ref: '#/components/schemas/Id'
            validTransaction:
              type: string
            validTransactionHash:
              type: string
        type:
          type: string
          enum:
            - transactionRequest
    PendingApprovalTransactionRequestFull:
      title: Transaction request (full)
      type: object
      properties:
        transactionRequestFull:
          type: object
          properties:
            txRequestId:
              type: string
            policyUniqueId:
              $ref: '#/components/schemas/Id'
            verificationItems:
              type: array
              items:
                type: string
            verificationRuleId:
              type: string
            videoApprovers:
              $ref: '#/components/schemas/IdArray'
            walletRebalanceEventId:
              $ref: '#/components/schemas/Id'
            txRequest:
              $ref: '#/components/schemas/PlatformTransactionRequest'
          required:
            - txRequestId
        type:
          type: string
          enum:
            - transactionRequestFull
    PendingApprovalTransactionRequestFull1:
      title: Transaction request (full)
      type: object
      properties:
        transactionRequestFull:
          type: object
          properties:
            txRequestId:
              type: string
            policyUniqueId:
              $ref: '#/components/schemas/Id'
            verificationItems:
              type: array
              items:
                type: string
            verificationRuleId:
              type: string
            videoApprovers:
              $ref: '#/components/schemas/IdArray'
            walletRebalanceEventId:
              $ref: '#/components/schemas/Id'
            txRequest:
              $ref: '#/components/schemas/TransactionRequest'
          required:
            - txRequestId
        type:
          type: string
          enum:
            - transactionRequestFull
    PendingApprovalType:
      title: PendingApprovalType
      type: string
      enum:
        - userChangeRequest
        - transactionRequest
        - transactionRequestFull
        - policyRuleRequest
        - updateApprovalsRequiredRequest
        - updateEnterpriseRequest
        - updateOrganizationRequest
        - genericRequest
        - enterpriseInviteRequest
    PendingApprovalUpdateApprovalsRequiredRequest:
      title: Update approvals required request
      type: object
      properties:
        type:
          type: string
          enum:
            - updateApprovalsRequiredRequest
        updateApprovalsRequiredRequest:
          type: object
          properties:
            requestedApprovalsRequired:
              type: number
    PendingApprovalUserChangeRequest:
      title: User change request
      type: object
      properties:
        type:
          type: string
          enum:
            - userChangeRequest
        userChangeRequest:
          type: object
          properties:
            action:
              type: string
            permissions:
              type: string
            userChanged:
              $ref: '#/components/schemas/Id'
    PendingApprovals:
      title: Pending approvals
      type: object
      properties:
        pendingApprovals:
          type: array
          items:
            $ref: '#/components/schemas/PendingApproval1'
    PendingApprovalsCountSchema:
      title: PendingApprovalsCountSchema
      type: object
      additionalProperties:
        type: object
        properties:
          pendingApprovalsCount:
            type: number
            description: The number of pending approvals
        required:
          - pendingApprovalsCount
    PerCoinLimit:
      title: PerCoinLimit
      type: object
      properties:
        txCount:
          type: number
          description: The transaction count limit for the coin
        txValue:
          type: number
          description: The transaction value limit for the coin
        txValueLimit:
          type: number
          description: The maximum transaction value limit for the coin
    PersonaIdClass:
      title: PersonaIdClass
      type: string
      enum:
        - cct
        - cid
        - dl
        - foid
        - hic
        - id
        - ipp
        - keyp
        - ltpass
        - munid
        - myn
        - nbi
        - nric
        - ofw
        - rp
        - pan
        - pid
        - pp
        - ppc
        - pr
        - sss
        - td
        - tribalid
        - umid
        - vid
        - visa
        - wp
    Phone:
      title: Phone
      type: object
      properties:
        phone:
          nullable: true
          type: string
          example: 408-718-6885
        verified:
          type: boolean
          example: true
      required:
        - phone
        - verified
    PinnedWallets:
      title: PinnedWallets
      type: object
      properties:
        enterpriseId:
          type: string
        userId:
          type: string
        wallets:
          type: array
          items:
            type: string
      required:
        - enterpriseId
        - userId
        - wallets
    PlatformAdditionalEnterpriseInfo:
      type: object
      properties:
        contact:
          $ref: '#/components/schemas/PlatformGeographicAddress'
    PlatformPlatformError:
      title: API error
      allOf:
        - $ref: '#/components/schemas/PlatformPlatformErrorNoName'
        - properties:
            context:
              type: object
              description: Properties that apply to a specific error name
            name:
              type: string
              description: Error code
          required:
            - name
    PlatformPlatformErrorNoName:
      type: object
      properties:
        error:
          type: string
          description: Human-readable error message
        requestId:
          type: string
          description: Client request id
      required:
        - error
        - requestId
    PlatformBitgoOrg:
      type: string
      description: BitGo Organization related to this entity
      enum:
        - BitGo Inc
        - BitGo Trust
        - BitGo New York
        - BitGo Germany
        - BitGo Switzerland
        - Frankfurt DE Trust
        - BitGo Sister Trust 1
        - BitGo Korea
        - BitGo Singapore
        - BitGo Europe ApS
        - BitGo Mena Fze
        - BitGo Custody MENA FZE
        - BitGo India
    PlatformCommitmentShare:
      type: object
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The source of the commitment share.
        to:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The recipient of the commitment share.
        share:
          type: string
          description: The commitment share.
        type:
          allOf:
            - $ref: '#/components/schemas/CommitmentType'
            - default: commitment
          description: The type of the commitment share.
      required:
        - from
        - to
        - share
        - type
    PlatformEmail:
      type: string
      format: email
      example: user@example.com
    PlatformEnterprise:
      type: object
      properties:
        accountType:
          $ref: '#/components/schemas/EnterpriseAccountType'
        additionalEnterpriseInfo:
          $ref: '#/components/schemas/PlatformAdditionalEnterpriseInfo'
        admin:
          type: object
          properties:
            policy:
              $ref: '#/components/schemas/PlatformPolicy'
        approvedVideoIdUsers:
          type: array
          items:
            $ref: '#/components/schemas/Id'
          description: IDs of users on the enterprise that are approved for custodial video ID
        approvalsRequired:
          type: integer
          description: How many Enterprise Admins are required for action to fire
          example: 1
        bitgoEthKey:
          type: string
          description: The public portion of the ethererum key generated for the enterprise fee address
        bitgoOrg:
          $ref: '#/components/schemas/PlatformBitgoOrg'
        canAccessBorrowing:
          type: boolean
          description: whether the enterprise has the licence for BitGo Prime Borrowing
        canAccessLending:
          type: boolean
          description: whether the enterprise has the licence for BitGo Prime Lending
        canAccessSettlement:
          type: boolean
          description: whether the enterprise has the licence to utilize settlement functionality
        canAccessTrading:
          type: boolean
          description: whether the enterprise has the licence to access BitGo Trading
        canCreateColdWallet:
          type: boolean
          description: whether the enterprise has the license to create cold wallets
        canCreateCustodialWallets:
          type: boolean
          description: whether the enterprise has the license to create custodial wallets
        canCreateHotWallet:
          type: boolean
          description: whether the enterprise has the license to create hot wallets
        contract:
          $ref: '#/components/schemas/PlatformEnterpriseContract'
        emergencyPhone:
          $ref: '#/components/schemas/EmergencyPhone'
        ethFeeAddress:
          type: string
          description: The eth fee address used to pay for network transaction fees of this enterprise
        freeze:
          $ref: '#/components/schemas/PlatformFreeze'
        id:
          $ref: '#/components/schemas/Id'
        mutablePolicyWindow:
          type: integer
          description: Time in seconds after which policies on this Enterprise cannot be updated
          example: 172800
        name:
          type: string
          example: Small Company
        pricingTypes:
          $ref: '#/components/schemas/EnterprisePricingTypes'
        activePricingType:
          $ref: '#/components/schemas/EnterpriseActivePricingType'
        kits:
          $ref: '#/components/schemas/EnterpriseKits'
        activeKits:
          $ref: '#/components/schemas/EnterpriseActiveKits'
        primaryContact:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: The Id of the User who is the primary contact
        preferredUi:
          allOf:
            - $ref: '#/components/schemas/EnterpriseAvailableUI'
          description: The UI that this enterprise prefers to use
        totalWalletsCount:
          type: integer
          description: The total number of wallets in the enterprise
          example: 1
        usersViewAllWallets:
          $ref: '#/components/schemas/ViewAllWallets'
        videoIdWaived:
          $ref: '#/components/schemas/VideoIdWaived'
      required:
        - id
    PlatformEnterpriseContract:
      type: object
      properties:
        startDate:
          type: string
          description: The contract start date for an enterprise
        endDate:
          type: string
          description: The contract end date for an enterprise
    PlatformFreeze:
      type: object
      properties:
        time:
          type: string
          format: date-time
          description: When the freeze started
        expires:
          type: string
          format: date-time
          description: When the freeze will end
    PlatformGeographicAddress:
      type: object
      properties:
        name:
          type: string
          description: Legal name of the enterprise, not neccessarily the enterprise name
        street:
          type: string
          description: Address line
        street2:
          type: string
          nullable: true
          description: Optional 2nd address line
        suite:
          type: string
          description: Optional suite number
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or region
        postalCode:
          type: string
          description: Postcal code
        country:
          type: string
          description: ISO 3166-1 Alpha-3 country code
      example:
        name: Jane Doe
        street: '1'
        street2: Wall Street
        suite: '3'
        city: New York
        state: NY
        postalCode: '10005'
        country: USA
    PlatformInvalidEnterpriseId:
      title: Invalid enterprise ID
      allOf:
        - $ref: '#/components/schemas/PlatformInvalidId'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - InvalidEnterpriseId
          required:
            - name
    PlatformInvalidId:
      allOf:
        - $ref: '#/components/schemas/PlatformPlatformErrorNoName'
        - properties:
            context:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/Id'
          required:
            - context
    PlatformInvalidWalletId:
      title: Invalid wallet id
      allOf:
        - $ref: '#/components/schemas/PlatformInvalidId'
        - properties:
            name:
              type: string
              description: Error code
              enum:
                - InvalidWalletId
          required:
            - name
    PlatformLegalIdentifiers:
      type: object
      properties:
        legalPersonName:
          type: string
          description: Legal name of the Enterprise
      required:
        - legalPersonName
      example:
        legalPersonName: Pineapple Capital Inc
    PlatformMultisigTypeVersion:
      type: string
      enum:
        - MPCv2
    PlatformMutabilityConstraint:
      type: string
      description: |
        Specifies whether a BitGo admin can change `lockDate`
        * `managed` - Not locked, but requires approval from a BitGo admin to change
        * `permanent` - `lockDate` cannot be changed
      enum:
        - managed
        - permanent
    PlatformPendingApproval:
      title: Pending approval
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        coin:
          $ref: '#/components/schemas/Coin'
        wallet:
          $ref: '#/components/schemas/Id'
        enterprise:
          $ref: '#/components/schemas/Id'
        organization:
          $ref: '#/components/schemas/Id'
        creator:
          $ref: '#/components/schemas/Id'
        createDate:
          type: string
          format: date-time
        info:
          anyOf:
            - $ref: '#/components/schemas/PendingApprovalTransactionRequest'
            - $ref: '#/components/schemas/PendingApprovalTransactionRequestFull'
            - $ref: '#/components/schemas/PendingApprovalUserChangeRequest'
            - $ref: '#/components/schemas/PendingApprovalPolicyRuleRequest'
            - $ref: '#/components/schemas/PendingApprovalUpdateApprovalsRequiredRequest'
            - $ref: '#/components/schemas/PendingApprovalEnterpriseModificationResponse'
            - $ref: '#/components/schemas/PendingApprovalEnterpriseInviteRequest'
        state:
          $ref: '#/components/schemas/PlatformPendingApprovalState'
        scope:
          description: What kind of entity the Pending Approval is tied to
          type: string
          enum:
            - enterprise
            - wallet
        userIds:
          description: All the Users who should see this Pending Approval
          type: array
          items:
            $ref: '#/components/schemas/Id'
        approvalsRequired:
          $ref: '#/components/schemas/ApprovalsRequired'
        walletLabel:
          type: string
        resolvers:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
              date:
                type: string
              resolutionType:
                type: string
                enum:
                  - approved
                  - awaitingSignature
                  - pending
                  - pendingBitGoAdminApproval
                  - pendingCryptographicApproval
                  - pendingCustodianApproval
                  - pendingFinalApproval
                  - pendingIdVerification
                  - pendingVideoApproval
                  - processing
                  - rejected
              signatures:
                type: array
                items:
                  type: string
              videoApprover:
                type: string
              videoLink:
                type: string
              videoException:
                type: string
            required:
              - user
              - date
              - resolutionType
              - signatures
        addressLabels:
          type: array
          items:
            $ref: '#/components/schemas/PendingApprovalAddressLabel'
    PlatformPendingApprovalState:
      anyOf:
        - $ref: '#/components/schemas/PlatformPendingApprovalStatePending'
        - $ref: '#/components/schemas/PlatformPendingApprovalStateResolved'
    PlatformPendingApprovalStatePending:
      title: Pending
      type: string
      enum:
        - pending
        - awaitingSignature
        - pendingFinalApproval
        - pendingCustodianApproval
        - pendingVideoApproval
        - pendingIdVerification
    PlatformPendingApprovalStateResolved:
      title: Resolved
      type: string
      enum:
        - approved
        - processing
        - rejected
    PlatformPolicy:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        date:
          type: string
          format: date-time
        label:
          type: string
        latest:
          type: boolean
        rules:
          type: array
          items:
            $ref: '#/components/schemas/PlatformPolicyRule'
        version:
          type: integer
      required:
        - id
        - latest
        - rules
        - version
    PlatformPolicyRule:
      type: object
      properties:
        id:
          type: string
        lockDate:
          type: string
          description: The time at which this rule becomes immutable
          format: date-time
        mutabilityConstraint:
          $ref: '#/components/schemas/PlatformMutabilityConstraint'
        coin:
          $ref: '#/components/schemas/Coin'
        type:
          $ref: '#/components/schemas/PolicyRuleTriggers'
        condition:
          $ref: '#/components/schemas/PolicyRuleConditions'
        action:
          $ref: '#/components/schemas/PolicyRuleActions'
      required:
        - id
        - lockDate
        - type
        - action
    PlatformSignatureShare:
      type: object
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The source of the signature share.
        to:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The recipient of the signature share.
        share:
          type: string
          description: The signature share.
      required:
        - from
        - to
        - share
    PlatformTransaction:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/PlatformTransactionState'
        unsignedTx:
          allOf:
            - $ref: '#/components/schemas/TransactionRequestUnsignedTransaction'
          description: Holds the unsigned transaction for this transaction in a tx-request.
        signatureShares:
          type: array
          description: Only used for MPC coins. This is used to collect signature shares from and exchange them with the user. Holds the signature shares for this transaction in a tx-request.
          items:
            $ref: '#/components/schemas/PlatformSignatureShare'
        commitmentShares:
          type: array
          description: Only used for MPC coins on EdDSA curve. This is used to collect commitment shares from and exchange them with the user. Holds the commitment shares for this transaction in a tx-request.
          items:
            $ref: '#/components/schemas/PlatformCommitmentShare'
        txHash:
          type: string
          description: The hash of the transaction from the TxRequest that has been signed and is pending broadcast.
        bitgoPaillierChallenge:
          description: BitGo-to-user paillier challenge. Required when signing with ECDSA MPC wallets.
          type: object
          properties:
            p:
              type: array
              items:
                type: string
      required:
        - state
        - unsignedTx
    PlatformTransactionRequest:
      anyOf:
        - $ref: '#/components/schemas/PlatformTransactionRequestLite'
        - $ref: '#/components/schemas/PlatformTransactionRequestFull'
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - userId
        - intent
    PlatformTransactionRequestBase:
      type: object
      properties:
        txRequestId:
          type: string
          description: A unique ID for the TxRequest document across all wallets. The combination of the txRequestId and version will always be unique.
        version:
          type: number
          description: The version of the document. Data changes are done only with inserts and incrementing the version.
        latest:
          type: boolean
          description: A boolean flag that indicates whether the document is the latest version of the TxRequest.
        walletId:
          type: string
          description: The id of the Wallet the TxRequest is for.
        walletType:
          allOf:
            - $ref: '#/components/schemas/WalletTypePublic'
          description: The type describes who owns the keys to the wallet associated to the TxRequest.
        enterpriseId:
          type: string
          description: If the wallet that owns the TxRequest is owned by an enterprise then this is the Id of said enterprise.
        state:
          $ref: '#/components/schemas/PlatformTransactionRequestState'
        date:
          allOf:
            - $ref: '#/components/schemas/DateTime'
          description: The date and time this version of the TxRequest document was created.
        createdDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
          description: The date and time the version 1 TxRequest document was created.
        userId:
          type: string
          description: The Id of the User that produced this version of the TxRequest document. Could have created a new document or updated an existing document.
        initiatedBy:
          type: string
          description: The Id of the User that originally created the TxRequest document (initiated the TxRequest).
        updatedBy:
          type: string
          description: The Id of the User that last updated the TxRequest document. This is an alias for the userId field.
        intent:
          $ref: '#/components/schemas/TransactionRequestIntent'
        intents:
          type: array
          items:
            $ref: '#/components/schemas/TransactionRequestIntent'
        pendingApprovalId:
          type: string
          description: The id of the Pending Approval that was created for the TxRequest if one was required.
        isCanceled:
          type: boolean
          description: True, if the transaction request is canceled.
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - createdDate
        - userId
        - initiatedBy
        - updatedBy
        - intents
    PlatformTransactionRequestFull:
      title: Full
      allOf:
        - $ref: '#/components/schemas/PlatformTransactionRequestBase'
        - type: object
          properties:
            transactions:
              description: Transaction information.
              type: array
              items:
                $ref: '#/components/schemas/PlatformTransaction'
            messages:
              description: Messages for the transaction request.
              type: array
              items:
                $ref: '#/components/schemas/Message'
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - userId
        - intent
        - transactions
    PlatformTransactionRequestLite:
      title: Lite
      allOf:
        - $ref: '#/components/schemas/PlatformTransactionRequestBase'
        - type: object
          properties:
            unsignedTxs:
              type: array
              description: Holds all unsigned transactions that will be used to fulfill the TxRequest for MPC wallets.
              items:
                $ref: '#/components/schemas/TransactionRequestUnsignedTransaction'
            signatureShares:
              type: array
              description: Only used for MPC coins. This is used to collect signature shares from and exchange them with the user.
              items:
                $ref: '#/components/schemas/PlatformSignatureShare'
            commitmentShares:
              type: array
              description: Only used for MPC coins on EdDSA curve. This is used to collect commitment shares from and exchange them with the user.
              items:
                $ref: '#/components/schemas/PlatformCommitmentShare'
            txHashes:
              type: array
              items:
                type: string
                description: The hashes of all transactions from the TxRequest that have been signed and are pending broadcast.
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - userId
        - intent
    PlatformTransactionRequestState:
      type: string
      enum:
        - initialized
        - pendingApproval
        - pendingUserCommitment
        - pendingUserRShare
        - pendingUserGShare
        - readyToSend
        - pendingUserSignature
        - pendingDelivery
        - signed
        - delivered
        - canceled
        - rejected
        - failed
    PlatformTransactionState:
      type: string
      enum:
        - initialized
        - pendingSignature
        - eddsaPendingCommitment
        - eddsaPendingRShare
        - eddsaPendingGShare
        - readyToCombineShares
        - signed
        - held
        - delivered
        - invalidSignature
        - rejected
        - ecdsaMPCv2Round1
        - ecdsaMPCv2Round2
        - ecdsaMPCv2Round3
    PlatformUnlock:
      type: object
      properties:
        time:
          type: string
          format: date-time
        expires:
          type: string
          format: date-time
        txCount:
          type: integer
        txValue:
          type: integer
        txValueLimit:
          type: number
        spendingLimits:
          $ref: '#/components/schemas/SpendingLimits'
    PlatformUpdateWalletShareResponse:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/PlatformWalletShareState'
          description: New state of the wallet share after update
        changed:
          type: boolean
    PlatformVerifiedKycState:
      type: string
      enum:
        - approved
        - pending
        - rejected
    PlatformWallet:
      type: object
      properties:
        admin:
          type: object
          properties:
            policy:
              $ref: '#/components/schemas/PlatformPolicy'
        allowBackupKeySigning:
          type: boolean
        approvalsRequired:
          $ref: '#/components/schemas/ApprovalsRequired'
        balanceString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: Total balance in base units (e.g. Satoshis)
        buildDefaults:
          $ref: '#/components/schemas/WalletBuildDefaults'
        coin:
          $ref: '#/components/schemas/Coin'
        coinSpecific:
          $ref: '#/components/schemas/WalletCoinSpecific'
        custodialWallet:
          type: object
          description: The associated custodial wallet object
        custodialWalletId:
          $ref: '#/components/schemas/Id'
        deleted:
          type: boolean
        disableTransactionNotifications:
          type: boolean
        enterprise:
          $ref: '#/components/schemas/Id'
        freeze:
          type: object
          properties:
            time:
              type: string
              format: dateTime
            expires:
              type: string
              format: dateTime
        id:
          $ref: '#/components/schemas/Id'
        isCold:
          type: boolean
        keys:
          $ref: '#/components/schemas/Keys'
        label:
          $ref: '#/components/schemas/WalletLabel'
        m:
          $ref: '#/components/schemas/NumSignatures'
        'n':
          $ref: '#/components/schemas/NumKeychains'
        nodeId:
          $ref: '#/components/schemas/Id'
        receiveAddress:
          $ref: '#/components/schemas/Address2'
        recoverable:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        spendableBalanceString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: Spendable balance in base units (e.g. Satoshis)
        unspentCount:
          type: number
          example: 100
          description: Number of unspent outputs present in the wallet
        startDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
          description: Wallet creation time
        type:
          $ref: '#/components/schemas/WalletTypePublic'
        users:
          type: array
          items:
            $ref: '#/components/schemas/WalletUser'
        customChangeKeySignatures:
          $ref: '#/components/schemas/CustomChangeKeySignatures'
        multisigType:
          $ref: '#/components/schemas/WalletMultisigType'
        multisigTypeVersion:
          $ref: '#/components/schemas/PlatformMultisigTypeVersion'
      required:
        - approvalsRequired
        - coin
        - deleted
        - disableTransactionNotifications
        - id
        - label
    PlatformWalletShareState:
      type: string
      example: active
      enum:
        - pendingapproval
        - active
        - accepted
        - canceled
        - rejected
    PlatformWebhook:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        label:
          type: string
          example: Test Webhook
        created:
          $ref: '#/components/schemas/DateTime'
        coin:
          $ref: '#/components/schemas/Coin'
        type:
          $ref: '#/components/schemas/WebhookTypeWallet'
        url:
          type: string
          format: uri
          example: https://your.server.com/webhook
        version:
          type: integer
          example: 2
          description: 2 for coins running on API v2.
        numConfirmations:
          type: integer
          example: 6
        state:
          type: string
          description: If `active`, indicates the webhook can trigger and send to the URL. If `suspended`, indicates the webhook can't trigger.
          enum:
            - active
            - suspended
          example: active
        lastAttempt:
          $ref: '#/components/schemas/DateTime'
        failingSince:
          $ref: '#/components/schemas/DateTime'
        successiveFailedAttempts:
          type: integer
          example: 0
        walletId:
          type: string
        allowBlockedHosts:
          type: boolean
        allToken:
          type: boolean
        txRequestStates:
          type: array
          items:
            $ref: '#/components/schemas/PlatformTransactionRequestState'
          description: If present, only transaction request state changes from the list will trigger notifications. If not present, all transaction request state changes will trigger notifications.
        txRequestTransactionStates:
          type: array
          items:
            $ref: '#/components/schemas/PlatformTransactionState'
          description: If present, only transaction request transaction state changes from the list will trigger notifications. If not present, all transaction request transaction state changes will trigger notifications.
        identityStatus:
          type: array
          items:
            $ref: '#/components/schemas/IdentityStatus'
          description: If present, only identity status changes from the list will trigger notifications. If not present, all identity status changes will trigger notifications.
        userKycState:
          type: array
          items:
            $ref: '#/components/schemas/PlatformVerifiedKycState'
          description: If present, only user kyc state changes from the list will trigger notifications. If not present, all kyc state changes will trigger notifications.
        enterpriseKycState:
          type: array
          items:
            $ref: '#/components/schemas/PlatformVerifiedKycState'
          description: 'If present, only enterprise kyc state changes from the list will trigger notifications. If not present, all kyc state changes will trigger notifications.      '
      required:
        - url
    Policy:
      title: Policy
      type: object
      properties:
        date:
          oneOf:
            - type: string
              format: date-time
              title: ISO Date String
            - type: string
              format: date
              title: Date String
          format: date-time
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        latest:
          type: boolean
        version:
          type: number
        enterpriseId:
          type: string
        label:
          type: string
        rules:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                $ref: '#/components/schemas/ApiRuleType'
              action:
                allOf:
                  - $ref: '#/components/schemas/PolicyRuleAction'
                description: What happens when this rule is triggered
              latest:
                type: boolean
              version:
                type: number
              lockDate:
                type: string
                description: The time at which this rule becomes immutable
                format: date-time
                title: ISO Date String
              mutabilityConstraint:
                allOf:
                  - $ref: '#/components/schemas/MutabilityConstraint'
                description: Specifies whether a BitGo admin can change "lockDate" * "managed" - Not locked, but requires approval from a BitGo admin to change * "permanent" - "lockDate" cannot be changed * "sticky" - Not included in bulk unlock, but "lockDate" can be individually changed
              coin:
                $ref: '#/components/schemas/CoinString'
              condition:
                allOf:
                  - $ref: '#/components/schemas/Condition'
                description: Parameters for the type
            required:
              - id
              - type
              - action
        walletId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
      required:
        - date
        - id
        - latest
        - version
    Policy1:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        date:
          type: string
          format: date-time
        label:
          type: string
        latest:
          type: boolean
        rules:
          type: array
          items:
            $ref: '#/components/schemas/PolicyRule'
        version:
          type: integer
      required:
        - id
        - latest
        - rules
        - version
    PolicyActionParameters:
      title: PolicyActionParameters
      type: object
      properties:
        minRequired:
          type: string
          minLength: 1
        userIds:
          type: array
          items:
            type: string
            minLength: 1
        initiatorIsAllowedToApprove:
          type: boolean
        webhookURL:
          type: string
          minLength: 1
        livenessCheckUser:
          $ref: '#/components/schemas/LivenessVerificationParameter'
        isFallback:
          type: boolean
        walletSubtype:
          $ref: '#/components/schemas/CustodialWalletSubType'
        userRoleIds:
          type: array
          items:
            type: string
            minLength: 1
    PolicyRule:
      type: object
      properties:
        id:
          type: string
        lockDate:
          type: string
          description: The time at which this rule becomes immutable
          format: date-time
        mutabilityConstraint:
          $ref: '#/components/schemas/MutabilityConstraint1'
        coin:
          $ref: '#/components/schemas/Coin'
        type:
          $ref: '#/components/schemas/PolicyRuleTriggers'
        condition:
          $ref: '#/components/schemas/PolicyRuleConditions'
        action:
          $ref: '#/components/schemas/PolicyRuleActions'
      required:
        - id
        - lockDate
        - type
        - action
    PolicyRule1:
      type: object
      description: |
        A Policy Rule, the combination of a Scope, a Touchpoint, Conditions, and Actions. It allows you to define what
        needs to happen (Actions) before a user can execute a sensitive operation (Touchpoint) on a Scope (e.g. a Wallet)
        depending on the specific details of the operation (Conditions). See Concepts.
      required:
        - id
        - uniqueId
        - name
        - status
        - adminOnly
        - touchpointId
        - touchpointLabel
        - scopeId
        - scopeLabel
        - clauses
        - filteringConditions
        - locked
        - lockType
        - createdBy
        - modifiedBy
        - createdDate
        - modifiedDate
      properties:
        id:
          type: string
          description: Id of the Policy Rule. This identifier is not unique in isolation, it must be paired with an specific Policy Rule Version number to uniquely identified a particular version of a Policy Rule. A UUID.
          example: 306258df-dcab-489e-a9fe-ff28ce9fa312
        uniqueId:
          type: string
          description: The uniqueId of the Policy Rule version. A UUID.
          example: cb4e0a0a-2768-4024-904a-178ca6d2cd54
        name:
          type: string
          description: Human readable name of the rule.
          example: My first policy rule
        status:
          type: string
          description: |
            Indicates if the Policy Rule is considered in Evaluations.

            * `ACTIVE` - Will be Evaluated.
            * `INACTIVE` - Will NOT be Evaluated.
            * `DENIED` - The requested policy rule change was Denied.
            * `PENDING_APPROVAL` - This version of the policy rule is Pending Approval before it can be activated.
            * `UNLOCK_PENDING` - This version of the policy rule is created when a request to unlock a policy is initiated.
          enum:
            - ACTIVE
            - INACTIVE
            - DENIED
            - PENDING_APPROVAL
            - UNLOCK_PENDING
          example: ACTIVE
        version:
          type: integer
          description: The Policy Rule Version, an integer that is incremented each time the Policy Rule changes.
          default: 1
          example: 1
        adminOnly:
          type: boolean
          description: true, if the Policy Rule is a BitGo internal rule. Typically, this allows setting Global Policy Rules across enterprises.
          example: false
        touchpointId:
          type: string
          description: The id of the Touchpoint associated with the Policy Rule. A UUID.
          example: 0a244ae3-26cf-48ed-9854-edd5b9751f3e
        touchpointLabel:
          type: string
          description: Label of the Touchpoint associated with the Policy Rule. For example the Transfer from a Wallet Touchpoint.
          example: Transfer from a Wallet
        scopeId:
          type: string
          description: The id of the Scope associated with the Policy Rule. A UUID.
          example: 08a3f714-c330-41e6-bd83-bad3a8d37188
        scopeLabel:
          type: string
          description: Label of the Scope associated with the Policy Rule. For example the All Wallets Scope.
          example: All Wallets
        clauses:
          type: array
          description: |
            List of Policy Rule Clauses: a combination of Conditions and Actions.
          items:
            $ref: '#/components/schemas/Clause'
        filteringConditions:
          type: array
          description: List of Filtering Conditions that must trigger for this Policy Rule to be Evaluated.
          items:
            anyOf:
              - $ref: '#/components/schemas/WalletTypeFilteringCondition'
              - $ref: '#/components/schemas/WalletIdsFilteringCondition'
              - $ref: '#/components/schemas/WalletAllFilteringCondition'
        locked:
          type: boolean
          description: true, if the Policy Rule is locked, false otherwise.
          example: false
        lockType:
          type: string
          description: |
            Indicates how the Policy Rule is locked.

            * `LOCK_AFTER_DATE` - Will lock after the lockDate set on the Policy Rule.
            * `PERMANENT` - Is permanently locked.
          enum:
            - LOCK_AFTER_DATE
            - PERMANENT
          example: PERMANENT
        lockDate:
          type: string
          description: |
            The date after which the Policy Rule will be locked. Only applicable if the Policy Rule is locked with
            `LOCK_AFTER_DATE`.
          format: date-time
          example: '2023-11-13T14:49:48.830522Z'
        enterpriseId:
          type: string
          description: The id of the Enterprise this Policy Rule belongs to.
          example: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        lastTriggeredDate:
          type: string
          description: |
            The date when the Policy Rule was last triggered. Only applicable if the Policy Rule is locked with
            `LOCK_AFTER_DATE`.
          format: date-time
          example: '2023-11-13T14:49:48.830522Z'
        lastTriggeredEvaluationId:
          type: string
          description: |
            The id of the Evaluation that last triggered the Policy Rule. A UUID.
          example: 306258df-dcab-489e-a9fe-ff28ce9fa312
        createdBy:
          type: string
          description: The id of the user who created the Policy Rule or the string \"BitGo\".
          example: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        modifiedBy:
          type: string
          description: The id of the user who last modified the Policy Rule or the string \"BitGo\".
          example: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        createdDate:
          type: string
          description: The date when the Policy Rule was created. A timestamp.
          format: date-time
          example: '2023-11-13T14:49:48.830522Z'
        modifiedDate:
          type: string
          description: The date when the Policy Rule was last modified. A timestamp.
          format: date-time
          example: '2023-11-13T14:49:48.830522Z'
        lockModifiedBy:
          type: string
          description: The id of the user who last modified the lock of the Policy Rule.
          example: 5d1a5f2c8f0a9c001a5f2c8f0ad00000
        evaluationId:
          type: string
          description: |
            The id of the Evaluation that was done when this Policy Rule version was requested to be created, modified
            or deleted. A UUID.
          example: 306258df-dcab-489e-a9fe-ff28ce9fa312
    PolicyRuleAction:
      title: PolicyRuleAction
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/ActionType'
          description: The type of the action
        userIds:
          type: array
          items:
            type: string
            description: The user IDs associated with the action
      required:
        - type
    PolicyRuleActions:
      description: What happens when this rule is triggered
      type: object
      properties:
        type:
          type: string
          enum:
            - deny
            - getApproval
            - getFinalApproval
            - getCustodianApproval
            - getIdVerification
        userIds:
          description: For a final approver action, who can approve
          type: array
          items:
            $ref: '#/components/schemas/Id'
      required:
        - type
    PolicyRuleConditions:
      title: Type
      description: Parameters for the type
      oneOf:
        - title: Velocity limit
          type: object
          properties:
            amountString:
              $ref: '#/components/schemas/IntegerString'
            timeWindow:
              type: integer
              minimum: 0
              maximum: 2678400
              description: Time window in seconds for a velocity limit, between 1 and a month
        - title: USD velocity limit
          type: object
          properties:
            amountString:
              $ref: '#/components/schemas/IntegerString'
            timeWindow:
              type: integer
              minimum: 0
              maximum: 2678400
              description: Time window in seconds for a velocity limit, between 1 and 30 days
        - title: Whitelist
          type: object
          properties:
            addresses:
              description: Addresses allowed/restricted for a whitelist/blacklist
              type: array
              items:
                oneOf:
                  - type: string
                  - $ref: '#/components/schemas/Id'
        - title: Advanced whitelist
          type: object
          properties:
            entries:
              description: Entries specifying which addresses/ wallets/ enterprises are on the whitelist
              type: array
              items:
                $ref: '#/components/schemas/AdvancedListRuleEntry1'
        - title: Webhook
          type: object
          properties:
            url:
              type: string
              description: the url to query for the webhook
    PolicyRuleTriggers:
      type: string
      enum:
        - advancedWhitelist
        - allTx
        - bitcoinAddressWhitelist
        - coinAddressWhitelist
        - coinAddressBlacklist
        - transactionLimit
        - velocityLimit
        - webhook
      description: What causes this rule to trigger
    PolicyRuleUpdateCondition:
      title: PolicyRuleUpdateCondition
      oneOf:
        - $ref: '#/components/schemas/AddressListRuleUpdateCondition'
        - $ref: '#/components/schemas/AdvancedListRuleUpdateCondition'
        - $ref: '#/components/schemas/TxUsdThresholdRuleCondition'
        - $ref: '#/components/schemas/LimitRuleCondition'
        - $ref: '#/components/schemas/WebhookRuleCondition'
    PolicyRuleUpdateConditions:
      title: Type
      description: Parameters for the type
      anyOf:
        - title: Advanced whitelist
          type: object
          properties:
            add:
              $ref: '#/components/schemas/AdvancedListRuleEntry1'
          required:
            - add
        - title: Whitelist
          type: object
          properties:
            add:
              description: Address to add to the list
              oneOf:
                - type: string
                - $ref: '#/components/schemas/Id'
            metaData:
              type: object
              description: An object with arbitrary metadata about the added address.
              properties:
                addedBy:
                  type: string
                  description: Text indicating who added this address to the whitelist
              additionalProperties: true
          required:
            - add
        - title: Remove address from whitelist
          type: object
          properties:
            remove:
              description: Address to remove from the list
              oneOf:
                - type: string
                - $ref: '#/components/schemas/Id'
                - $ref: '#/components/schemas/AdvancedListRuleEntry1'
          required:
            - remove
        - type: object
    PolicyRuleVersions:
      type: object
      description: |
        description: All versions of a policy rule. Not paginated.
      required:
        - versions
      properties:
        versions:
          type: array
          description: |
            List of policy rule versions. The list is sorted by version number in descending order, but rules with a
            null version, such as those in pending approval or denied, appear first.
          items:
            $ref: '#/components/schemas/PolicyRule1'
    PolicyRulesResults:
      description: Paginated list of Policy Rules.
      allOf:
        - $ref: '#/components/schemas/PaginatedResultsWithNextBatchPrevId'
        - type: object
          properties:
            rules:
              type: array
              description: |
                A list of Policy Rules matching the search criteria.
              items:
                $ref: '#/components/schemas/PolicyRule1'
    PolyxBaseIntent:
      title: POLYX Base Intent
      allOf:
        - type: object
          properties:
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - recipients
        - $ref: '#/components/schemas/BaseStakeIntent'
        - $ref: '#/components/schemas/SubstrateAccountBaseBuildOptions'
    PolyxCreateAccountIntent:
      title: POLYX Create Account Intent
      allOf:
        - type: object
          properties:
            memo:
              $ref: '#/components/schemas/optionalString'
            index:
              $ref: '#/components/schemas/optionalNumber'
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
        - $ref: '#/components/schemas/AccountBaseCreateAccountIntent'
        - $ref: '#/components/schemas/SubstrateAccountBaseBuildOptions'
    PolyxStakeIntent:
      title: POLYX Stake Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - stake
            addToStake:
              $ref: '#/components/schemas/optionalBoolean'
          required:
            - intentType
        - $ref: '#/components/schemas/PolyxBaseIntent'
    PolyxUnstakeIntent:
      title: POLYX Unstake Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - unstake
            stopStaking:
              $ref: '#/components/schemas/optionalBoolean'
          required:
            - intentType
        - $ref: '#/components/schemas/PolyxBaseIntent'
    PolyxWithdrawIntent:
      title: POLYX Withdraw Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - claim
          required:
            - intentType
        - $ref: '#/components/schemas/PolyxBaseIntent'
    PositiveAllocationAmount:
      title: PositiveAllocationAmount
      oneOf:
        - $ref: '#/components/schemas/PositiveCurrencyAmount'
        - $ref: '#/components/schemas/PositiveBigNumberCurrencyAmount'
    PositiveBNCurrencyAmount:
      title: PositiveBNCurrencyAmount
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/BNSupportedCurrency'
        quantity:
          type: string
      required:
        - currency
        - quantity
    PositiveBigNumberCurrencyAmount:
      title: PositiveBigNumberCurrencyAmount
      type: object
      properties:
        currency:
          type: string
          minLength: 1
        quantity:
          type: string
      required:
        - currency
        - quantity
    PositiveCurrencyAmount:
      title: PositiveCurrencyAmount
      type: object
      properties:
        currency:
          type: string
          minLength: 1
        quantity:
          type: string
      required:
        - currency
        - quantity
    PositivePartnerCurrencyAmount:
      title: PositivePartnerCurrencyAmount
      type: object
      properties:
        currency:
          type: string
          minLength: 1
        quantity:
          type: string
      required:
        - currency
        - quantity
    PostIdentityDocumentCreateResponse:
      title: PostIdentityDocumentCreateResponse
      type: object
      properties:
        id:
          type: string
          title: uuid
        status:
          type: string
          minLength: 1
        selectedIdClass:
          $ref: '#/components/schemas/PersonaIdClass'
        fileUploads:
          type: array
          items:
            type: object
            properties:
              fileName:
                type: string
                minLength: 1
              fileSize:
                type: number
              uploadStatus:
                type: string
                minLength: 1
              documentType:
                $ref: '#/components/schemas/IdentityDocumentType'
            required:
              - fileName
              - fileSize
              - uploadStatus
              - documentType
      required:
        - id
        - status
        - selectedIdClass
        - fileUploads
    PricingTypeName:
      title: PricingTypeName
      type: string
      enum:
        - starter
        - growth
        - employee
        - FTX Retail
        - FTX Institutional
    PrimeTrade:
      required:
        - id
        - orderId
        - time
        - product
        - side
        - price
        - quoteQuantity
        - quantity
        - settled
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        time:
          type: string
          format: date-time
        product:
          type: string
          description: Product name e.g. BTC-USD
        side:
          $ref: '#/components/schemas/Side'
        price:
          type: string
          format: decimal
        quoteQuantity:
          type: string
          format: decimal
          description: Quote quantity, e.g. For BTC-USD product, 100.50 USD
        quantity:
          type: string
          format: decimal
          description: Base quantity, e.g. For BTC-USD product, 0.0045 BTC
        settled:
          type: boolean
      example:
        id: 7e0c768e-2d16-4c1e-b39d-06fa20009397
        orderId: d50ec984-77a8-460a-b958-66f114b0de9b
        time: {}
        side: buy
        product: BTC-USD
        quoteQuantity: '100.50'
        price: '22333.33'
        quantity: '0.0045'
        settled: true
    Product:
      required:
        - baseCurrencyId
        - baseCurrency
        - baseMinSize
        - id
        - isTradeDisabled
        - isMarginTradeSupported
        - name
        - quoteCurrencyId
        - quoteCurrency
        - quoteIncrement
        - quoteMinSize
        - quoteMaxSize
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Product name e.g. BTC
        baseCurrencyId:
          type: string
          format: uuid
        baseCurrency:
          type: string
          description: Currency name e.g. BTC
        quoteCurrencyId:
          type: string
          format: uuid
        quoteCurrency:
          type: string
          description: Currency name e.g. USD
        baseMinSize:
          type: string
          format: decimal
        baseMaxSize:
          type: string
          format: decimal
        baseIncrement:
          type: string
          format: decimal
        quoteMinSize:
          type: string
          format: decimal
        quoteMaxSize:
          type: string
          format: decimal
        quoteIncrement:
          type: string
          format: decimal
        isTradeDisabled:
          type: boolean
        isMarginTradeSupported:
          type: boolean
          description: True if margin trading is supported for this product
      example:
        id: 86d09911-e58e-4f27-ac1f-91d5f9c79952
        name: BTC-USD
        baseCurrencyId: 6016e0a9-545a-45fb-8370-caab1680956a
        quoteCurrencyId: 7d5d1e8d-e6e1-4676-99af-190012515418
        baseCurrency: BTC
        quoteCurrency: USD
        baseMinSize: '0.001'
        baseMaxSize: '10000.00'
        quoteIncrement: '0.01'
    Products:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    ProofChain:
      title: ProofChain
      type: string
      enum:
        - BITCOIN
        - ETHEREUM
    ProofType:
      title: ProofType
      type: string
      enum:
        - BITCOIN_P2SH
        - BITCOIN_P2SH_P2WSH
        - BITCOIN_P2WSH
        - ETHEREUM_CONTRACT
    PsbtHex:
      type: string
      description: BIP174 serialization of a PSBT
      example: 70736274ff0100530100000001ccf3d1b853dcff06a939afef91d8b178d74028516bb831d77fcfd5b1ce6715f00000000000ffffffff01f0b9f5050000000017a914567cd7b44f9f3a07c3138f37bf984b60fbbaf24387000000004f010488b21e0000000000000000003a922e29f0c8eb0db2a60484cbdcb631f6b107c9caae3ffdcf3e7d2ec1f6bcd00312148715f361dab685a669d42431e5d6d3f973404dab9c9fd1b950b279ad763404cc18ae084f010488b21e0000000000000000006d1d656d3ddd91c194c04565a3603702a21016ced14a265f38982d6275e67b6403d3bac2313a7c6b21cbb11b14b0d10341f922c0a403a8bd8c87f0dc820f35af6e04f65cd8694f010488b21e000000000000000000cb04fd63ab34d90fe6466b880e2a02ccf8a863374312991af8911b1aaab443340336ef228ffe9b8efffba052c32d334660dd1f8366cf8fe44ae5aa672b6b62909504f2ef0389000100c00100000000010101010101010101010101010101010101010101010101010101010101010101010000000000ffffffff0100e1f5050000000017a914d909474404c124a3d04c3fbff61faa49cf43c58b87024730440220360d495738071ed6930084713724262ef55d710e06d85f90b56727ab83c91b5702200ae452a812717ef0ac8866989ffc963d88c14f9694fa57ef046dd699bea1d5da01210247496797efe8b56780cd9bee19ac3d916624829cacd3f1236fa608000193e54d0000000001012000e1f5050000000017a914d909474404c124a3d04c3fbff61faa49cf43c58b87010469522102cc4d0fa411cac244486f8eb2c08e035ff7410f460a359ca7f8810991bd3b42092102d72fd0d0d90293434ad5fca160f278e03c614497aa4e425cf454e2c1330f96ab210344d884136df550202865ffbc6218c7f9c88fe6ce39c945798190badb38a752f153ae220602cc4d0fa411cac244486f8eb2c08e035ff7410f460a359ca7f8810991bd3b420914f2ef038900000000000000000000000000000000220602d72fd0d0d90293434ad5fca160f278e03c614497aa4e425cf454e2c1330f96ab14cc18ae080000000000000000000000000000000022060344d884136df550202865ffbc6218c7f9c88fe6ce39c945798190badb38a752f114f65cd8690000000000000000000000000000000000010069522103f6f40764bd5d63f200a2778883acf75e96f15095c998263c087270d0c97e7e7f21035ffb7abc70159e0469f4b989a6d5e1785a2904169ff050b2f468fe5d3d5dbbf22103e1524d7f6fc57ab3eacbb659b787106780a475d1db483952c2310b7e9a38975b53ae2202035ffb7abc70159e0469f4b989a6d5e1785a2904169ff050b2f468fe5d3d5dbbf214cc18ae0800000000000000000100000000000000220203e1524d7f6fc57ab3eacbb659b787106780a475d1db483952c2310b7e9a38975b14f65cd86900000000000000000100000000000000220203f6f40764bd5d63f200a2778883acf75e96f15095c998263c087270d0c97e7e7f14f2ef03890000000000000000010000000000000000
    Pub:
      type: string
      description: public part of a key pair
      example: xpub661MyMwAqRbcGMVhmc7wqQRYMtcX9LAvSj1pjB213y5TsrkV2uuzJjWnjBrT1FUeNWGPjaVm5p7o6jdNcQJrV1cy3a1R8NQ9m7LuYKA8RpH
    PutIdentityDocumentUpdateResponse:
      title: PutIdentityDocumentUpdateResponse
      type: object
      properties:
        id:
          type: string
          title: uuid
        status:
          type: string
          minLength: 1
        selectedIdClass:
          $ref: '#/components/schemas/PersonaIdClass'
      required:
        - id
        - status
        - selectedIdClass
    RecipientAmount:
      oneOf:
        - type: string
          pattern: ^(-?\d+|max)$
          example: '2000000'
        - type: integer
    RecipientEntry:
      title: RecipientEntry
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        amount:
          $ref: '#/components/schemas/Amount'
        data:
          $ref: '#/components/schemas/optionalString'
      required:
        - address
        - amount
    RecipientEntry1:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/TxAddress'
        amount:
          $ref: '#/components/schemas/Amount2'
        data:
          type: string
        tokenData:
          $ref: '#/components/schemas/TokenData1'
      required:
        - address
        - amount
    RecipientTokenData:
      type: object
      properties:
        tokenName:
          type: string
          description: Name of token, as represented in BitGoJS Statics package.
        tokenContractAddress:
          type: string
          description: Address of token or smart contract. Required if token is unsupported by BitGo. Not required if passing "tokenName".
        decimalPlaces:
          type: integer
          description: Relevant for fungible tokens. Not required if passing "tokenName". Defaults to smallest base unit.
        tokenType:
          type: string
          description: Token standard
          enum:
            - ERC20
            - ERC721
            - ERC1155
        tokenId:
          type: string
          description: ID of token to use when constructing transaction or calldata. Required for NFTs.
        tokenQuantity:
          type: string
          description: Quantity of token to use when constructing calldata (amount to transfer).
    RecoveryCodesResponse:
      title: RecoveryCodesResponse
      type: object
      properties:
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        created:
          type: string
          description: ISO 8601 string representation of date
          example: '2019-05-02T15:27:35.773Z'
          format: date-time
          title: ISO Date String
        codes:
          type: array
          minItems: 10
          maxItems: 10
          items:
            type: object
            properties:
              code:
                type: string
                description: The recovery code
                example: uFN4wrsjdpK3
              isActive:
                type: boolean
                description: Whether the recovery code is active
                example: true
            required:
              - code
              - isActive
      required:
        - id
        - created
        - codes
    ReferralCodeString:
      title: ReferralCodeString
      type: string
      description: An Enterprise Referral Code
    Referrer:
      title: Referrer
      type: object
      properties:
        campaign:
          nullable: true
          type: string
        source:
          nullable: true
          type: string
    RegionalFeatures:
      title: RegionalFeatures
      type: object
      properties:
        trading:
          type: boolean
        custody:
          type: boolean
        lending:
          type: boolean
        borrowing:
          type: boolean
      required:
        - trading
        - custody
        - lending
        - borrowing
    RejectReshare:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/Id'
      required:
        - userId
    ReportFormatType:
      title: ReportFormatType
      type: string
      enum:
        - csv
        - pdf
    ReportJSON:
      title: ReportJSON
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/ReportParams'
        - $ref: '#/components/schemas/GenericReportParamsJSON'
    ReportParams:
      title: ReportParams
      type: object
      properties:
        holdings:
          type: object
          description: Holdings report
          properties:
            byWallet:
              type: boolean
            enterprise:
              type: string
              description: ID of the enterprise
              example: 59cd72485007a239fb00282ed480da1f
              minLength: 1
              pattern: ^[0-9a-f]{32}$
            includeStaking:
              type: boolean
            snapshotDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
          required:
            - enterprise
            - snapshotDate
        transactions:
          type: object
          description: Transactions report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            endDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
            enterprise:
              $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
            isAddressReport:
              type: boolean
            isDetailed:
              type: boolean
            startDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
            wallets:
              type: array
              items:
                type: string
                minLength: 1
                example: 59cd72485007a239fb00282ed480da1f
            walletTypes:
              type: array
              items:
                type: string
                minLength: 1
          required:
            - endDate
            - enterprise
            - startDate
        quarterly:
          type: object
          description: Quarterly report
          properties:
            endDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
            enterprise:
              $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
            startDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
          required:
            - endDate
            - enterprise
            - startDate
        trades:
          type: object
          description: Trades report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            endDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
            enterprise:
              $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
            isFillsReport:
              type: boolean
            startDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
          required:
            - endDate
            - enterprise
            - startDate
        staking:
          type: object
          description: Staking report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            endDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
            enterprise:
              $ref: '#/components/schemas/EnterpriseIdNonEmptyString'
            isBalanceReport:
              type: boolean
            startDate:
              type: string
              description: Date of the snapshot
              format: date-time
              title: ISO Date String
            wallets:
              type: array
              items:
                type: string
                minLength: 1
                example: 59cd72485007a239fb00282ed480da1f
            walletTypes:
              type: array
              items:
                type: string
                minLength: 1
          required:
            - endDate
            - enterprise
            - startDate
        holdingsByAddress:
          type: object
          description: Address-level Holdings report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            enterprise:
              type: string
              minLength: 1
            snapshotDate:
              type: string
              format: date-time
              title: ISO Date String
            wallets:
              type: array
              items:
                type: string
                minLength: 1
                example: 59cd72485007a239fb00282ed480da1f
            walletTypes:
              type: array
              items:
                type: string
                minLength: 1
          required:
            - enterprise
            - snapshotDate
        organizationHoldings:
          type: object
          description: Organization-level Holdings report
          properties:
            byWallet:
              type: boolean
            enterprises:
              type: array
              items:
                type: string
                minLength: 1
            includeStaking:
              type: boolean
            organization:
              type: string
              minLength: 1
            snapshotDate:
              type: string
              format: date-time
              title: ISO Date String
          required:
            - organization
            - snapshotDate
        organizationTransactions:
          type: object
          description: Organization-level Transactions report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            endDate:
              type: string
              format: date-time
              title: ISO Date String
            enterprises:
              type: array
              items:
                type: string
                minLength: 1
            isAddressReport:
              type: boolean
            isDetailed:
              type: boolean
            organization:
              type: string
              minLength: 1
            startDate:
              type: string
              format: date-time
              title: ISO Date String
            wallets:
              type: array
              items:
                type: string
                minLength: 1
                example: 59cd72485007a239fb00282ed480da1f
            walletTypes:
              type: array
              items:
                type: string
                minLength: 1
          required:
            - endDate
            - organization
            - startDate
        organizationHoldingsByAddress:
          type: object
          description: Organization-level Holdings by Address report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            enterprises:
              type: array
              items:
                type: string
                minLength: 1
            organization:
              type: string
              minLength: 1
            snapshotDate:
              type: string
              format: date-time
              title: ISO Date String
            wallets:
              type: array
              items:
                type: string
                minLength: 1
                example: 59cd72485007a239fb00282ed480da1f
            walletTypes:
              type: array
              items:
                type: string
                minLength: 1
          required:
            - organization
            - snapshotDate
        organizationStaking:
          type: object
          description: Organization-level Staking report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            endDate:
              type: string
              format: date-time
              title: ISO Date String
            enterprises:
              type: array
              items:
                type: string
                minLength: 1
            isBalanceReport:
              type: boolean
            organization:
              type: string
              minLength: 1
            startDate:
              type: string
              format: date-time
              title: ISO Date String
            wallets:
              type: array
              items:
                type: string
                minLength: 1
                example: 59cd72485007a239fb00282ed480da1f
            walletTypes:
              type: array
              items:
                type: string
                minLength: 1
          required:
            - endDate
            - organization
            - startDate
        organizationTrades:
          type: object
          description: Organization-level Trades report
          properties:
            assets:
              type: array
              items:
                type: string
                minLength: 1
            endDate:
              type: string
              format: date-time
              title: ISO Date String
            enterprises:
              type: array
              items:
                type: string
                minLength: 1
            isFillsReport:
              type: boolean
            organization:
              type: string
              minLength: 1
            startDate:
              type: string
              format: date-time
              title: ISO Date String
          required:
            - endDate
            - organization
            - startDate
    ReportStatus1:
      title: ReportStatus
      type: string
      enum:
        - pending
        - processing
        - completed
        - failed
    ResendShareEmailResponse:
      type: object
      properties:
        resent:
          type: boolean
    ReservedUnspent:
      type: object
      description: a ReservedUnspent object
      properties:
        id:
          type: string
          description: The id of the unspent in the form <txid>:<tx_index>
          example: 003f688cc349f1fca8ac5ffa21671ca911b6ef351085c60733ed8c2ebf162cb8:2
        walletId:
          $ref: '#/components/schemas/Id'
        expireTime:
          type: string
          format: date-time
        userId:
          $ref: '#/components/schemas/Id'
      required:
        - id
        - walletId
        - expireTime
        - userId
    RoutingNumberString:
      title: RoutingNumberString
      type: string
    RuleAllFilteringCondition:
      title: All rules
      type: object
      description: Filter by all rules.
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - rule.all
          example: rule.all
        parameters:
          type: object
          description: Required data needed to evaluate the Filtering Condition.
          additionalProperties: true
    STXStakingOptions:
      title: STX
      type: object
      properties:
        contractName:
          type: string
          description: The STX staking contract name. Use pox-3.
          default: pox-3
        functionName:
          type: string
          description: STX staking contract function.
          oneOf:
            - type: string
              description: Function name used to delegate funds.
              default: delegate-stx
            - type: string
              description: Function name used to revoke delegated funds.
              default: revoke-delegate-stx
        functionArgs:
          type: array
          description: The 4 Objects are required and in the order expressed.
          items:
            anyOf:
              - title: uint128
                type: object
                properties:
                  type:
                    type: string
                    default: uint128
                    description: Type of argument. Use the default.
                  val:
                    type: string
                    description: Amount in micro-stx
              - title: principal
                type: object
                properties:
                  type:
                    type: string
                    default: principal
                    description: Type of argument. Use the default.
                  val:
                    type: string
                    description: Address of the validator
              - title: optional
                type: object
                properties:
                  type:
                    type: string
                    default: optional
                    description: Type of argument. Use the default.
                  val:
                    type: string
                    description: The number of cycles that the delegation will last. This is a mandatory field that must be greater than 1.
              - title: optional
                type: object
                properties:
                  type:
                    type: string
                    default: optional
                    description: Type of argument. Use the default.
                  val:
                    type: object
                    properties:
                      type:
                        type: string
                        default: tuple
                        description: Type of argument. Use the default.
                      val:
                        type: array
                        description: The 2 objects are required and in the order expressed.
                        items:
                          anyOf:
                            - title: hash
                              type: object
                              properties:
                                key:
                                  type: string
                                  default: hashbytes
                                  description: Type of argument. Use the default.
                                type:
                                  type: string
                                  default: buffer
                                  description: Type of argument. Use the default.
                                val:
                                  type: string
                                  description: The BTC Address hash.
                            - title: version
                              type: object
                              properties:
                                key:
                                  type: string
                                  default: version
                                  description: Type of argument. Use the default.
                                type:
                                  type: string
                                  default: buffer
                                  description: Type of argument. Use the default.
                                val:
                                  type: string
                                  description: The BTC Address version.
    Scope:
      type: array
      items:
        type: string
      example:
        - crypto_compare
        - user_manage
        - openid
        - profile
        - wallet_create
        - wallet_manage_all
        - wallet_approve_all
        - wallet_spend_all
        - wallet_edit_all
        - wallet_view_all
    ScopeConditionParameter:
      title: Scope
      type: object
      description: Defines the entities included in the velocity calculation.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
        - values
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - scope
          example: scope
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: scope
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Entities that will be included in the velocity calculation
        type:
          type: string
          description: Accepts only enumerated values as listed in the 'values' property of this condition.
          enum:
            - ENUMERATED
          example: ENUMERATED
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
        values:
          type: array
          description: A list of valid values, only values from this list will be accepted.
          items:
            anyOf:
              - $ref: '#/components/schemas/WalletValue'
              - $ref: '#/components/schemas/EnterpriseValue'
    SendLabel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        coin:
          $ref: '#/components/schemas/Coin'
        address:
          $ref: '#/components/schemas/AddressString3'
        enterpriseId:
          $ref: '#/components/schemas/Id'
        label:
          type: string
          maxLength: 250
      required:
        - id
        - coin
        - address
        - enterpriseId
        - label
    SendTransaction:
      title: Sent Transaction
      allOf:
        - $ref: '#/components/schemas/BuildParams'
        - type: object
          description: Include buildParams from the build request to be stored in case of rebuilding.
      type: object
      description: This endpoint broadcasts half-signed transactions.
      properties:
        comment:
          type: string
          description: An optional memo for the transaction.
          maxLength: 256
        halfSigned:
          type: object
          properties:
            txHex:
              type: string
          description: The half-signed transaction. The request must include this or a txHex.
        txHex:
          type: string
          description: The half-signed, serialized transaction hex. Alternative to sending halfSigned.
        sequenceId:
          type: string
          description: Your own unique ID
        videoApprovers:
          $ref: '#/components/schemas/VideoApprovers'
    SepaAccountResponseProps:
      title: SepaAccountResponseProps
      type: object
      properties:
        type:
          type: string
          enum:
            - sepa
        swiftCode:
          $ref: '#/components/schemas/SwiftCodeType'
        accountType:
          $ref: '#/components/schemas/OptionalAccountType'
      required:
        - type
        - swiftCode
        - accountType
    SepaBankAccountRequest:
      title: SepaBankAccountRequest
      description: Request schema for creating a SEPA bank account
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - sepa
              description: Must be 'sepa' for SEPA accounts
            swiftCode:
              type: string
              description: SWIFT/BIC code for the SEPA account
          required:
            - type
            - swiftCode
        - $ref: '#/components/schemas/BankAccountRequest1'
    SepaBankAccountResponse:
      title: SepaBankAccountResponse
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/SepaAccountResponseProps'
        - $ref: '#/components/schemas/BankAccountResponseProps'
    Session:
      type: object
      properties:
        created:
          type: string
          format: date-time
        expires:
          type: string
          format: date-time
        id:
          $ref: '#/components/schemas/Id'
        ip:
          allOf:
            - $ref: '#/components/schemas/Ip'
          description: IP address of the client that requested this access token
        ipRestrict:
          type: array
          items:
            type: string
            format: ipv4
          description: IP addresses of clients that are allowed to use this token
        origin:
          type: string
          example: test.bitgo.com
          description: BitGo environment that issued this token
        scope:
          allOf:
            - $ref: '#/components/schemas/Scope'
          description: Session permissions
        unlock:
          allOf:
            - $ref: '#/components/schemas/PlatformUnlock'
          description: The Unlock object, returned if this session is currently unlocked.
        user:
          $ref: '#/components/schemas/Id'
      required:
        - created
        - expires
        - id
        - origin
        - scope
        - user
    Session1:
      type: object
      properties:
        created:
          type: string
          format: date-time
        expires:
          type: string
          format: date-time
        id:
          $ref: '#/components/schemas/Id'
        ip:
          allOf:
            - $ref: '#/components/schemas/Ip'
          description: IP address of the client that requested this access token
        ipRestrict:
          type: array
          items:
            type: string
            format: ipv4
          description: IP addresses of clients that are allowed to use this token
        origin:
          type: string
          example: test.bitgo.com
          description: BitGo environment that issued this token
        scope:
          allOf:
            - $ref: '#/components/schemas/Scope'
          description: Session permissions
        unlock:
          allOf:
            - $ref: '#/components/schemas/Unlock1'
          description: The Unlock object, returned if this session is currently unlocked.
        user:
          $ref: '#/components/schemas/Id'
      required:
        - created
        - expires
        - id
        - origin
        - scope
        - user
    SettlementAmountsRecord:
      title: SettlementAmountsRecord
      oneOf:
        - $ref: '#/components/schemas/PartySettlementAmountsRecord'
        - $ref: '#/components/schemas/CounterpartyPartySettlementAmountsRecord'
    SettlementStatuses:
      title: SettlementStatuses
      type: string
      enum:
        - failed
        - completed
        - pending
        - rejected
    SettlementTransferStatus:
      title: SettlementTransferStatus
      type: string
      enum:
        - pending
        - pending_onchain
        - onchain_initiated
        - onchain_failed
        - completed
        - failed
        - rejected
        - disputed
        - pending_settlement_assignment
    SettlementTypes:
      title: SettlementTypes
      type: string
      enum:
        - onchain
        - offchain
    ShareType:
      title: ShareType
      type: string
      enum:
        - encryptedSignerShare
        - encryptedRShare
    ShareWalletRequest:
      type: object
      properties:
        permission:
          type: string
          description: |
            Comma-separated list of privileges for a wallet. Includes:

              - `admin` - Can manage wallet policies and users and approve or reject pending approvals.
              - `freeze` - Can freeze a wallet, disabling all withdrawals.
              - `spend` - Can initiate withdrawals and generate new receive addresses.
              - `trade` - Can initiate trades from a Go Account (`trading` wallet type).
              - `view` - Can view balances and transactions.

            Permissions don't overlap. Required parameter if 'reshare' is false.
          enum:
            - admin
            - spend
            - trade
            - view
          example: spend,view
        message:
          type: string
          description: User readable message to display to the share recipient
        reshare:
          type: boolean
          description: Flag for reinviting a user to the wallet. This is required if the invitee has already been invited to the wallet, but has changed their password and needs a new invite
        disableEmail:
          type: boolean
          description: Flag for disabling invite notification email
        user:
          $ref: '#/components/schemas/Id'
        keychain:
          $ref: '#/components/schemas/WalletShareKeychain'
        skipKeychain:
          type: boolean
          description: If true, allows creating wallet shares without a sharing a key (keychain) when the wallet is shared with spend permission.
      required:
        - user
    ShareWalletResponse:
      type: object
      description: Wallet share object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: Wallet share id
        coin:
          allOf:
            - $ref: '#/components/schemas/Coin'
          description: Coin of the wallet
        wallet:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: Wallet id
        walletLabel:
          $ref: '#/components/schemas/WalletLabel'
        fromUser:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: Id of the user sharing the wallet
        toUser:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: Id of the user receiving the share
        permissions:
          type: string
          allOf:
            - $ref: '#/components/schemas/WalletPermission'
        message:
          type: string
          description: Message for the user receiving the share
        state:
          type: string
          allOf:
            - $ref: '#/components/schemas/WalletShareState1'
          description: State of the share
        enterprise:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: If the wallet belongs to an enterprise, the id of that enterprise
        pendingApprovalId:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: If the share generated a pending approval, the id of that pending approval
        keychain:
          $ref: '#/components/schemas/WalletShareKeychain'
    ShortCountryCode:
      type: string
      description: Two-letter country code, as specified by ISO 3166-1 alpha-2
      minLength: 2
      maxLength: 2
      example: US
      enum:
        - AD
        - AE
        - AF
        - AG
        - AI
        - AL
        - AM
        - AO
        - AQ
        - AR
        - AS
        - AT
        - AU
        - AW
        - AX
        - AZ
        - BA
        - BB
        - BD
        - BE
        - BF
        - BG
        - BH
        - BI
        - BJ
        - BL
        - BM
        - BN
        - BO
        - BQ
        - BR
        - BS
        - BT
        - BV
        - BW
        - BY
        - BZ
        - CA
        - CC
        - CD
        - CF
        - CG
        - CH
        - CI
        - CK
        - CL
        - CM
        - CN
        - CO
        - CR
        - CU
        - CV
        - CW
        - CX
        - CY
        - CZ
        - DE
        - DJ
        - DK
        - DM
        - DO
        - DZ
        - EC
        - EE
        - EG
        - EH
        - ER
        - ES
        - ET
        - FI
        - FJ
        - FK
        - FM
        - FO
        - FR
        - GA
        - GB
        - GD
        - GE
        - GF
        - GG
        - GH
        - GI
        - GL
        - GM
        - GN
        - GP
        - GQ
        - GR
        - GS
        - GT
        - GU
        - GW
        - GY
        - HK
        - HM
        - HN
        - HR
        - HT
        - HU
        - ID
        - IE
        - IL
        - IM
        - IN
        - IO
        - IQ
        - IR
        - IS
        - IT
        - JE
        - JM
        - JO
        - JP
        - KE
        - KG
        - KH
        - KI
        - KM
        - KN
        - KP
        - KR
        - KW
        - KY
        - KZ
        - LA
        - LB
        - LC
        - LI
        - LK
        - LR
        - LS
        - LT
        - LU
        - LV
        - LY
        - MA
        - MC
        - MD
        - ME
        - MF
        - MG
        - MH
        - MK
        - ML
        - MM
        - MN
        - MO
        - MP
        - MQ
        - MR
        - MS
        - MT
        - MU
        - MV
        - MW
        - MX
        - MY
        - MZ
        - NA
        - NC
        - NE
        - NF
        - NG
        - NI
        - NL
        - 'NO'
        - NP
        - NR
        - NU
        - NZ
        - OM
        - PA
        - PE
        - PF
        - PG
        - PH
        - PK
        - PL
        - PM
        - PN
        - PR
        - PS
        - PT
        - PW
        - PY
        - QA
        - RE
        - RO
        - RS
        - RU
        - RW
        - SA
        - SB
        - SC
        - SD
        - SE
        - SG
        - SH
        - SI
        - SJ
        - SK
        - SL
        - SM
        - SN
        - SO
        - SR
        - SS
        - ST
        - SV
        - SX
        - SY
        - SZ
        - TC
        - TD
        - TF
        - TG
        - TH
        - TJ
        - TK
        - TL
        - TM
        - TN
        - TO
        - TR
        - TT
        - TV
        - TW
        - TZ
        - UA
        - UG
        - UM
        - US
        - UY
        - UZ
        - VA
        - VC
        - VE
        - VG
        - VI
        - VN
        - VU
        - WF
        - WS
        - YE
        - YT
        - ZA
        - ZM
        - ZW
    Side:
      description: Side of a trade, from the perspective of the requesting user
      type: string
      enum:
        - buy
        - sell
      example: buy
    SignMessageIntent:
      title: SignMessageIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - signMessage
            messageRaw:
              type: string
              description: A plain text message
              example: 'for EVM: test message'
            messageEncoded:
              allOf:
                - $ref: '#/components/schemas/optionalString'
              description: An encoded string
              example: 'for EVM: \x19Ethereum Signed Message:\n12test message'
            messageStandardType:
              allOf:
                - $ref: '#/components/schemas/optionalString'
              description: The type of message standard, e.g. 'EIP191', 'EIP712', 'CIP8' etc.
              example: 'for EVM: EIP191'
          required:
            - intentType
            - messageRaw
            - messageEncoded
            - messageStandardType
        - $ref: '#/components/schemas/BaseIntent'
    SignatureShare:
      type: object
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The source of the signature share.
        to:
          allOf:
            - $ref: '#/components/schemas/KeyShareSource'
          description: The recipient of the signature share.
        share:
          type: string
          description: The signature share.
      required:
        - from
        - to
        - share
    SignatureShareType:
      title: SignatureShareType
      type: string
      enum:
        - user
        - backup
        - bitgo
    SignatureShareWithoutVssProof:
      title: SignatureShareWithoutVssProof
      type: object
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/SignatureShareType'
          description: The source of the signature share.
        to:
          allOf:
            - $ref: '#/components/schemas/SignatureShareType'
          description: The recipient of the signature share.
        share:
          type: string
          description: The signature share
      required:
        - from
        - to
        - share
    SimulateEnterpriseWebhookResponseBody:
      title: SimulateEnterpriseWebhookResponseBody
      type: object
      properties:
        webhookNotifications:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              type:
                allOf:
                  - $ref: '#/components/schemas/WebhookType'
                description: Event type to listen to.
              wallet:
                type: string
                example: cold
              url:
                type: string
              hash:
                type: string
              coin:
                type: string
                description: A cryptocurrency or token ticker symbol.
                example: btc
              coinChain:
                type: string
              transfer:
                type: string
                example: receive
              state:
                allOf:
                  - $ref: '#/components/schemas/WebhookNotificationState'
                description: If "failed", webhook notification failed to connect with the target URL. If "new", webhook notification was newly generated, in response to an event. If "pending", webhook notification is awaiting processing by the webhook worker. If "processed", webhook notification successfully sent to target URL. If "unconfirmed", webhook notification is awaiting confirmation on the blockchain.
              simulation:
                type: boolean
              retries:
                type: number
              webhook:
                type: string
              updatedAt:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              nextAttempt:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              version:
                type: number
                example: 2
              allowBlockedHosts:
                type: boolean
              heightToConfirm:
                type: number
              payload:
                type: string
              response:
                type: object
                properties:
                  code:
                    oneOf:
                      - type: number
                      - type: string
                  type:
                    type: string
                  body:
                    type: string
                  error:
                    type: string
            required:
              - id
      required:
        - webhookNotifications
    SimulateOrganizationWebhookResponseBody:
      title: SimulateOrganizationWebhookResponseBody
      type: object
      properties:
        webhookNotifications:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              type:
                allOf:
                  - $ref: '#/components/schemas/WebhookType'
                description: Event type to listen to.
              wallet:
                type: string
                example: cold
              url:
                type: string
              hash:
                type: string
              coin:
                type: string
                description: A cryptocurrency or token ticker symbol.
                example: btc
              coinChain:
                type: string
              transfer:
                type: string
                example: receive
              state:
                allOf:
                  - $ref: '#/components/schemas/WebhookNotificationState'
                description: If "failed", webhook notification failed to connect with the target URL. If "new", webhook notification was newly generated, in response to an event. If "pending", webhook notification is awaiting processing by the webhook worker. If "processed", webhook notification successfully sent to target URL. If "unconfirmed", webhook notification is awaiting confirmation on the blockchain.
              simulation:
                type: boolean
              retries:
                type: number
              webhook:
                type: string
              updatedAt:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              nextAttempt:
                type: string
                example: 2021-01-01T00:00:00.000Z
                format: date-time
                title: ISO Date String
              version:
                type: number
                example: 2
              allowBlockedHosts:
                type: boolean
              heightToConfirm:
                type: number
              payload:
                type: string
              response:
                type: object
                properties:
                  code:
                    oneOf:
                      - type: number
                      - type: string
                  type:
                    type: string
                  body:
                    type: string
                  error:
                    type: string
            required:
              - id
      required:
        - webhookNotifications
    SimulateWalletWebhookRequestBody:
      oneOf:
        - title: Transfer
          type: object
          properties:
            transferId:
              allOf:
                - $ref: '#/components/schemas/Id'
              description: The ID of a transfer on the specified wallet. This must be provided if the webhook is of type `transfer`.
          required:
            - transferId
        - title: Pending Approval
          type: object
          properties:
            pendingApprovalId:
              allOf:
                - $ref: '#/components/schemas/Id'
              description: The ID of a pending approval on the specified wallet. This must be provided if the webhook is of type `pendingApproval`.
          required:
            - pendingApprovalId
        - title: Transaction request
          type: object
          properties:
            txRequestId:
              type: string
              description: The txRequestId of a transaction request on the specified wallet. This must be provided if the webhook is of type `txRequest` or `txRequestTransaction`.
          required:
            - txRequestId
        - title: Transaction hash
          type: object
          properties:
            txHash:
              type: string
              description: The txHash of a specific transaction for the specified coin. This must be provided if the webhook is of type `transaction` or `transaction_finality_on_l1`.
          required:
            - txHash
        - title: Use placeholder data
          type: object
          properties:
            usePlaceholderData:
              type: boolean
              description: Boolean to indicate that the simulated webhook should use generated placeholder data.
          required:
            - usePlaceholderData
    SingleBankAccountResponse:
      title: SingleBankAccountResponse
      description: Unified schema for a single bank account response
      allOf:
        - $ref: '#/components/schemas/BankAccountResponse1'
    SnowflakeReportType:
      title: SnowflakeReportType
      type: string
      enum:
        - holdings
        - transactions
        - quarterly
        - trades
        - staking
        - holdingsByAddress
        - organizationHoldings
        - organizationHoldingsByAddress
        - organizationTransactions
        - organizationTrades
        - organizationStaking
    SolAddress:
      title: Sol Address
      type: object
      properties:
        rootAddress:
          type: string
        minimumFunding:
          type: number
        pendingChainInitialization:
          type: boolean
        trustedTokens:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TrustedTokenState'
              - $ref: '#/components/schemas/Token'
        nonceExpiresAt:
          type: string
          format: date
          title: Date String
        nonceTxRequestid:
          type: string
        type:
          type: string
      required:
        - rootAddress
        - minimumFunding
        - pendingChainInitialization
        - trustedTokens
    SolAuthorizeIntent:
      title: SOL Authorize Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - authorize
            transactionMessage:
              type: string
            stakeAccount:
              type: string
            oldWithdrawPublicKey:
              type: string
            newWithdrawPublicKey:
              type: string
            lockupPublicKey:
              type: string
            nonceAccount:
              type: string
            nonceAuthority:
              type: string
            blockhash:
              type: string
          required:
            - intentType
            - transactionMessage
            - stakeAccount
            - oldWithdrawPublicKey
            - newWithdrawPublicKey
            - lockupPublicKey
            - nonceAccount
            - nonceAuthority
            - blockhash
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolBuildOptions:
      title: SolBuildOptions
      allOf:
        - type: object
          properties:
            memo:
              $ref: '#/components/schemas/optionalString'
          required:
            - memo
        - $ref: '#/components/schemas/AccountBaseBuildOptions'
    SolClaimIntent:
      title: SOL Claim Intent
      allOf:
        - type: object
          properties:
            stakingAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
          required:
            - stakingAddress
            - amount
        - $ref: '#/components/schemas/WithdrawIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolCloseAssociatedTokenAccountIntent:
      title: SOL Close Associated Token Account Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - closeAssociatedTokenAccount
            accountAddress:
              type: string
            destinationAddress:
              type: string
          required:
            - intentType
            - accountAddress
            - destinationAddress
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolConsolidateIntent:
      title: SOL Consolidate Intent
      allOf:
        - $ref: '#/components/schemas/AccountBaseConsolidateIntent'
    SolCreateAssociatedTokenAccountIntent:
      title: SOL Create Associated Token Account Intent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/EnableTokenIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolCustomTxIntent:
      title: SOL Custom Transaction Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - customTx
            solInstructions:
              type: array
              items:
                type: object
                properties:
                  programId:
                    type: string
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        pubkey:
                          type: string
                        isSigner:
                          type: boolean
                        isWritable:
                          type: boolean
                      required:
                        - pubkey
                        - isSigner
                        - isWritable
                  data:
                    type: string
                required:
                  - programId
                  - keys
                  - data
          required:
            - intentType
            - solInstructions
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolDeactivateIntent:
      title: SOL Deactivate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - deactivate
            stakingAddresses:
              $ref: '#/components/schemas/optionalStringArray'
            stakingAddress:
              $ref: '#/components/schemas/optionalString'
          required:
            - intentType
            - stakingAddresses
            - stakingAddress
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolDelegateIntent:
      title: SOL Delegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - delegate
            validatorAddress:
              type: string
            stakingAddresses:
              $ref: '#/components/schemas/optionalStringArray'
            stakingAddress:
              $ref: '#/components/schemas/optionalString'
          required:
            - intentType
            - validatorAddress
            - stakingAddresses
            - stakingAddress
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolGoUnstakeIntent:
      title: SolGoUnstakeIntent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/GoUnstakeIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolPaymentIntent:
      title: SolPaymentIntent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/PaymentIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolStakeIntent:
      title: SOL Stake Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            isMarinade:
              type: boolean
              deprecated: true
            stakingType:
              type: string
              enum:
                - NATIVE
                - MARINADE
                - JITO
          required:
            - validatorAddress
            - amount
            - stakingType
        - $ref: '#/components/schemas/StakeIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolStakeIntent1:
      title: SOL Stake Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount1'
          required:
            - validatorAddress
            - amount
        - $ref: '#/components/schemas/StakeIntent1'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolStakingDelegation:
      title: SOL
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
    SolStakingRequest:
      title: SOL
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/SolStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/SolStakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
    SolStakingRequestPOSTBody:
      title: SOL stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '1000'
        validator:
          description: The validator to delegate to.
          type: string
          example: HimWQUK61d9wxhw7EYu9jUje7xQiDs4jKexaTSvuCmXE
      required:
        - validator
    SolStakingRequestWithTransactions:
      title: SOL
      allOf:
        - $ref: '#/components/schemas/SolStakingRequest'
        - type: object
          properties:
            transactions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/SolStakingTransaction'
    SolStakingTransaction:
      allOf:
        - $ref: '#/components/schemas/StakingTransaction'
      type: object
    SolUnStakingRequestPOSTBody:
      title: SOL unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
      required:
        - type
    SolUnstakeIntent:
      title: SOL Unstake Intent
      allOf:
        - type: object
          properties:
            stakingAddress:
              type: string
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
            remainingStakingAmount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
            isMarinade:
              type: boolean
              deprecated: true
            stakingType:
              type: string
              enum:
                - NATIVE
                - MARINADE
                - JITO
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
          required:
            - stakingAddress
        - $ref: '#/components/schemas/UnstakeIntent'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolUnstakeIntent1:
      title: SOL Unstake Intent
      allOf:
        - type: object
          properties:
            stakingAddress:
              type: string
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
            remainingStakingAmount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
          required:
            - stakingAddress
        - $ref: '#/components/schemas/UnstakeIntent1'
        - $ref: '#/components/schemas/SolBuildOptions'
    SolWallet:
      title: Sol Wallet
      type: object
      properties:
        pendingChainInitialization:
          type: boolean
        minimumFunding:
          type: number
        trustedTokens:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TrustedTokenState'
              - $ref: '#/components/schemas/Token'
        rootAddress:
          type: string
        nonceAddress:
          type: string
        lastBlockHash:
          type: string
        lastChainIndex: {}
        nonceExpiresAt:
          type: string
          format: date
          title: Date String
        nonceTxRequestId:
          type: string
      required:
        - pendingChainInitialization
        - minimumFunding
        - trustedTokens
    SolvencyData:
      title: SolvencyData
      type: object
      description: 'Solvency data schema consists of: - assets: array of supported asset symbols - liabilities: array of total liabilities for each asset - reserves: array of total reserves for each asset - ratios: ratio of reserves to liabilities for each asset'
      properties:
        liabilities:
          $ref: '#/components/schemas/BalancesCodec'
        reserves:
          $ref: '#/components/schemas/BalancesCodec'
        ratios:
          type: array
          items:
            type: number
      required:
        - liabilities
        - reserves
        - ratios
    SpendingLimits:
      type: object
      additionalProperties:
        type: object
        properties:
          txCount:
            type: integer
          txValue:
            type: integer
          txValueLimit:
            type: number
      example:
        btc:
          txCount: 1
          txValue: 0
          txValueLimit: 100000000
        eth:
          txCount: 1
          txValue: 0
          txValueLimit: 50000000000
    StacksAddress:
      title: Stacks Address
      type: object
      properties:
        baseAddress:
          type: string
        memoId:
          type: string
      required:
        - baseAddress
        - memoId
    StacksWallet:
      title: Stacks Wallet
      type: object
      properties:
        baseAddress:
          type: string
        feeAddress:
          type: string
        lastNonce:
          type: number
        addressCount:
          type: number
    StakeClaimRewardsIntent:
      title: StakeClaimRewardsIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - stakeClaimRewards
            amount:
              $ref: '#/components/schemas/Amount'
          required:
            - intentType
            - amount
        - $ref: '#/components/schemas/BaseStakeIntent'
    StakeIntent:
      title: StakeIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - stake
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent'
    StakeIntent1:
      title: StakeIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - stake
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent1'
    StakeIntent2:
      allOf:
        - $ref: '#/components/schemas/BaseStakeIntent2'
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - stake
          required:
            - intentType
    StakeSwitchValidatorIntent:
      title: StakeSwitchValidatorIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - switchValidator
            amount:
              $ref: '#/components/schemas/Amount'
            validatorAddress:
              type: string
            destValidatorAddress:
              type: string
          required:
            - intentType
            - amount
            - validatorAddress
            - destValidatorAddress
        - $ref: '#/components/schemas/BaseStakeIntent'
    StakeableCoins:
      type: object
      properties:
        symbol:
          type: string
        baseUnit:
          type: string
        isToken:
          type: boolean
        isTss:
          type: boolean
        isMultiSig:
          type: boolean
        l1Chain:
          type: string
        disclaimer:
          $ref: '#/components/schemas/DisclaimerAttributes'
    StakeableCoinsResult:
      title: Stakeable coins
      type: object
      properties:
        coins:
          type: array
          items:
            $ref: '#/components/schemas/StakeableCoins'
        page:
          type: integer
        totalPages:
          type: integer
        totalElements:
          type: integer
    StakingDelegation:
      type: object
      properties:
        id:
          description: The staking request ID.
          type: string
        coin:
          description: The staking asset.
          type: string
        walletId:
          description: The ID of the wallet that the delegation is tied to.
          type: string
        delegationAddress:
          description: The delegation address.
          type: string
        withdrawalAddress:
          description: The withdrawal address.
          type: string
        delegated:
          description: The delegation amount.
          type: string
        status:
          description: The status of the delegation.
          type: string
        rewards:
          description: The amount of rewards received over the lifetime.
          type: string
        lockedRewards:
          description: The amount of locked rewards received.
          type: string
        pendingUnstake:
          description: The amount that is pending unstake.
          type: string
        pendingStake:
          description: The amount that is pending stake.
          type: string
        apy:
          description: The estimated reward APY or APR if rewards are not compounding.
          type: string
        unstakingFee:
          description: The total fees needed in the wallet to unstake an amount from the delegation.
          type: string
        unstakingMin:
          description: The minimum amount needed to unstake from the delegation.
          type: string
        properties:
          allOf:
            - $ref: '#/components/schemas/StakingDelegationProperties'
          type: object
        rewardCoin:
          description: The coin in which rewards will be received.
          type: string
        endTime:
          description: The timestamp when the staking position expires, at which point it will either be unstaked automatically or become available for manual unstaking.
          type: string
    StakingDelegationProperties:
      type: object
      properties:
        delegationCycle:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The number of cycles this delegation will be active.
        endBurnBlockHeight:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The end burn block height for this delegation.
        expireAt:
          description: The staking expiration date.
          type: string
          format: date-time
          example: '2025-01-31T00:00:00.000Z'
        rewardWalletId:
          description: The ID of the wallet where rewards will be received.
          type: string
    StakingDisclaimerAttributes:
      type: object
      properties:
        info:
          description: Disclaimer info
          type: string
        transactionsNeeded:
          description: The number of transactions needed for a staking request.
          type: integer
    StakingEnterprise:
      type: object
      properties:
        enterpriseId:
          description: The ID of the enterprise where the the staking request was created from.
          type: string
        coin:
          description: The staking asset.
          type: string
        delegated:
          description: The delegated staked amount in base units.
          type: string
        rewards:
          description: The reward accrual amount in base units.
          type: string
        apy:
          description: Reward accrual annual percentage rate.  Estimated yearly based on the last 7 days.  Same methodology as leading beacon chain validator aggregators (e.g. https://beaconcha.in/validators)
          type: string
    StakingError:
      title: Staking Error
      type: object
      properties:
        error:
          type: string
        errorName:
          type: string
        reqId:
          type: string
        context:
          type: object
    StakingLicense:
      type: object
      properties:
        coin:
          description: The name of the coin.
          type: string
        fee:
          description: The corresponding fee for coin in current license.
          type: string
    StakingLicenseResponse:
      type: object
      properties:
        enterpriseId:
          type: string
          description: The enterprise ID.
        defaultFee:
          type: string
          description: The default fee for the asset.
        fees:
          type: array
          minItems: 1
          maxItems: 500
          items:
            allOf:
              - $ref: '#/components/schemas/StakingLicense'
              - type: object
    StakingPartneredValidator:
      type: object
      properties:
        delegationAddress:
          description: The delegation address.
          type: string
        type:
          description: The validator provider.
          type: string
        totalStaked:
          description: The total staked amount in base units.
          type: string
        rewards:
          description: The reward accrual amount in base units.
          type: string
        apy:
          description: The annual percentage yield.
          type: string
        commission:
          description: The fee charged by the validator as a percentage.
          type: string
        coin:
          description: The staked coin.
          type: string
        avses:
          description: The validator's actively validated services (AVS) for restaking.
          type: array
          items:
            type: string
        historicRatePerformance:
          description: The validator's historical reward rate for the last 30 days.
          type: string
    StakingPartneredValidatorsResponse:
      type: object
      properties:
        validators:
          type: array
          minItems: 1
          maxItems: 500
          items:
            allOf:
              - $ref: '#/components/schemas/StakingPartneredValidator'
              - type: object
        page:
          type: integer
          description: The page number for paging purposes.
        totalPages:
          type: integer
          description: The total number of pages for paging purposes.
        totalElements:
          type: integer
          description: The number of elements per page used for paging purposes.
    StakingPermissionAttributes:
      type: object
      properties:
        enabled:
          description: If the wallet has staking request submission permission.
          type: string
        disabledReason:
          description: The reason that staking request submission has been disabled.
          type: string
    StakingRequest:
      title: Staking Request
      type: object
      properties:
        id:
          description: Staking request ID.
          type: string
        clientId:
          description: Optional clientId if passed into the request.
          type: string
        requestingUserId:
          description: The ID of the user that created the staking request.
          type: string
        enterpriseId:
          description: The ID of the enterprise where the the staking request was created.
          type: string
        walletId:
          description: The ID of the wallet where the staking request was created.
          type: string
        withdrawalAddress:
          description: Withdrawal Address
          type: string
        walletType:
          description: The type of wallet the staking request was created from either cold, custodial, or hot.
          type: string
        type:
          $ref: '#/components/schemas/StakingRequestType'
        coin:
          description: The coin to be staked (BTC, BERA, ETH, MATIC, NEAR, SOL, STX, TON, WCT, etc).
          type: string
        createdDate:
          description: The date the staking request was created.
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/StakingRequestStatus'
        statusModifiedDate:
          description: The last date the status changed.
          type: string
        error:
          description: The reason the staking request failed.
          type: string
        totalStaked:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The sum of the amounts of all confirmed staking transactions in this request.
        delegationCycle:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The number of cycles this staking request will be active.
      required:
        - id
        - requestingUserId
        - enterpriseId
        - walletId
        - withdrawalAddress
        - walletType
        - type
        - coin
        - createdDate
        - status
        - statusModifiedDate
    StakingRequestPOSTBody:
      type: object
      properties:
        clientId:
          description: Optional user generated identifier to detect duplicated requests.
          type: string
        amount:
          description: Amount to stake in base units (i.e. Wei for ETH). For Ethereum the amount must be a multiple of 32 ETH (32000000000000000000 Wei). For Testnet the 32 ETH multiple restriction does not apply.
          type: string
          example: '32000000000000000000'
        type:
          description: Staking Request type = 'STAKE'
          type: string
          example: STAKE
      required:
        - amount
        - type
    StakingRequestStatus:
      title: Staking Request Status
      description: The status of the staking request. For ETH the status will change from NEW to READY when a validator has been assigned to the wallet's address.
      type: string
      enum:
        - NEW
        - PENDING_VALIDATORS
        - READY
        - PENDING_APPROVAL
        - PENDING_BITGO_TRUST_APPROVAL
        - PENDING
        - FAILED
        - REJECTED
        - VALIDATOR_ACTIVATING
        - PARTIAL_CONFIRMED
        - CONFIRMED
        - COOLDOWN
        - WARMUP
        - DELAYED_COOLDOWN
        - DELAYED_WARMUP
        - ETH_PARTIAL_EXITED
        - ETH_EXITED
    StakingRequestType:
      title: Staking Request Type
      description: The type of staking request.
      type: string
      enum:
        - STAKE
        - UNSTAKE
        - CLAIM_REWARDS
        - SWITCH_VALIDATOR
        - CHECKPOINT
        - UNSUPPORTED
    StakingRequestsListResponse:
      type: object
      properties:
        requests:
          type: array
          minItems: 1
          maxItems: 500
          items:
            oneOf:
              - $ref: '#/components/schemas/EthStakingRequest'
              - $ref: '#/components/schemas/MaticStakingRequest'
              - $ref: '#/components/schemas/NearStakingRequest'
              - $ref: '#/components/schemas/CosmosLikeStakingRequest'
              - $ref: '#/components/schemas/AtomStakingRequest'
              - $ref: '#/components/schemas/SolStakingRequest'
              - $ref: '#/components/schemas/DotStakingRequest'
    StakingRequestsResponse:
      type: object
      properties:
        requests:
          type: array
          minItems: 1
          maxItems: 500
          items:
            oneOf:
              - $ref: '#/components/schemas/EthStakingRequestWithTransactions'
              - $ref: '#/components/schemas/NearStakingRequestWithTransactions'
              - $ref: '#/components/schemas/CosmosLikeStakingRequestWithTransactions'
              - $ref: '#/components/schemas/AtomStakingRequestWithTransactions'
              - $ref: '#/components/schemas/SolStakingRequestWithTransactions'
              - $ref: '#/components/schemas/DotStakingRequestWithTransactions'
              - $ref: '#/components/schemas/MaticStakingRequest'
        page:
          type: integer
          description: The page number for paging purposes.
        totalPages:
          type: integer
          description: The total number of pages for paging purposes.
        totalElements:
          type: integer
          description: The number of elements per page used for paging purposes.
    StakingReward:
      type: object
      properties:
        reward:
          description: The reward in base units.
          type: string
        walletId:
          description: The wallet ID.
          type: string
        enterpriseId:
          description: The enterprise ID.
          type: string
        date:
          description: The date and time of the reward.
          type: string
          format: date-time
      required:
        - reward
        - date
    StakingRewards:
      type: object
      properties:
        rewards:
          description: An array of rewards.
          type: array
          items:
            $ref: '#/components/schemas/StakingReward'
        page:
          type: integer
          description: The page number for paging purposes.
        totalPages:
          type: integer
          description: The total number of pages for paging purposes.
        totalElements:
          type: integer
          description: The number of elements per page used for paging purposes.
    StakingSpendableAttributes:
      type: object
      properties:
        max:
          description: The maximum spendable amount.
          type: string
        min:
          description: The minimum spendable amount.
          type: string
        multiplier:
          description: The multiplier amount to be staked. Default to 1, but for coins like where the amount to stake is multipler of 32 ETH, this is 32 in base unit, to allow validation.
          type: string
        fee:
          description: The blockchain fee to submit the transactions needed to stake.
          type: string
        netMax:
          description: The maximum spendable amount minus fees.
          type: string
        netMin:
          description: The net minimum spendable amount plus fees.
          type: string
        isStakingDurationNeeded:
          description: True, if staking duration in seconds is required.
          type: boolean
        minStakeMore:
          description: The minimum amount required to stake to the same validator.
          type: integer
    StakingTransaction:
      title: Staking Transaction
      type: object
      properties:
        id:
          description: The staking transaction ID.
          type: string
        stakingRequestId:
          description: The staking request ID.
          type: string
        transactionType:
          allOf:
            - $ref: '#/components/schemas/StakingTransactionType'
            - type: string
          description: The transaction type (delegate).
        txHash:
          description: The transaction hash.
          type: string
        createdDate:
          description: The date the transaction was created.
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/StakingTransactionStatus'
        statusModifiedDate:
          description: The last date the status changed.
          type: string
          format: date-time
        error:
          description: The reason the transaction failed.
          type: string
        amount:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The transaction Amount in base units (i.e. Wei for ETH).
        delegationId:
          description: The staking delegation the transaction is acting on.
          type: string
        pendingApprovalId:
          description: Pending Approval ID
          type: string
        transferId:
          description: Transfer ID
          type: string
        txRequestId:
          description: Transaction Request ID for the Transaction Request API
          type: string
        coin:
          description: The coin associated with this staking transaction.
          type: string
      required:
        - stakingRequestId
        - transactionType
        - createdDate
        - status
        - statusModifiedDate
        - delegationId
        - amount
    StakingTransactionStatus:
      title: Staking Transaction Status
      description: The status of the transaction, either NEW, READY, INITIATED, CONFIRMED, or REJECTED.
      type: string
      enum:
        - WAITING
        - READY
        - SENDING
        - PENDING_APPROVAL
        - PENDING_BITGO_TRUST_APPROVAL
        - REJECTED
        - PENDING
        - FAILED
        - CONFIRMED
        - VALIDATOR_ACTIVATING
        - DELAYED_READY
    StakingTransactionType:
      title: Staking Transaction Type
      description: The type of staking transaction.
      type: string
      enum:
        - delegate
        - reward
        - undelegate
        - withdraw_undelegated
        - authorize
        - ''
    StakingValidator:
      type: object
      properties:
        delegationAddress:
          description: The delegation address.
          type: string
        coin:
          description: The staked coin.
          type: string
        delegated:
          description: The total delegated amount in base units.
          type: string
        rewards:
          description: The reward accrual amount in base units.
          type: string
        apy:
          description: The annual percentage yield.
          type: string
        type:
          description: The validator provider used for staking.
          type: string
        rewardCoin:
          description: The coin in which rewards will be received.
          type: string
        endTime:
          description: The timestamp when the staking position expires, at which point it will either be unstaked automatically or become available for manual unstaking.
          type: string
    StakingValidatorsResponse:
      type: object
      properties:
        validators:
          type: array
          minItems: 1
          maxItems: 500
          items:
            allOf:
              - $ref: '#/components/schemas/StakingValidator'
              - type: object
        page:
          type: integer
          description: The page number for paging purposes.
        totalPages:
          type: integer
          description: The total number of pages for paging purposes.
        totalElements:
          type: integer
          description: The number of elements per page used for paging purposes.
    StakingWallet:
      type: object
      properties:
        enterpriseId:
          description: The ID of the enterprise where the the staking request was created.
          type: string
        walletId:
          description: The ID of the wallet where the staking request was created.
          type: string
        walletType:
          description: The type of wallet the staking request was created from, either cold, custodial, or hot.
          type: string
        label:
          description: The label of the wallet the staking request was created from.
          type: string
        coin:
          description: The staking asset.
          type: string
        delegated:
          description: The delegated staked amount in base units.
          type: string
        pendingUnstake:
          description: The amount that is actively being unstaked.
          type: string
        pendingStake:
          description: The amount that is actively being staked.
          type: string
        spendableAttributes:
          description: Spendable attributes
          type: object
        rewards:
          description: The amount of rewards received in base units.
          type: string
        lockedRewards:
          description: The amout of locked rewards in base units.
          type: string
        apy:
          description: The reward accrual annual percentage rate. The rate is estimated yearly based on the last 7 days using the same methodology as leading beacon chain validator aggregators (e.g. https://beaconcha.in/validators).
          type: string
        createdDate:
          description: The date the staking request was created.
          type: string
        modifiedDate:
          description: The last date the staking wallet was modified.
          type: string
      required:
        - enterpriseId
        - walletId
        - walletType
        - label
        - coin
        - delegated
        - pendingUnstake
        - pendingStake
        - rewards
        - lockedRewards
        - apy
        - createdDate
        - modifiedDate
    StakingWalletsResponse:
      type: object
      properties:
        stakingWallets:
          description: An array of staking wallets.
          type: array
          items:
            $ref: '#/components/schemas/StakingWallet'
        page:
          type: integer
          description: The page number for paging purposes.
        totalPages:
          type: integer
          description: The total number of pages for paging purposes.
        totalElements:
          type: integer
          description: The number of elements per page used for paging purposes.
      required:
        - stakingWallets
        - page
        - totalPages
        - totalElements
    StaticFee:
      title: StaticFee
      type: object
      properties:
        type:
          type: string
          enum:
            - static
        amount:
          type: string
          minLength: 1
      required:
        - type
        - amount
    SteadyPaceOrderParameters:
      type: object
      required:
        - interval
        - intervalUnit
        - subOrderSize
      properties:
        interval:
          type: integer
          description: The interval for the SteadyPace order, specified in conjunction with the interval unit.
        intervalUnit:
          type: string
          description: The unit of time for the interval. Defaults to "minute".
          enum:
            - second
            - minute
            - hour
        subOrderSize:
          type: string
          description: The size of each sub-order in the SteadyPace order.
        variance:
          type: number
          description: |
            Optional degree of randomization for sub-order sizes. Accepts a decimal value rounded to two decimal places between 0 and 1, representing the variation in the size of each sub-order. 
            For example, a value of 0.20 indicates a 20% variance.
    StellarAddress:
      title: Stellar Address
      type: object
      properties:
        memoId:
          type: string
        rootAddress:
          type: string
      required:
        - memoId
        - rootAddress
    StellarWallet:
      title: Stellar Wallet
      type: object
      properties:
        rootAddress:
          type: string
        pendingChainInitialization:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        lastMemoId:
          type: string
        stellarUsername:
          type: string
        homeDomain:
          type: string
        stellarAddress:
          type: string
        trustedTokens:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TrustedTokenState'
              - $ref: '#/components/schemas/Token'
      required:
        - rootAddress
        - pendingChainInitialization
        - creationFailure
        - lastMemoId
    StxStakingDelegation:
      title: STX
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
      properties:
        subType:
          description: The staking type.
          type: string
          enum:
            - STACK
        btcRewardAddress:
          description: The BTC address where rewards will be sent.
          type: string
    StxStakingRequest:
      title: STX
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/StxStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/StakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
        subType:
          description: The staking type.
          type: string
          enum:
            - STACK
        duration:
          description: The staking duration in blocks.
          type: string
    StxStakingRequestPOSTBody:
      title: STX stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '1000000000000000'
        type:
          description: Staking Request type = 'STAKE'.
          type: string
          example: STAKE
        subType:
          description: The staking type.
          type: string
          enum:
            - STACK
          default: STACK
        duration:
          description: The staking duration in blocks.
          type: string
          example: '100'
        validator:
          description: The validator address.
          type: string
        btcRewardAddress:
          description: The BTC address where rewards will be sent.
          type: string
        signerPub:
          description: The public key of the signer.
          type: string
        signerSignature:
          description: The signature of the signer.
          type: string
        authId:
          description: The authorization ID.
          type: string
        maxAmount:
          description: The maximum amount that can be staked.
          type: string
        contractName:
          description: The name of the staking contract.
          type: string
          default: pox-4
      required:
        - amount
        - type
    StxUnStakingRequestPOSTBody:
      title: STX unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
      required:
        - type
        - delegationId
    SubstrateAccountBaseBuildOptions:
      title: SubstrateAccountBaseBuildOptions
      allOf:
        - type: object
          properties:
            fee:
              type: object
              properties:
                amount:
                  oneOf:
                    - type: string
                    - type: number
                formula:
                  type: string
                  enum:
                    - fixed
                    - feeRate
                    - perKB
                    - custom
                type:
                  type: string
                  enum:
                    - base
                    - max
                    - tip
                unit:
                  type: string
                  enum:
                    - baseUnit
                    - cpu
                    - ram
              required:
                - amount
        - $ref: '#/components/schemas/AccountBaseBuildOptions'
    SubstrateConsolidateIntent:
      title: Substrate Consolidate Intent
      allOf:
        - $ref: '#/components/schemas/AccountBaseConsolidateIntent'
    SubstratePaymentIntent:
      title: Substrate Payment Intent
      allOf:
        - type: object
          properties:
            memo:
              $ref: '#/components/schemas/optionalString'
        - $ref: '#/components/schemas/PaymentIntent'
        - $ref: '#/components/schemas/SubstrateAccountBaseBuildOptions'
    SuiBuildOptions:
      title: SuiBuildOptions
      allOf:
        - type: object
          properties:
            feeOptions:
              $ref: '#/components/schemas/SuiFeeOptions'
            lockedAmount:
              $ref: '#/components/schemas/optionalString'
          required:
            - feeOptions
            - lockedAmount
        - $ref: '#/components/schemas/BaseIntent'
    SuiConsolidateIntent:
      title: SUI Consolidate Intent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/AccountBaseConsolidateIntent'
        - $ref: '#/components/schemas/SuiBuildOptions'
    SuiCustomTxIntent:
      title: SUI Custom Tx Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - customTx
            rawTx:
              type: string
          required:
            - intentType
            - rawTx
        - $ref: '#/components/schemas/BaseIntent'
        - $ref: '#/components/schemas/SuiBuildOptions'
    SuiFeeOptions:
      title: SuiFeeOptions
      type: object
      properties:
        gasLimit:
          type: number
      required:
        - gasLimit
    SuiGoUnstakeIntent:
      title: SuiGoUnstakeIntent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/GoUnstakeIntent'
        - $ref: '#/components/schemas/SuiBuildOptions'
    SuiPaymentIntent:
      title: SUI Payment Intent
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/PaymentIntent'
        - $ref: '#/components/schemas/SuiBuildOptions'
    SuiStakingIntent:
      title: SUI Stake Intent
      allOf:
        - type: object
          properties:
            validatorAddress:
              $ref: '#/components/schemas/optionalString'
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
            recipients:
              type: array
              items:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
                  amount:
                    $ref: '#/components/schemas/Amount'
                  data:
                    $ref: '#/components/schemas/optionalString'
                required:
                  - address
                  - amount
        - $ref: '#/components/schemas/StakeIntent'
    SuiUnstakingIntent:
      title: SUI Unstaking Intent
      allOf:
        - type: object
          properties:
            stakedSuiObjectId:
              type: string
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
          required:
            - stakedSuiObjectId
        - $ref: '#/components/schemas/WithdrawIntent'
    SupportedAddressFormat:
      title: SupportedAddressFormat
      type: string
      enum:
        - cashaddr
        - base58
    SupportedTokenRecipientEntryItem:
      title: SupportedTokenRecipientEntryItem
      type: object
      properties:
        tokenName:
          type: string
      required:
        - tokenName
    SwiftCodeType:
      title: SwiftCodeType
      type: string
    TWAPOrderParameters:
      type: object
      properties:
        isTimeSliced:
          type: boolean
          description: |
            The isTimeSliced field, when provided under the parameters section, determines the order's time slicing behavior:
            - If isTimeSliced is set to true, the order will be executed using a time-sliced strategy.
            - If isTimeSliced is set to false, the order will be executed using a regular TWAP strategy without time slicing.
            - If isTimeSliced is not specified, the default behavior uses a regular TWAP strategy without time slicing.
        boundsControl:
          type: string
          description: |
            The boundsControl field, when provided under the parameters section, determines how strictly the TWAP algorithm adheres to the target fill progression.
            - It is optional but can be provided for a regular TWAP strategy.
            - Default value is `standard`.
          enum:
            - narrow
            - standard
            - wide
    TaoStakeIntent:
      title: Tao Stake Intent
      allOf:
        - type: object
          properties:
            amountStaked:
              type: string
          required:
            - amountStaked
        - $ref: '#/components/schemas/StakeIntent'
        - $ref: '#/components/schemas/TaoStakingBaseIntent'
    TaoStakingBaseIntent:
      title: Tao Staking Base Intent
      allOf:
        - type: object
          properties:
            hotkey:
              type: string
            netuid:
              type: string
          required:
            - hotkey
            - netuid
        - $ref: '#/components/schemas/BaseStakeIntent'
        - $ref: '#/components/schemas/SubstrateAccountBaseBuildOptions'
    TaoStakingRequest:
      title: TAO
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/SolStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/SolStakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
    TaoStakingRequestPOSTBody:
      title: TAO stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        validator:
          description: The validator to delegate to
          type: string
          example: 5FCPTnjevGqAuTttetBy4a24Ej3pH9fiQ8fmvP1ZkrVsLUoT
    TaoUnStakingRequestPOSTBody:
      title: TAO unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
      required:
        - type
    TaoUnstakeIntent:
      title: Tao Unstake Intent
      allOf:
        - type: object
          properties:
            amountUnstaked:
              type: string
          required:
            - amountUnstaked
        - $ref: '#/components/schemas/WithdrawIntent'
        - $ref: '#/components/schemas/TaoStakingBaseIntent'
    TestcoinAddress:
      title: Testcoin Address
      type: object
      additionalProperties: {}
    TestcoinWallet:
      title: Testcoin Wallet
      type: object
      properties:
        lastChainIndex:
          type: number
    TezosAddress:
      title: Tezos Address
      type: object
      properties:
        counter:
          type: number
        updateTime:
          type: string
          format: date
          title: Date String
        txCount:
          type: number
        pendingChainInitialization:
          type: boolean
        pendingPublicKeyRevelation:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        delegate:
          type: string
        previousLowBalanceEmailSentAt:
          type: string
          format: date
          title: Date String
      required:
        - counter
        - updateTime
        - txCount
        - pendingChainInitialization
        - pendingPublicKeyRevelation
        - creationFailure
    TezosWallet:
      title: Tezos Wallet
      type: object
      properties:
        pendingChainInitialization:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        deployedInBlock:
          oneOf:
            - type: number
            - type: boolean
        deployTxHash:
          type: string
        lastChainIndex: {}
        baseAddress:
          type: string
        feeAddress:
          type: string
        safeModeActivated:
          type: string
        lowPriorityFeeAddress:
          type: string
        delegate:
          type: string
      required:
        - pendingChainInitialization
        - creationFailure
    TimeWindowConditionParameter:
      title: Time window
      type: object
      description: The period of time this condition covers, in seconds.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - timeWindow
          example: timeWindow
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: time window
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The period of time this condition covers, in seconds
        type:
          type: string
          description: The type of acceptable values for this condition parameter.
          enum:
            - NON_NEGATIVE_NUMBER
          example: NON_NEGATIVE_NUMBER
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
    Token:
      title: Token
      type: object
      properties:
        limit:
          type: string
        token:
          type: string
    TokenAllowanceResponse:
      title: TokenAllowanceResponse
      type: object
      properties:
        allowance:
          type: string
      required:
        - allowance
    TokenAndSignatureConnectionKey:
      title: TokenAndSignatureConnectionKey
      type: object
      properties:
        schema:
          type: string
          enum:
            - tokenAndSignature
        connectionToken:
          type: string
          minLength: 1
        signature:
          type: string
          minLength: 1
      required:
        - schema
        - connectionToken
        - signature
    TokenApprovalIntent:
      title: Intent for approving tokens for spending by a batcher contract
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - tokenApproval
            tokenName:
              type: string
          required:
            - intentType
            - tokenName
        - $ref: '#/components/schemas/BaseIntent'
    TokenConnectionKey:
      title: TokenConnectionKey
      type: object
      properties:
        schema:
          type: string
          enum:
            - token
        connectionToken:
          type: string
          minLength: 1
      required:
        - schema
        - connectionToken
    TokenData:
      title: TokenData
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/TokenRecipientEntryItem'
        - $ref: '#/components/schemas/SupportedTokenRecipientEntryItem'
        - $ref: '#/components/schemas/UnsupportedTokenRecipientEntryItem'
    TokenData1:
      type: object
      properties:
        tokenType:
          type: string
          description: The type of standard of the token.
          example: ERC721
        tokenQuantity:
          type: string
          description: The quantity of token to transfer (should be 1 for ERC721).
          example: '101'
        tokenContractAddress:
          type: string
          description: Address of the token contract which is necessary if the token is not supported on WP.
          example: '0x3d8e90d5F403a0A18dfeeAd36E30EF95D5E1ad3a'
        tokenName:
          type: string
          description: Name of the token as it is supported on WP.
          example: tpolygon:name
        tokenId:
          type: string
          description: Id of the token to be transferred which is required for NFTs.
          example: '123'
        decimalPlaces:
          type: number
          description: Number of decimal places the token uses (for fungible tokens unsupported in WP).
          example: 18
    TokenRecipientEntryItem:
      title: TokenRecipientEntryItem
      type: object
      properties:
        tokenQuantity:
          type: string
        tokenType:
          type: string
        tokenId:
          $ref: '#/components/schemas/optionalString'
      required:
        - tokenQuantity
        - tokenType
    TonAddress:
      title: Ton Address
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
      required:
        - addresses
    TonConsolidateIntent:
      title: TON Consolidate Intent
      allOf:
        - $ref: '#/components/schemas/AccountBaseConsolidateIntent'
    TonDelegateIntent:
      title: TON Delegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - delegate
            validatorAddress:
              type: string
            amount:
              $ref: '#/components/schemas/Amount'
            useSingleNominator:
              type: boolean
            ownerAddress:
              $ref: '#/components/schemas/optionalString'
          required:
            - intentType
            - validatorAddress
            - amount
            - useSingleNominator
        - $ref: '#/components/schemas/BaseIntent'
    TonPaymentIntent:
      title: TON Payment Intent
      allOf:
        - type: object
          properties:
            memo:
              $ref: '#/components/schemas/optionalString'
        - $ref: '#/components/schemas/PaymentIntent'
    TonStakingDelegation:
      title: TON
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
      properties:
        subType:
          description: The staking type.
          type: string
          enum:
            - MULTI_NOMINATOR_STAKE
    TonStakingRequest:
      title: TON
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/TonStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/StakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
        subType:
          description: The staking type.
          type: string
          enum:
            - MULTI_NOMINATOR_STAKE
    TonStakingRequestPOSTBody:
      title: TON stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '1000000000'
        type:
          description: Staking Request type = 'STAKE'.
          type: string
          example: STAKE
        subType:
          description: The staking type.
          type: string
          enum:
            - MULTI_NOMINATOR_STAKE
          default: MULTI_NOMINATOR_STAKE
        duration:
          description: The staking duration.
          type: string
          default: '0'
        validator:
          description: The validator address.
          type: string
      required:
        - amount
        - type
    TonUnStakingRequestPOSTBody:
      title: TON unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
      required:
        - type
        - delegationId
    TonUndelegateIntent:
      title: TON Undelegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - undelegate
            validatorAddress:
              type: string
            useSingleNominator:
              type: boolean
            singleNominatorAmount:
              $ref: '#/components/schemas/Amount'
          required:
            - intentType
            - validatorAddress
            - useSingleNominator
            - singleNominatorAmount
        - $ref: '#/components/schemas/BaseIntent'
    TonWallet:
      title: Ton Wallet
      type: object
      properties:
        rootAddress:
          type: string
        memoId:
          type: string
        lastMemoId:
          type: string
        seqno:
          type: number
        lastChainIndex:
          type: object
          additionalProperties:
            type: number
        walletVersion:
          type: number
      required:
        - rootAddress
        - memoId
        - lastMemoId
        - seqno
    TopProof:
      title: TopProof
      type: object
      properties:
        Proof:
          type: string
        VerificationKey:
          type: string
        MerkleRoot:
          type: string
        MerkleRootWithAssetSumHash:
          type: string
        AssetSum:
          $ref: '#/components/schemas/BalancesCodec'
      required:
        - Proof
        - VerificationKey
        - MerkleRoot
        - MerkleRootWithAssetSumHash
        - AssetSum
    Touchpoint:
      type: object
      description: A Touchpoint. For example the Transfer from a Wallet Touchpoint.
      required:
        - id
        - name
        - status
        - label
        - description
        - adminOnly
      properties:
        id:
          type: string
          description: Id of the Touchpoint. A UUID.
          example: 306258df-dcab-489e-a9fe-ff28ce9fa312
        name:
          type: string
          description: Name of the Touchpoint.
          enum:
            - wallet.segregated.transfer
            - policies.management.edit
          example: wallet.segregated.transfer
        label:
          type: string
          description: A label for the Touchpoint which can be shown to an end user.
          example: Transfer from a Segregated Wallet
        description:
          type: string
          description: A description for the Touchpoint which can be shown to an end user.
          example: When transferring from a BitGo Segregated Wallet
        status:
          type: string
          description: |
            Status of the Touchpoint. Indicates if the Touchpoint is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The Touchpoint is available for use.
            * `INACTIVE` - The Touchpoint is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        adminOnly:
          type: boolean
          description: true, if this is an internal Touchpoint, false otherwise.
          example: false
    TouchpointsResults:
      description: A paginated list of Touchpoints
      allOf:
        - type: object
          properties:
            touchpoints:
              type: array
              items:
                $ref: '#/components/schemas/Touchpoint'
        - $ref: '#/components/schemas/PaginatedResults'
    TradeBaseOrder:
      type: object
      properties:
        channel:
          type: string
          description: The channel you are subscribed to (e.g. "orders")
        time:
          type: string
          format: date-time
        accountId:
          type: string
          description: The ID of the account
        orderId:
          type: string
          description: The ID of the order
        clientOrderId:
          type: string
          description: Custom order ID.
        product:
          type: string
          description: Product name e.g. BTC-USD
        status:
          type: string
          description: The status of the order (e.g. "completed")
        type:
          type: string
          description: The type of order (e.g. "market", "limit", "twap")
        side:
          type: string
          description: The side of the order (e.g. "buy", "sell")
        quantity:
          type: string
          format: decimal
          description: The specified order quantity.
    TradeBaseQuoteInbound:
      title: TradeBaseQuoteInbound
      oneOf:
        - type: object
          properties:
            base:
              $ref: '#/components/schemas/TradeCurrencyPositiveInbound'
            quote:
              $ref: '#/components/schemas/TradeCurrencyNegativeInbound'
          required:
            - base
            - quote
        - type: object
          properties:
            base:
              $ref: '#/components/schemas/TradeCurrencyNegativeInbound'
            quote:
              $ref: '#/components/schemas/TradeCurrencyPositiveInbound'
          required:
            - base
            - quote
    TradeBaseReq:
      title: TradeBaseReq
      type: object
      properties:
        externalId:
          type: string
          minLength: 1
        externalOrderId:
          type: string
          minLength: 1
        partyConnectionId:
          type: string
          title: uuid
        tradedAt:
          type: string
          format: date-time
          title: ISO Date String
      required:
        - externalId
        - externalOrderId
        - partyConnectionId
        - tradedAt
    TradeCurrencyNegativeInbound:
      title: TradeCurrencyNegativeInbound
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/BNSupportedCurrency'
        quantity:
          type: string
      required:
        - currency
        - quantity
    TradeCurrencyPositiveInbound:
      title: TradeCurrencyPositiveInbound
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/BNSupportedCurrency'
        quantity:
          type: string
      required:
        - currency
        - quantity
    TradeOrdersRequest:
      title: Trade Orders
      required:
        - type
        - channel
        - accountId
      type: object
      properties:
        type:
          type: string
          description: The event type (e.g. "subscribe" or "unsubscribe")
        channel:
          type: string
          description: The subscription channel (e.g. "orders" for trade orders)
        accountId:
          type: string
          description: The ID of the account
      example:
        type: subscribe
        channel: orders
        accountId: f230fdebfa084ffebc7e00515f54603f
    TradeOrdersResponse:
      title: Trade Orders Response
      oneOf:
        - $ref: '#/components/schemas/OrderCreated'
        - $ref: '#/components/schemas/FillUpdated'
        - $ref: '#/components/schemas/OrderCompleted'
        - $ref: '#/components/schemas/OrderCanceled'
        - $ref: '#/components/schemas/OrderError'
    TradeUser:
      required:
        - email
        - firstName
        - id
        - lastName
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
      example:
        id: a253c86c-1f0f-42cc-bcd0-2dcc5040b204
        firstName: Uncle
        lastName: MoneyPenny
        email: uncle.moneypenny@bitgo.com
    Trades:
      type: array
      items:
        $ref: '#/components/schemas/PrimeTrade'
    TradfyCurrency:
      title: TradfyCurrency
      type: string
      enum:
        - usd
      description: Supported tradfy currencies (extensible)
    TradfyTransferDirection:
      title: TradfyTransferDirection
      allOf:
        - $ref: '#/components/schemas/TradfyTransferDirectionEnum'
      description: Supported transfer directions (extensible)
    TradfyTransferDirectionEnum:
      type: string
      enum:
        - in
    TradfyTransferType:
      title: TradfyTransferType
      allOf:
        - $ref: '#/components/schemas/TradfyTransferTypeEnum'
      description: Supported transfer types (extensible)
    TradfyTransferTypeEnum:
      type: string
      enum:
        - ach-us
    TradingValue:
      title: Go Account
      type: object
      description: Go Account.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - trading
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Trading Wallet
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: A trading wallet
    Transaction:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/TransactionState1'
        unsignedTx:
          allOf:
            - $ref: '#/components/schemas/TransactionRequestUnsignedTransaction'
          description: Holds the unsigned transaction for this transaction in a tx-request.
        signatureShares:
          type: array
          description: Only used for MPC coins. This is used to collect signature shares from and exchange them with the user. Holds the signature shares for this transaction in a tx-request.
          items:
            $ref: '#/components/schemas/SignatureShare'
        commitmentShares:
          type: array
          description: Only used for MPC coins on EdDSA curve. This is used to collect commitment shares from and exchange them with the user. Holds the commitment shares for this transaction in a tx-request.
          items:
            $ref: '#/components/schemas/CommitmentShare'
        txHash:
          type: string
          description: The hash of the transaction from the TxRequest that has been signed and is pending broadcast.
        bitgoPaillierChallenge:
          description: BitGo-to-user paillier challenge. Required when signing with ECDSA MPC wallets.
          type: object
          properties:
            p:
              type: array
              items:
                type: string
      required:
        - state
        - unsignedTx
    Transaction1:
      title: Transaction
      type: object
      description: Transaction details
      properties:
        id:
          type: string
        normalizedTxHash:
          type: string
        blockHeight:
          type: number
        inputIds: {}
        entries: {}
        inputs: {}
        outputs: {}
        size:
          type: number
        date:
          type: string
          format: date-time
          title: ISO Date String
        fee:
          type: number
        feeString:
          type: string
        hex:
          type: string
        confirmations:
          type: number
        blockHash:
          type: string
        blockPosition:
          type: number
        label:
          type: string
      required:
        - id
        - normalizedTxHash
        - blockHeight
        - inputIds
        - entries
        - inputs
        - outputs
        - size
        - date
        - fee
        - feeString
        - hex
        - confirmations
    TransactionBuildParams:
      type: object
      properties:
        recipients:
          description: Recipient build params data
          type: object
          properties:
            amount:
              description: The amount to stake in base units.
              type: string
            address:
              description: The address.
              type: string
            data:
              description: The staking data (ABI format).
              type: string
        stakingParams:
          description: Staking params
          type: object
          properties:
            requestId:
              type: string
            amount:
              description: The amount to stake in base units.
              type: string
            validator:
              description: The validator address.
              type: string
            actionType:
              description: The action type (e.g. delegate).
              type: string
        gasPrice:
          description: The Gas price in base units.
          type: string
        gasLimit:
          description: The Gas limit in base units.
          type: string
    TransactionBuildRequest:
      title: Withdrawal
      allOf:
        - $ref: '#/components/schemas/BuildParams'
        - type: object
          properties:
            recipients:
              type: array
              items:
                type: object
                properties:
                  amount:
                    allOf:
                      - $ref: '#/components/schemas/RecipientAmount'
                    description: String representation of the amount to send in base units (satoshis/litoshis/zatoshis/duffs). For doge, only string is allowed. Passing in 'max' will send the recipient the maximum amount available, minus fees and amounts for other recipients. Only a single recipient with a 'max' amount is allowed.
                  address:
                    allOf:
                      - $ref: '#/components/schemas/AddressString3'
                    description: The address to send to
                  memo:
                    anyOf:
                      - $ref: '#/components/schemas/MemoString'
                      - $ref: '#/components/schemas/MemoObject'
              description: A list of recipient addresses and amounts. Must be present but empty for Child-Pays-For-Parent transactions.
            txFormat:
              $ref: '#/components/schemas/UtxoTransactionFormat'
          required:
            - recipients
    TransactionBuildResult:
      type: object
      properties:
        keyDerivationPath:
          type: string
    TransactionInitiateRequest:
      allOf:
        - $ref: '#/components/schemas/BuildParams'
        - type: object
          properties:
            recipients:
              type: array
              items:
                type: object
                properties:
                  amount:
                    allOf:
                      - $ref: '#/components/schemas/RecipientAmount'
                    description: String representation of the amount to send in base units (satoshis/litoshis/zatoshis/duffs). For doge, only string is allowed. Passing in 'max' will send the recipient the maximum amount available, minus fees and amounts for other recipients. Only a single recipient with a 'max' amount is allowed.
                  address:
                    allOf:
                      - $ref: '#/components/schemas/AddressString3'
                    description: The address to send to
                  memo:
                    anyOf:
                      - $ref: '#/components/schemas/MemoString'
                      - $ref: '#/components/schemas/MemoObject'
              description: A list of recipient addresses and amounts. Must be present but empty for Child-Pays-For-Parent transactions.
    TransactionIntent1:
      title: TransactionIntent
      oneOf:
        - $ref: '#/components/schemas/AdaConsolidateIntent'
        - $ref: '#/components/schemas/AdaPaymentIntent'
        - $ref: '#/components/schemas/AdaStakeClaimRewardsIntent'
        - $ref: '#/components/schemas/AdaStakeIntent'
        - $ref: '#/components/schemas/AdaUnstakeIntent'
        - $ref: '#/components/schemas/AdaVoteDelegationIntent'
        - $ref: '#/components/schemas/AtomPaymentIntent'
        - $ref: '#/components/schemas/AtomStakeIntent'
        - $ref: '#/components/schemas/AtomUnstakeIntent'
        - $ref: '#/components/schemas/AtomWithdrawIntent'
        - $ref: '#/components/schemas/BabyCreateBtcDelegationIntent'
        - $ref: '#/components/schemas/BabyWithdrawRewardIntent'
        - $ref: '#/components/schemas/BscDelegateIntent'
        - $ref: '#/components/schemas/BscUnDelegateIntent'
        - $ref: '#/components/schemas/BscWithdrawUndelegateIntent'
        - $ref: '#/components/schemas/CosmosPaymentIntent'
        - $ref: '#/components/schemas/CosmosStakeIntent'
        - $ref: '#/components/schemas/CosmosSwitchValidatorIntent'
        - $ref: '#/components/schemas/CosmosUnstakeIntent'
        - $ref: '#/components/schemas/CosmosWithdrawIntent'
        - $ref: '#/components/schemas/DotConsolidateIntent'
        - $ref: '#/components/schemas/DotCreateAccountIntent'
        - $ref: '#/components/schemas/DotPaymentIntent'
        - $ref: '#/components/schemas/DotStakingIntent'
        - $ref: '#/components/schemas/DotUnstakingIntent'
        - $ref: '#/components/schemas/DotWithdrawStakeIntent'
        - $ref: '#/components/schemas/EthAccelerationIntent'
        - $ref: '#/components/schemas/EthConsolidateIntent'
        - $ref: '#/components/schemas/EthConsolidateTokenIntent'
        - $ref: '#/components/schemas/EthFillNonceIntent'
        - $ref: '#/components/schemas/EthPaymentIntent'
        - $ref: '#/components/schemas/EthStakingIntent'
        - $ref: '#/components/schemas/EthTransferTokenIntent'
        - $ref: '#/components/schemas/FeeAddressTransferIntent'
        - $ref: '#/components/schemas/IcpPaymentIntent'
        - $ref: '#/components/schemas/LightningPaymentIntent'
        - $ref: '#/components/schemas/MmiSignMessageIntent'
        - $ref: '#/components/schemas/MmiSignTransactionIntent'
        - $ref: '#/components/schemas/NearStakeIntent'
        - $ref: '#/components/schemas/NearUnstakeIntent'
        - $ref: '#/components/schemas/NearWithdrawIntent'
        - $ref: '#/components/schemas/PolyxCreateAccountIntent'
        - $ref: '#/components/schemas/PolyxStakeIntent'
        - $ref: '#/components/schemas/PolyxUnstakeIntent'
        - $ref: '#/components/schemas/PolyxWithdrawIntent'
        - $ref: '#/components/schemas/SolAuthorizeIntent'
        - $ref: '#/components/schemas/SolClaimIntent'
        - $ref: '#/components/schemas/SolCloseAssociatedTokenAccountIntent'
        - $ref: '#/components/schemas/SolConsolidateIntent'
        - $ref: '#/components/schemas/SolCreateAssociatedTokenAccountIntent'
        - $ref: '#/components/schemas/SolCustomTxIntent'
        - $ref: '#/components/schemas/SolDeactivateIntent'
        - $ref: '#/components/schemas/SolDelegateIntent'
        - $ref: '#/components/schemas/SolGoUnstakeIntent'
        - $ref: '#/components/schemas/SolPaymentIntent'
        - $ref: '#/components/schemas/SolStakeIntent'
        - $ref: '#/components/schemas/SolUnstakeIntent'
        - $ref: '#/components/schemas/SubstrateConsolidateIntent'
        - $ref: '#/components/schemas/SubstratePaymentIntent'
        - $ref: '#/components/schemas/SuiConsolidateIntent'
        - $ref: '#/components/schemas/SuiCustomTxIntent'
        - $ref: '#/components/schemas/SuiGoUnstakeIntent'
        - $ref: '#/components/schemas/SuiPaymentIntent'
        - $ref: '#/components/schemas/SuiStakingIntent'
        - $ref: '#/components/schemas/SuiUnstakingIntent'
        - $ref: '#/components/schemas/TaoStakeIntent'
        - $ref: '#/components/schemas/TaoUnstakeIntent'
        - $ref: '#/components/schemas/TokenApprovalIntent'
        - $ref: '#/components/schemas/TonConsolidateIntent'
        - $ref: '#/components/schemas/TonDelegateIntent'
        - $ref: '#/components/schemas/TonPaymentIntent'
        - $ref: '#/components/schemas/TonUndelegateIntent'
        - $ref: '#/components/schemas/VetStakingIntent'
        - $ref: '#/components/schemas/WalletRecoveryIntent'
        - $ref: '#/components/schemas/BaseStakeIntentWithCalldata'
        - $ref: '#/components/schemas/CoreDaoDelegateIntent'
        - $ref: '#/components/schemas/CoreDaoUndelegateIntent'
        - $ref: '#/components/schemas/CoreDaoClaimIntent'
        - $ref: '#/components/schemas/EthLikeStakeIntent'
        - $ref: '#/components/schemas/BeraDelegateIntent'
        - $ref: '#/components/schemas/WalrusStakingIntent'
        - $ref: '#/components/schemas/WalrusUndelegateIntent'
        - $ref: '#/components/schemas/WalrusWithdrawIntent'
        - $ref: '#/components/schemas/BaseIntent'
    TransactionRequest:
      anyOf:
        - $ref: '#/components/schemas/TransactionRequestLite1'
        - $ref: '#/components/schemas/TransactionRequestFull1'
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - userId
        - intent
    TransactionRequest1:
      title: TransactionRequest
      oneOf:
        - $ref: '#/components/schemas/TransactionRequestLite2'
        - $ref: '#/components/schemas/TransactionRequestFull'
    TransactionRequestApiVersion:
      title: TransactionRequestApiVersion
      type: string
      enum:
        - lite
        - full
    TransactionRequestBase:
      title: TransactionRequestBase
      type: object
      properties:
        apiVersion:
          type: string
          enum:
            - lite
            - full
          description: The API version of the transaction request
        txRequestId:
          allOf:
            - $ref: '#/components/schemas/TransactionRequestId'
          description: A unique ID for the TxRequest document across all wallets. The combination of the txRequestId and version will always be unique.
        idempotencyKey:
          type: string
          description: The idempotency key of the transaction request
        walletId:
          allOf:
            - $ref: '#/components/schemas/WalletIdString'
          description: The id of the Wallet the TxRequest is for.
        walletType:
          type: string
          enum:
            - backing
            - cold
            - custodial
            - custodialPaired
            - hot
            - trading
          description: The type describes who owns the keys to the wallet associated to the TxRequest.
        version:
          type: number
          description: The version of the transaction request
        enterpriseId:
          type: string
          description: If the wallet that owns the TxRequest is owned by an enterprise then this is the Id of said enterprise.
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        state:
          $ref: '#/components/schemas/TransactionRequestState'
        date:
          type: string
          description: The date and time this version of the TxRequest document was created.
          example: 2021-01-01T00:00:00.000Z
          format: date-time
          title: ISO Date String
        createdDate:
          type: string
          description: The date and time the version 1 TxRequest document was created.
          example: 2021-01-01T00:00:00.000Z
          format: date-time
          title: ISO Date String
        userId:
          type: string
          description: The Id of the User that produced this version of the TxRequest document. Could have created a new document or updated an existing document.
        initiatedBy:
          type: string
          description: The Id of the User that originally created the TxRequest document (initiated the TxRequest).
        updatedBy:
          type: string
          description: The Id of the User that last updated the TxRequest document. This is an alias for the userId field.
        intent: {}
        intents:
          type: array
          items: {}
        pendingApprovalId:
          type: string
          description: The id of the Pending Approval that was created for the TxRequest if one was required.
        policiesChecked:
          type: boolean
        latest:
          type: boolean
          description: Indicates if this is the latest transaction request
        isCanceled:
          type: boolean
          description: True, if the transaction request is canceled.
      required:
        - txRequestId
        - walletId
        - version
        - state
        - date
        - createdDate
        - userId
        - initiatedBy
        - updatedBy
        - intents
        - latest
    TransactionRequestBase1:
      type: object
      properties:
        txRequestId:
          type: string
          description: A unique ID for the TxRequest document across all wallets. The combination of the txRequestId and version will always be unique.
        version:
          type: number
          description: The version of the document. Data changes are done only with inserts and incrementing the version.
        latest:
          type: boolean
          description: A boolean flag that indicates whether the document is the latest version of the TxRequest.
        walletId:
          type: string
          description: The id of the Wallet the TxRequest is for.
        walletType:
          allOf:
            - $ref: '#/components/schemas/WalletTypePublic'
          description: The type describes who owns the keys to the wallet associated to the TxRequest.
        enterpriseId:
          type: string
          description: If the wallet that owns the TxRequest is owned by an enterprise then this is the Id of said enterprise.
        state:
          $ref: '#/components/schemas/TransactionRequestState1'
        date:
          allOf:
            - $ref: '#/components/schemas/DateTime'
          description: The date and time this version of the TxRequest document was created.
        createdDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
          description: The date and time the version 1 TxRequest document was created.
        userId:
          type: string
          description: The Id of the User that produced this version of the TxRequest document. Could have created a new document or updated an existing document.
        initiatedBy:
          type: string
          description: The Id of the User that originally created the TxRequest document (initiated the TxRequest).
        updatedBy:
          type: string
          description: The Id of the User that last updated the TxRequest document. This is an alias for the userId field.
        intent:
          $ref: '#/components/schemas/TransactionRequestIntent'
        intents:
          type: array
          items:
            $ref: '#/components/schemas/TransactionRequestIntent'
        pendingApprovalId:
          type: string
          description: The id of the Pending Approval that was created for the TxRequest if one was required.
        isCanceled:
          type: boolean
          description: True, if the transaction request is canceled.
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - createdDate
        - userId
        - initiatedBy
        - updatedBy
        - intents
    TransactionRequestFull:
      title: TransactionRequestFull
      allOf:
        - type: object
          properties:
            transactions:
              type: array
              items:
                type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TransactionState'
                  unsignedTx:
                    $ref: '#/components/schemas/UnsignedTransaction'
                  signatureShares:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            privateShareProof:
                              type: string
                              description: The private share proof
                            publicShare:
                              type: string
                              description: The public share
                            vssProof:
                              type: string
                              description: The VSS proof of the signature share
                        - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                  commitmentShares:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - commitment
                              description: The type of the commitment share
                          required:
                            - type
                        - $ref: '#/components/schemas/BaseShare'
                  txHash:
                    type: string
                  updatedDate:
                    type: string
                    format: date-time
                    title: ISO Date String
                  createdDate:
                    type: string
                    format: date-time
                    title: ISO Date String
                required:
                  - state
                  - unsignedTx
                description: The transactions associated with the transaction request
            messages:
              type: array
              items:
                type: object
                description: The messages associated with the transaction request
                properties:
                  state:
                    allOf:
                      - $ref: '#/components/schemas/TransactionState'
                    description: The current state of the message
                  signatureShares:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            privateShareProof:
                              type: string
                              description: The private share proof
                            publicShare:
                              type: string
                              description: The public share
                            vssProof:
                              type: string
                              description: The VSS proof of the signature share
                        - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                      description: Signature shares for the message
                  privateSignatureShares:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            privateShareProof:
                              type: string
                              description: The private share proof
                            publicShare:
                              type: string
                              description: The public share
                            vssProof:
                              type: string
                              description: The VSS proof of the signature share
                        - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                      description: Private signature shares for the message
                  commitmentShares:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - commitment
                              description: The type of the commitment share
                          required:
                            - type
                        - $ref: '#/components/schemas/BaseShare'
                      description: Commitment shares for the message (used for EdDSA)
                  encryptedShares:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            type:
                              $ref: '#/components/schemas/ShareType'
                          required:
                            - type
                        - $ref: '#/components/schemas/BaseShare'
                      description: Encrypted shares for the message
                  txHash:
                    type: string
                    description: Transaction hash
                  updatedDate:
                    type: string
                    description: Date when the message was last updated
                    format: date-time
                    title: ISO Date String
                  createdDate:
                    type: string
                    description: Date when the message was created
                    format: date-time
                    title: ISO Date String
                  messageRaw:
                    type: string
                    description: The raw message to be signed
                  messageEncoded:
                    type: string
                    description: The encoded message
                  messageBroadcastable:
                    type: string
                    description: The broadcastable message
                  messageStandardType:
                    type: string
                    description: The encoded message
                  derivationPath:
                    type: string
                    description: Derivation path for the message
                  combineSigShare:
                    type: string
                    description: Combined signature share
                  coin:
                    type: string
                    description: Coin type for the message
                  bitgoPaillierChallenge: {}
                  encryptedChallenge:
                    type: string
                    description: BitGo's encrypted challenge for ECDSA with Range Proofs
                required:
                  - state
                  - messageRaw
        - $ref: '#/components/schemas/TransactionRequestBase'
    TransactionRequestFull1:
      title: Full
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase1'
        - type: object
          properties:
            transactions:
              description: Transaction information.
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
            messages:
              description: Messages for the transaction request.
              type: array
              items:
                $ref: '#/components/schemas/Message1'
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - userId
        - intent
        - transactions
    TransactionRequestId:
      title: TransactionRequestId
      type: string
      example: 123e4567-e89b-12d3-a456-426614174000
      format: uuid
    TransactionRequestIdNonEmptyString:
      title: TransactionRequestIdNonEmptyString
      type: string
      example: 123e4567-e89b-12d3-a456-426614174000
      minLength: 1
      format: uuid
    TransactionRequestIntent:
      anyOf:
        - $ref: '#/components/schemas/AdaStakeIntent1'
        - $ref: '#/components/schemas/ConsolidateTokenIntent1'
        - $ref: '#/components/schemas/CosmosContractCallIntent'
        - $ref: '#/components/schemas/DOTClaimIntent'
        - $ref: '#/components/schemas/DotPaymentIntent1'
        - $ref: '#/components/schemas/DotStakingIntent'
        - $ref: '#/components/schemas/DotUnstakingIntent'
        - $ref: '#/components/schemas/EthAccelerationIntent'
        - $ref: '#/components/schemas/EthFillNonceIntent'
        - $ref: '#/components/schemas/EthPaymentIntent'
        - $ref: '#/components/schemas/ETHSignMessageIntent'
        - $ref: '#/components/schemas/EthStakingIntent'
        - $ref: '#/components/schemas/NearStakeIntent1'
        - $ref: '#/components/schemas/NearUnstakeIntent1'
        - $ref: '#/components/schemas/NearWithdrawIntent1'
        - $ref: '#/components/schemas/SolClaimIntent'
        - $ref: '#/components/schemas/SolCreateAssociatedTokenAccountIntent'
        - $ref: '#/components/schemas/SolStakeIntent1'
        - $ref: '#/components/schemas/SolUnstakeIntent1'
        - $ref: '#/components/schemas/TransferTokenIntent1'
        - $ref: '#/components/schemas/UnstakeIntent2'
        - $ref: '#/components/schemas/WalletRecoveryIntent1'
        - $ref: '#/components/schemas/WithdrawIntent2'
    TransactionRequestLite1:
      title: Lite
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase1'
        - type: object
          properties:
            unsignedTxs:
              type: array
              description: Holds all unsigned transactions that will be used to fulfill the TxRequest for MPC wallets.
              items:
                $ref: '#/components/schemas/TransactionRequestUnsignedTransaction'
            signatureShares:
              type: array
              description: Only used for MPC coins. This is used to collect signature shares from and exchange them with the user.
              items:
                $ref: '#/components/schemas/SignatureShare'
            commitmentShares:
              type: array
              description: Only used for MPC coins on EdDSA curve. This is used to collect commitment shares from and exchange them with the user.
              items:
                $ref: '#/components/schemas/CommitmentShare'
            txHashes:
              type: array
              items:
                type: string
                description: The hashes of all transactions from the TxRequest that have been signed and are pending broadcast.
      required:
        - txRequestId
        - version
        - latest
        - walletId
        - state
        - date
        - userId
        - intent
    TransactionRequestLite2:
      title: TransactionRequestLite
      allOf:
        - type: object
          properties:
            intent:
              allOf:
                - $ref: '#/components/schemas/TransactionIntent1'
              description: The intent of the transaction request
            unsignedTxs:
              type: array
              items:
                type: object
                properties:
                  parsedTx:
                    $ref: '#/components/schemas/ParsedTx'
                  serializedTxHex:
                    type: string
                    description: The unsigned transaction as a hex string.
                  signableHex:
                    type: string
                    description: The portion of a transaction used to generate a signature (may or may not be the same as serializedTxHex) as a hex string.
                  derivationPath:
                    type: string
                    description: A bip32 path.
                  coinSpecific:
                    allOf:
                      - type: object
                        properties:
                          nonceAddress:
                            type: string
                          stakingAddress:
                            type: string
                      - type: object
                        additionalProperties: {}
                    description: Coin specific information.
                  feeInfo:
                    type: object
                    properties:
                      fee:
                        oneOf:
                          - type: string
                          - type: number
                      feeString:
                        type: string
                    required:
                      - fee
                      - feeString
                required:
                  - parsedTx
                  - serializedTxHex
                  - signableHex
                description: Holds all unsigned transactions that will be used to fulfill the TxRequest for MPC wallets.
            signatureShares:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      vssProof:
                        type: string
                        description: The VSS proof of the signature share
                      privateShareProof:
                        type: string
                        description: The private share proof
                      publicShare:
                        type: string
                        description: The public share
                  - $ref: '#/components/schemas/SignatureShareWithoutVssProof'
                description: Only used for MPC coins. This is used to collect signature shares from and exchange them with the user.
            commitmentShares:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - commitment
                        description: The type of the commitment share
                    required:
                      - type
                  - $ref: '#/components/schemas/BaseShare'
                description: Only used for MPC coins on EdDSA curve. This is used to collect commitment shares from and exchange them with the user.
            txHashes:
              type: array
              items:
                type: string
                description: The hashes of all transactions from the TxRequest that have been signed and are pending broadcast.
        - $ref: '#/components/schemas/TransactionRequestBase'
    TransactionRequestState:
      title: TransactionRequestState
      type: string
      enum:
        - pendingApproval
        - canceled
        - rejected
        - initialized
        - pendingDelivery
        - delivered
        - pendingUserSignature
        - pendingUserCommitment
        - pendingUserRShare
        - pendingUserGShare
        - readyToSend
        - signed
        - failed
    TransactionRequestState1:
      type: string
      enum:
        - initialized
        - pendingApproval
        - pendingUserCommitment
        - pendingUserRShare
        - pendingUserGShare
        - readyToSend
        - pendingUserSignature
        - pendingDelivery
        - signed
        - delivered
        - canceled
        - rejected
        - failed
    TransactionRequestUnsignedTransaction:
      type: object
      properties:
        serializedTxHex:
          type: string
          description: The unsigned transaction as a hex string.
        signableHex:
          type: string
          description: The portion of a transaction used to generate a signature (may or may not be the same as serializedTxHex) as a hex string.
        derivationPath:
          type: string
          description: A bip32 path.
        feeInfo:
          type: object
          properties:
            feeString:
              type: string
            fee:
              type: number
          required:
            - fee
            - feeString
        coinSpecific:
          description: Coin specific information.
          type: object
        parsedTx:
          description: The parsed transaction information.
          type: object
          properties:
            minerFee:
              type: string
            spendAmount:
              type: string
            spendAmounts:
              type: array
              items:
                type: object
                properties:
                  coinName:
                    type: string
                  amountString:
                    type: string
            payGoFee:
              type: string
            outputs:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                  isPayGo:
                    type: boolean
                  value:
                    type: number
                  wallet:
                    type: string
                  walletV1:
                    type: string
                  baseAddress:
                    type: string
                  enterprise:
                    type: string
                  valueString:
                    type: string
                  data:
                    type: string
                  change:
                    type: boolean
                  coinName:
                    type: string
                required:
                  - address
                  - valueString
            inputs:
              type: array
              items:
                type: object
                properties:
                  derivationIndex:
                    type: number
                  value:
                    type: number
                  address:
                    type: string
                  valueString:
                    type: string
                  chain:
                    type: number
                  index:
                    type: number
                required:
                  - valueString
                  - value
            type:
              type: string
            memo:
              type: string
          required:
            - minerFee
            - outputs
            - inputs
      required:
        - serializedTxHex
        - signableHex
    TransactionResponse:
      type: object
      properties:
        transfer:
          $ref: '#/components/schemas/Transfer'
        txid:
          type: string
          description: The transaction's unique identifier
        tx:
          type: string
          description: The encoded transaction, either base64 for XLM or hex for other coins
        status:
          $ref: '#/components/schemas/TransferState'
    TransactionState:
      title: TransactionState
      type: string
      enum:
        - initialized
        - pendingSignature
        - eddsaPendingCommitment
        - eddsaPendingRShare
        - eddsaPendingGShare
        - ecdsaMPCv2Round1
        - ecdsaMPCv2Round2
        - ecdsaMPCv2Round3
        - readyToCombineShares
        - signed
        - held
        - delivered
        - invalidSignature
        - rejected
      description: If supplied, only transaction request transaction state changes from the provided list will trigger notifications. If not provided, all transaction request transaction state changes will trigger notifications.
    TransactionState1:
      type: string
      enum:
        - initialized
        - pendingSignature
        - eddsaPendingCommitment
        - eddsaPendingRShare
        - eddsaPendingGShare
        - readyToCombineShares
        - signed
        - held
        - delivered
        - invalidSignature
        - rejected
        - ecdsaMPCv2Round1
        - ecdsaMPCv2Round2
        - ecdsaMPCv2Round3
    Transfer:
      type: object
      properties:
        coin:
          $ref: '#/components/schemas/Coin'
        id:
          $ref: '#/components/schemas/Id'
        wallet:
          $ref: '#/components/schemas/Id'
        enterprise:
          $ref: '#/components/schemas/Id'
        txid:
          $ref: '#/components/schemas/TxId'
        txidType:
          type: string
          description: The type of the transaction id
          enum:
            - transactionHash
            - blockHash
        height:
          type: integer
          description: The height of the block this Transfer was confirmed in (999999999 if unconfirmed)
        heightId:
          type: string
          description: The unique height id of the block
        date:
          type: string
          format: date-time
          description: The date this Transfer was last updated
        confirmations:
          type: integer
          description: The number of blocks that have been confirmed since this Transfer's block was confirmed
        type:
          type: string
          description: Defines whether or not this Transfer was sent or received by the user
          enum:
            - send
            - receive
        value:
          type: integer
          description: The total value (in base units) sent by this Transfer (may be approximate for ETH and other coins where amounts in base units can exceed 2^53 - 1)
        valueString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The total value (in base units) sent by this Transfer represented as a String
        intendedValueString:
          description: A string representation (in base units) of the initial value for the transfer. This is present because when a transaction fails on chain, its value is mutated to be zero. This string is immutable and will always be the intended value of the initial transfer regardless of the final state of the transaction.
          allOf:
            - $ref: '#/components/schemas/IntegerString'
        baseValue:
          type: integer
          description: The value (in base units) sent by this transfer, excluding network fees. BitGo is deprecating this field in the future. Instead, use baseValueWithoutFees.
        baseValueString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The value (in base units) sent by this transfer, excluding network fees represented as a string. BitGo is deprecating this field in the future. Instead, use baseValueWithoutFees.
        baseValueWithoutFees:
          type: integer
          description: The value (in base units) sent by this transfer excluding network fees.
        baseValueWithoutFeesString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: The value (in base units) sent by this transfer, excluding network fees, represented as a string
        feeString:
          type: string
          description: The Transfer's fee (in base units) represented as a String
        payGoFee:
          type: integer
          description: The Transfer's BitGo fee (in base units)
        payGoFeeString:
          type: string
          description: The Transfer's BitGo fee (in base units) represented as a String
        usd:
          type: number
          description: The amount of USD of this Transfer (will be negative if it's a send)
        usdRate:
          type: number
          description: The USD price at the time this Transfer was created
        state:
          $ref: '#/components/schemas/TransferState'
        tags:
          type: array
          description: The tags to be used on this Transfer (used in Policies)
          items:
            $ref: '#/components/schemas/Id'
        history:
          type: array
          description: An audit log of events that have happened to the Transfer during its lifecycle
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
                description: The date of this history object
              user:
                $ref: '#/components/schemas/Id'
              action:
                type: string
                enum:
                  - created
                  - signed
                  - unconfirmed
                  - confirmed
                  - approved
                  - commented
                  - removed
                  - failed
                  - rejected
              comment:
                type: string
                description: If this history object is of action `commented`, this is the comment from the user
        comment:
          type: string
          description: A comment from the user
        vSize:
          type: integer
          description: The size of the transaction
        coinSpecific:
          type: object
          description: Transfer fields specific to each coin type
        sequenceId:
          type: string
          description: |
            A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly.
        entries:
          type: array
          description: An array of objects describing the change in address balances made as a result of this Transfer
          items:
            type: object
            properties:
              address:
                type: string
                description: An address affected by this Transfer
                example: 2NAUwNgXaoFj2VVnSEvNLGuez8CfdU2UCMZ
              wallet:
                allOf:
                  - $ref: '#/components/schemas/Id'
                description: Only visible when the user has access to the wallet
              value:
                type: integer
                description: The change (in base units) in the address's balance
              valueString:
                allOf:
                  - $ref: '#/components/schemas/IntegerString'
                description: The change (in base units) in the address's balance represented as a String
              isChange:
                type: boolean
                description: True if this address is a change address (only exists for UTXO coins) and if this is a `sent` Transfer
              isPayGo:
                type: boolean
                description: True if this address is the BitGo PayGo wallet
              token:
                type: string
                description: If this is a token entry, the token's symbol
                example: omg
              label:
                type: string
                description: Names of addresses given by the user.
              failed:
                type: boolean
                description: true if this entry is failed.
              associatedNativeCoinAddress:
                type: string
                description: The native coin receive address associated with the solana ATA address. This is currently present only for BitGo addresses.
          required:
            - address
            - valueString
        usersNotified:
          type: boolean
          description: Whether BitGo already sent notifications to the users of the transfer wallet
        label:
          type: string
          description: Address labels (if any) from entries concatenated.
        replaces:
          type: array
          description: Transaction IDs that this transfer replaces.
          items:
            type: string
        replacedBy:
          type: array
          description: Transaction IDs that replace this transfer.
          items:
            type: string
      required:
        - id
        - coin
        - wallet
        - txid
        - height
        - date
        - confirmations
        - type
        - valueString
        - usd
        - usdRate
        - state
        - tags
        - history
        - comment
        - coinSpecific
    Transfer1:
      title: Transfer
      type: object
      properties:
        baseValue:
          type: number
          description: The value (in base units) sent by this transfer, excluding network fees. BitGo is deprecating this field in the future.
        baseValueString:
          type: string
          description: The value (in base units) sent by this transfer, excluding network fees represented as a string. BitGo is deprecating this field in the future.
          example: '2000000'
          pattern: ^-?\d+$
        coin:
          $ref: '#/components/schemas/CoinString'
        comment:
          nullable: true
          type: string
          description: A comment from the user
        date:
          type: string
          description: The date this Transfer was last updated
          format: date-time
          title: ISO Date String
        enterprise:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        organization:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        bitgoOrg:
          type: string
          enum:
            - BitGo Trust
            - BitGo New York
            - BitGo Germany
            - BitGo Switzerland
            - BitGo Europe ApS
            - Frankfurt DE Trust
            - BitGo Singapore
            - BitGo Korea
            - BitGo Custody MENA FZE
            - BitGo India
            - BitGo Sister Trust 1
            - BitGo Inc
        entries:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: An address affected by this Transfer
                example: 2NAUwNgXaoFj2VVnSEvNLGuez8CfdU2UCMZ
              valueString:
                type: string
                description: The change (in base units) in the address' balance represented as a string
                example: '20000'
                pattern: '"^-?\d+$"'
              isChange:
                type: boolean
                description: True if this address is a change address (only exists for UTXO coins) and if this is a "send" transfer
              wallet:
                type: string
                description: Only visible when the user has access to the wallet
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              value:
                type: number
                description: The change (in base units) in the address' balance
              nftSymbol:
                type: string
              type:
                type: string
                enum:
                  - flushForwarderTokens
                  - walletFunding
                  - walletInitialization
                  - addressInitialization
                  - importedOutput
              isPayGo:
                type: boolean
                description: True if this address is the BitGo PayGo wallet
              token:
                type: string
                description: If this is a token entry, the token's symbol
                example: omg
              failed:
                type: boolean
                description: True if this entry is failed
              associatedNativeCoinAddress:
                type: string
                description: The native coin receive address associated with the solana ATA address. This is currently present only for BitGo addresses. This change was done so that there is a mapping between the two addresses in the transfer entries.
              isFee:
                type: boolean
                description: Indicates if this entry is a fee
              isInternal:
                type: boolean
                description: Indicates if this entry is internal
              memo:
                type: string
                description: Memo associated with this entry
              rewardAddress:
                type: string
                description: Reward address associated with this entry
              subtype:
                type: string
                description: Subtype of this entry
              backingFeeString:
                type: string
                description: Backing fee represented as a string
              nftId:
                type: string
                description: NFT ID associated with this entry
              tokenContractHash:
                type: string
                description: Token contract hash associated with this entry
              isReward:
                type: boolean
                description: Indicates if this entry is a reward
            required:
              - address
            description: An array of objects describing the change in address balances made as a result of this Transfer
        history:
          type: array
          items:
            type: object
            properties:
              action:
                $ref: '#/components/schemas/TransferAction'
              comment:
                nullable: true
                type: string
                description: If this history object is of action "commented", this is the comment from the user
              date:
                type: string
                description: The date of this history object
                format: date-time
                title: ISO Date String
              transferId:
                type: string
                description: The ID of the transfer that this history object is associated with
              txid:
                type: string
                description: The transaction ID of the transaction that this history object is associated with
              user:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
            required:
              - action
              - date
            description: An audit log of events that have happened to the Transfer during its lifecycle
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        pendingApproval:
          type: string
        state:
          $ref: '#/components/schemas/TransferState1'
        stakingParams:
          type: object
          properties:
            actionType:
              type: string
            coreDao:
              type: object
              properties:
                amount:
                  type: string
                  format: number
                expiration:
                  type: string
                  format: date-time
                  title: ISO Date String
                fee:
                  type: number
                rewardAddress:
                  type: string
                validator:
                  type: string
                version:
                  type: number
              required:
                - amount
                - expiration
                - fee
                - rewardAddress
                - validator
                - version
            requestId:
              type: string
            source:
              type: string
              enum:
                - external
                - internal
            validator:
              type: string
          required:
            - actionType
            - requestId
        txid:
          type: string
          description: The on-chain transaction id
          example: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
        type:
          allOf:
            - $ref: '#/components/schemas/TransferType1'
          description: Defines whether or not this Transfer was sent or received by the user
        usd:
          type: number
          description: The amount of USD of this Transfer (will be negative if it's a send)
        usdRate:
          type: number
          description: The USD rate at the time this Transfer was created
        value:
          type: number
          description: The total value (in base units) sent by this Transfer (may be approximate for ETH and other coins where amounts in base units can exceed 2^53 - 1)
        valueString:
          type: string
          description: The total value (in base units) sent by this Transfer represented as a String
          example: '2000000'
          pattern: ^-?\d+$
        wallet:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        walletType:
          type: string
          enum:
            - backing
            - cold
            - custodial
            - custodialPaired
            - hot
            - trading
          description: Wallet type
        replaces:
          type: array
          items:
            type: string
            description: Transaction IDs that this transfer replaces.
        replacedBy:
          type: array
          items:
            type: string
            description: Transaction IDs that replace this transfer.
      required:
        - coin
        - date
        - entries
        - history
        - id
        - state
        - type
        - valueString
        - wallet
    TransferAction:
      title: TransferAction
      type: string
      enum:
        - created
        - approved
        - rejected
        - signed
        - unconfirmed
        - confirmed
        - removed
        - commented
        - failed
        - regenerated
        - replaced
        - replacing
        - abandoned
    TransferAmountCondition:
      title: Amount
      type: object
      description: Enables policy rules to trigger based on withdrawal amount. The amount is by asset, such as BTC or USD.
      required:
        - name
        - label
        - description
        - status
        - parameters
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - transfer.amount
          example: transfer.amount
        label:
          type: string
          description: A label for the condition which can be shown to an end user.
          example: Spending limit
        description:
          type: string
          description: A description for the condition which can be shown to an end user.
          example: Allows creating a condition based on the Spending limit
        status:
          type: string
          description: |
            Status of the condition. Indicates if the condition is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The condition is available for use.
            * `INACTIVE` - The condition is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        parameters:
          type: array
          description: A list of Parameters to control how the condition behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/OperatorConditionParameter'
              - $ref: '#/components/schemas/AmountConditionParameter'
              - $ref: '#/components/schemas/CoinConditionParameter'
    TransferAmountConditionParameters:
      type: object
      description: Data required to evaluate the condition.
      required:
        - operator
        - amount
        - coin
      properties:
        operator:
          type: string
          enum:
            - '>'
            - '>='
            - <
            - <=
          description: The comparison operator to use when comparing the transfer amount with the given limit
          example: '>'
        amount:
          type: string
          description: The transfer amount is compared with this limit.
          example: '100000000'
        coin:
          type: string
          description: This condition only applies to transfers of this currency (USD applies to all transfers).
          example: btc
    TransferAmountConditionRequest:
      title: Amount
      type: object
      description: Transfer-amount condition.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - transfer.amount
          example: transfer.amount
        parameters:
          $ref: '#/components/schemas/TransferAmountConditionParameters'
        operator:
          $ref: '#/components/schemas/OperatorType'
    TransferDestinationTypeCondition:
      title: Destination
      type: object
      description: Enables policy rules to trigger based on destination.
      required:
        - name
        - label
        - description
        - status
        - parameters
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - transfer.destination.type
          example: transfer.destination.type
        label:
          type: string
          description: A label for the condition that you can display to users.
          example: Destination
        description:
          type: string
          description: A description for the condition that you can display to an end user.
          example: Allows creating a condition based on the type of the funds destination
        status:
          type: string
          description: |
            Status of the condition. Indicates if the condition is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The condition is available for use.
            * `INACTIVE` - The condition is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        parameters:
          type: array
          description: A list of Parameters to control how the condition behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/DestinationTypeTypeConditionParameter'
              - $ref: '#/components/schemas/DestinationTypeCoinConditionParameter'
    TransferDestinationTypeConditionParameters:
      type: object
      description: Data required to evaluate the transfer destination condition.
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - whitelistedAddress
            - nonWhitelistedAddress
          description: The type of destination this condition will match.
          example: whitelistedAddress
        coin:
          type: string
          description: The asset this condition applies to.
          example: btc
    TransferDestinationTypeConditionRequest:
      title: Destination
      type: object
      description: Destination condition.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - transfer.destination.type
          example: transfer.destination.type
        parameters:
          $ref: '#/components/schemas/TransferDestinationTypeConditionParameters'
        operator:
          $ref: '#/components/schemas/OperatorType'
    TransferInitiatorsCondition:
      title: Initiator
      type: object
      description: Enables you to create a condition based on transaction initiator.
      required:
        - name
        - label
        - description
        - status
        - parameters
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - transfer.initiators
          example: transfer.initiators
        label:
          type: string
          description: A label for the condition which can be shown to an end user.
          example: Transfer Initiators
        description:
          type: string
          description: A description for the condition which can be shown to an end user.
          example: Enables creating a condition based on if the transfer initiator is a listed user.
        status:
          type: string
          description: Identifies if the condition is currently active and usable.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        parameters:
          type: array
          description: A list of parameters that control how the condition behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/TransferInitiatorsUserIdsConditionParameter'
    TransferInitiatorsConditionParameters:
      type: object
      description: Data required to evaluate the transfer initiator condition.
      required:
        - userIds
      properties:
        userIds:
          type: array
          items:
            type: string
          description: A list of user IDs to validate for the transfer initiator.
          example: '[659bdac013822ba1e8c60d8c497197c4, 63ebe51c12381c0007415e4f50bc95ce]'
    TransferInitiatorsConditionRequest:
      title: Initiator
      type: object
      description: Initiator condition.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - transfer.initiators
          example: transfer.initiators
        parameters:
          $ref: '#/components/schemas/TransferInitiatorsConditionParameters'
        operator:
          $ref: '#/components/schemas/OperatorType'
    TransferInitiatorsUserIdsConditionParameter:
      type: object
      description: The list of user ids the transfer initiator condition will checker against for triggering.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - userIds
          example: userIds
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: User Ids
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The list of user ids to check the transfer initiator against.
        type:
          type: string
          description: The type of acceptable values for this condition parameter, a valid HMAC BitGo ID.
          enum:
            - BITGO_USER_ID
          example: BITGO_USER_ID
        required:
          type: string
          description: ALWAYS if the parameter is required otherwise OPTIONAL.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'true'
    TransferState:
      type: string
      example: confirmed
      enum:
        - confirmed
        - failed
        - initialized
        - pendingApproval
        - rejected
        - removed
        - replaced
        - signed
        - unconfirmed
    TransferState1:
      title: TransferState
      type: string
      enum:
        - initialized
        - pendingApproval
        - rejected
        - signed
        - unconfirmed
        - confirmed
        - removed
        - failed
        - replaced
        - deleted
    TransferTokenIntent:
      title: TransferTokenIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - transferToken
            recipients:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      tokenData:
                        $ref: '#/components/schemas/TokenData'
                  - $ref: '#/components/schemas/RecipientEntry'
          required:
            - intentType
            - recipients
        - $ref: '#/components/schemas/BaseIntent'
    TransferTokenIntent1:
      title: Transfer Token
      allOf:
        - $ref: '#/components/schemas/BaseIntent2'
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - transferToken
            recipients:
              type: array
              items:
                $ref: '#/components/schemas/RecipientEntry1'
    TransferType1:
      title: TransferType
      type: string
      enum:
        - send
        - receive
    TransferVelocityLimitCondition:
      title: Velocity limit
      type: object
      description: Enables policy rules to trigger based on how much withdraws over a period of time from a specific wallet or from all wallets. The amount is by asset, such as BTC or USD.
      required:
        - name
        - label
        - description
        - status
        - parameters
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - transfer.velocity.limit
          example: transfer.velocity.limit
        label:
          type: string
          description: A label for the condition which can be shown to an end user.
          example: Spending Limit
        description:
          type: string
          description: A description for the condition which can be shown to an end user.
          example: Allows creating a condition based on the amount of coin or USD that can be spent over a period of time
        status:
          type: string
          description: |
            Status of the condition. Indicates if the condition is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The condition is available for use.
            * `INACTIVE` - The condition is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        parameters:
          type: array
          description: A list of Parameters to control how the condition behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/VelocityAmountConditionParameter'
              - $ref: '#/components/schemas/TimeWindowConditionParameter'
              - $ref: '#/components/schemas/VelocityCoinConditionParameter'
              - $ref: '#/components/schemas/ScopeConditionParameter'
    TransferVelocityLimitConditionParameters:
      type: object
      description: Data required to evaluate the transfer velocity limit condition.
      required:
        - scope
        - timeWindow
        - amount
        - coin
      properties:
        scope:
          type: string
          enum:
            - wallet
            - enterprise
          description: Entities to include in the velocity calculation.
          example: wallet
        timeWindow:
          type: string
          description: A window of time in which a set of amount can be spent.
          example: '60'
        amount:
          type: string
          description: The transfer amount is compared with this limit.
          example: '100000000'
        coin:
          type: string
          description: The unit that the amount is denoted in, in either crypto or a fiat currency.
          example: ETH
    TransferVelocityLimitConditionRequest:
      title: Velocity limit
      type: object
      description: Velocity-limit condition.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - transfer.velocity.limit
          example: transfer.velocity.limit
        parameters:
          $ref: '#/components/schemas/TransferVelocityLimitConditionParameters'
        operator:
          $ref: '#/components/schemas/OperatorType'
    TransferWebhookCoinConditionParameter:
      type: object
      description: The asset to check the transfer against to determine if a webhook payload should be sent.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - coin
          example: coin
        label:
          type: string
          description: A description for the condition parameter that you can display to an end user.
          example: Asset
        description:
          type: string
          description: The asset this condition applies to.
          example: The asset this condition applies to
        type:
          type: string
          description: The type of acceptable values for this condition parameter. Must be a valid coin ticker string.
          enum:
            - COIN
          example: COIN
        required:
          type: string
          description: ALWAYS if the parameter is required otherwise OPTIONAL.
          enum:
            - OPTIONAL
          example: OPTIONAL
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
    TransferWebhookCondition:
      type: object
      description: Enables you to create a condition based on if the transfer should send a payload to a webhook URL and receive a status code.
      required:
        - name
        - label
        - description
        - status
        - parameters
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - transfer.webhook
          example: transfer.webhook
        label:
          type: string
          description: A label for the condition that you can display to an end user.
          example: Transfer Webhook
        description:
          type: string
          description: A description for the Condition which can be shown to an end user.
          example: Enables creating a condition based on if the transfer should send a payload to a webhook URL and receive a status code.
        status:
          type: string
          description: Identifies if the condition is currently active and usable.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        parameters:
          type: array
          description: A list of parameters that control how the condition behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/TransferWebhookUrlConditionParameter'
              - $ref: '#/components/schemas/TransferWebhookCoinConditionParameter'
    TransferWebhookConditionParameters:
      type: object
      description: Data required to evaluate the transfer webhook condition.
      required:
        - webhookUrl
      properties:
        webhookUrl:
          type: string
          description: The webhook url to post transfer payload to.
          example: https://webhook.site/91561f7b-4141-4ee2-8336-e10650cd000f
        coin:
          type: string
          description: The asset this condition applies to.
          example: btc
    TransferWebhookConditionRequest:
      title: Webhook
      type: object
      description: Transfer webhook condition.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - transfer.webhook
          example: transfer.webhook
        parameters:
          $ref: '#/components/schemas/TransferWebhookConditionParameters'
    TransferWebhookUrlConditionParameter:
      type: object
      description: The webhook URL the transfer sends a payload to.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - webhookUrl
          example: webhookUrl
        label:
          type: string
          description: A description for the condition parameter that you can display to an end user.
          example: Webhook URL
        description:
          type: string
          description: The webhook URL to post the transfer payload to.
          example: The webhook URL to post the transfer payload to
        type:
          type: string
          description: The type of acceptable values for this condition parameter. Must be a valid webhook URL string.
          enum:
            - FREE_FORM
          example: FREE_FORM
        required:
          type: string
          description: ALWAYS if the parameter is required otherwise OPTIONAL.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
    TransfersResponse:
      type: object
      properties:
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedTransferWithInputsOutputs'
        coin:
          $ref: '#/components/schemas/Coin'
        nextBatchPrevId:
          $ref: '#/components/schemas/NextBatchPrevId'
      required:
        - transfers
        - coin
    TrimmedBalance:
      title: TrimmedBalance
      type: object
      properties:
        balanceString:
          type: string
          description: String representation of the balance. Guaranteed to not lose precision.
          example: '500000'
        confirmedBalanceString:
          type: string
          description: The total balance of confirmed transactions for the address (in the chain's base unit). Guaranteed to not lose precision.
          example: '400000'
        spendableBalanceString:
          type: string
          description: The total balance of the address (in the chain's base unit) which may be used as inputs for creating new transactions in string representation. Guaranteed to not lose precision.
          example: '40000'
        updated:
          oneOf:
            - type: string
              format: date-time
              title: ISO Date String
            - type: string
              format: date
              title: Date String
          description: The last time a transaction affected the balance of this address
        balance:
          type: number
          example: 50000
        lockedBalanceString:
          type: string
        reservedBalanceString:
          type: string
        totalReceived:
          type: number
          description: The total amount received on this address (in the chain's base unit)
        totalSent:
          type: number
          description: The total amount sent from this address (in the chain's base unit)
        transferCount:
          type: number
        tokens:
          type: object
          additionalProperties: {}
        nfts:
          type: object
          additionalProperties: {}
        unsupportedNfts:
          type: object
          additionalProperties: {}
        type: {}
        metadata: {}
      required:
        - balanceString
        - confirmedBalanceString
        - spendableBalanceString
    TronAddress:
      title: Tron Address
      type: object
      properties:
        rootPub:
          type: string
      required:
        - rootPub
    TronWallet:
      title: Tron Wallet
      type: object
      properties:
        rootAddress:
          type: string
        rootPub:
          type: string
        pendingChainInitialization:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        minimumFunding:
          type: number
      required:
        - rootAddress
        - rootPub
        - pendingChainInitialization
        - creationFailure
        - minimumFunding
    TrustOrg:
      title: TrustOrg
      type: string
      enum:
        - BitGo Trust
        - BitGo New York
        - BitGo Germany
        - BitGo Switzerland
        - BitGo Europe ApS
        - Frankfurt DE Trust
        - BitGo Singapore
        - BitGo Korea
        - BitGo Custody MENA FZE
        - BitGo India
        - BitGo Sister Trust 1
    TrustOrg2:
      title: TrustOrg
      allOf:
        - $ref: '#/components/schemas/TrustOrgEnum'
    TrustOrgEnum:
      type: string
      enum:
        - BitGo Trust
        - BitGo New York
        - BitGo Germany
        - BitGo Switzerland
        - BitGo Europe ApS
        - Frankfurt DE Trust
        - BitGo Singapore
        - BitGo Korea
        - BitGo Custody MENA FZE
        - BitGo Sister Trust 1
    TrustedTokenState:
      title: TrustedTokenState
      type: string
      enum:
        - pending
        - active
    Trustline:
      type: object
      properties:
        token:
          type: string
          description: One of the supported coin types for Stellar tokens listed in [Coin-specific-implementation](#tag/Coin-specific-implementation)
          example: txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L
        action:
          enum:
            - add
            - remove
        limit:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: String representation of the amount to limit in base units (stroops)
    TssConfig:
      title: TssConfig
      type: object
      properties:
        enterpriseId:
          type: string
          description: The enterprise ID
          example: 5d1a61a5c30ae10025f9b2b3
        ecdsa:
          $ref: '#/components/schemas/EcdsaConfig'
      required:
        - enterpriseId
        - ecdsa
    TssConfigPartyChallenge:
      title: TssConfigPartyChallenge
      allOf:
        - type: object
          properties:
            verifiers:
              $ref: '#/components/schemas/ChallengeVerifiers'
            paillierBlumProof:
              $ref: '#/components/schemas/PaillierBlumProof'
            ntildeProof:
              $ref: '#/components/schemas/NtildeProof'
          required:
            - verifiers
        - $ref: '#/components/schemas/Challenge'
    TssSettings:
      title: TssSettings
      type: object
      properties:
        coinSettings:
          type: object
          additionalProperties:
            type: object
            properties:
              walletCreationSettings:
                $ref: '#/components/schemas/TssWalletCreationSettings'
              canMigrateToMPCv2:
                type: boolean
            required:
              - walletCreationSettings
      required:
        - coinSettings
    TssWalletCreationSettings:
      title: TssWalletCreationSettings
      type: object
      properties:
        multiSigTypeVersion:
          $ref: '#/components/schemas/MultisigTypeVersion'
        custodialMultiSigTypeVersion:
          $ref: '#/components/schemas/MultisigTypeVersion'
        coldMultiSigTypeVersion:
          $ref: '#/components/schemas/MultisigTypeVersion'
        defaultWalletVersion:
          type: number
    TxAddress:
      type: object
      properties:
        address:
          type: string
        options:
          type: object
      required:
        - address
    TxBase64:
      type: string
      description: Serialized transaction base64 (applies to XLM only)
      example: AAAAAGRnXg19FteG/7zPd+jDC7LDvRlzgfFC+JrPhRep0kYiAAAAZAB/4cUAAAACAAAAAAAAAAAAAAABAAAAAQAAAABkZ14NfRbXhv+8z3fowwuyw70Zc4HxQviaz4UXqdJGIgAAAAEAAAAAmljT/+FedddnAHwo95dOC4RNy6eVLSehaJY34b9GxuYAAAAAAAAAAAehIAAAAAAAAAAAAUrgwAkAAABAOExcvVJIUJv9HuVfbV0y7lRPRARv4wDtcdhHG7QN40h5wQ2uwPF52OGQ8KY+66a1A/8lNKB75sgj2xj44s8lDQ==
    TxHex:
      type: string
      description: Serialized transaction hex
      example: 01000000000101d58f82d996dd872012675adadf4606734906b25a413f6e2ee535c0c10aef96020000000000ffffffff028de888000000000017a914c91aa24f65827eecec775037d886f2952b73cbe48740420f000000000017a9149304d18497b9bfe9532778a0f06d9fff3b3befaf870500473044022023d7210ba6d8bbd7a28b8af226f40f7235caab79156f93f9c9969fc459ea7f73022050fbdca788fba3de686b66b3501853695ff9d6f375867470207d233b099576e001000069522103d4788cda52f91c1f6c82eb91491ca76108c9c5f0839bc4f02eccc55fedb3311c210391bcef9dcc89570a79ba3c7514e65cd48e766a8868eca2769fa9242fdcc796662102ef3c5ebac4b54df70dea1bb2655126368be10ca0462382fcb730e55cddd2dd6a53aec8b11400
    TxId:
      type: string
      description: The on-chain transaction id
      example: b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26
    TxUsdThresholdRuleCondition:
      title: TxUsdThresholdRuleCondition
      type: object
      properties:
        lowerBound:
          type: string
        upperBound:
          type: string
      required:
        - lowerBound
    U2FDetails:
      title: U2FDetails
      type: object
      properties:
        certificate:
          type: string
        keyHandle:
          type: string
        publicKey:
          type: string
    UnStakingRequestPOSTBody:
      type: object
      properties:
        clientId:
          description: Optional user generated identifier to detect duplicated requests.
          type: string
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
      required:
        - type
    UnStakingSpendableAttributes:
      type: object
      properties:
        max:
          description: The maximum spendable amount.
          type: string
        min:
          description: The minimum spendable amount.
          type: string
        multiplier:
          description: The multiplier amount to be staked. Default to 1, but for coins like where the amount to stake is multipler of 32 ETH, this is 32 in base unit, to allow validation.
          type: string
        fee:
          description: The blockchain fee to submit the transactions needed to unstake.
          type: string
        multipleDelegations:
          description: True, if more than one active staking delegation exists for a wallet.
          type: boolean
    Unlock:
      title: Unlock
      type: object
      properties:
        expires:
          type: string
          format: date-time
          title: ISO Date String
        time:
          type: string
          format: date-time
          title: ISO Date String
        txCount:
          type: number
        txValue:
          type: number
        txValueLimit:
          type: number
    Unlock1:
      type: object
      properties:
        time:
          type: string
          format: date-time
        expires:
          type: string
          format: date-time
        txCount:
          type: integer
        txValue:
          type: integer
        txValueLimit:
          type: number
        spendingLimits:
          $ref: '#/components/schemas/SpendingLimits'
    UnlockRequest:
      type: object
      properties:
        duration:
          type: integer
          minimum: 1
          maximum: 3600
          default: 600
          description: Number of seconds that the session will stay unlocked
        otp:
          $ref: '#/components/schemas/Otp'
    UnmappedCounterpartyPartySettlementAmountsRecord:
      title: UnmappedCounterpartyPartySettlementAmountsRecord
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: string
            description: For unmapped settlement amounts where the amount can be either BigNumberFromString or BigIntFromString. This provides flexibility in how monetary values are represented in settlement requests.
    UnmappedPartySettlementAmountsRecord:
      title: UnmappedPartySettlementAmountsRecord
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: string
          description: For unmapped settlement amounts where the amount can be either BigNumberFromString or BigIntFromString. This provides flexibility in how monetary values are represented in settlement requests.
    UnmappedSettlementAmountsRecord:
      title: UnmappedSettlementAmountsRecord
      oneOf:
        - $ref: '#/components/schemas/UnmappedPartySettlementAmountsRecord'
        - $ref: '#/components/schemas/UnmappedCounterpartyPartySettlementAmountsRecord'
    UnsignedTransaction:
      title: UnsignedTransaction
      type: object
      properties:
        parsedTx:
          $ref: '#/components/schemas/ParsedTx'
        serializedTxHex:
          type: string
          description: The unsigned transaction as a hex string.
        signableHex:
          type: string
          description: The portion of a transaction used to generate a signature (may or may not be the same as serializedTxHex) as a hex string.
        derivationPath:
          type: string
          description: A bip32 path.
        coinSpecific:
          allOf:
            - type: object
              properties:
                nonceAddress:
                  type: string
                stakingAddress:
                  type: string
            - type: object
              additionalProperties: {}
          description: Coin specific information.
        feeInfo:
          type: object
          properties:
            fee:
              oneOf:
                - type: string
                - type: number
            feeString:
              type: string
          required:
            - fee
            - feeString
      required:
        - parsedTx
        - serializedTxHex
        - signableHex
    Unspent:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UnspentId'
        address:
          type: string
          description: The address of this unspent
          example: 2MsKxhhkDo5WaLaYRGA9Cr3iSQPyXsu6Fi2
        value:
          type: integer
        valueString:
          $ref: '#/components/schemas/IntegerString'
        blockHeight:
          type: integer
          description: The block this Unspent was created in
        date:
          type: string
          format: date-time
          description: The date this unspent was created
          example: '2017-03-25T23:01:40.248Z'
        coinbase:
          type: boolean
          description: True if this unspent came from the coinbase transaction
        wallet:
          $ref: '#/components/schemas/Id'
        fromWallet:
          $ref: '#/components/schemas/Id'
        chain:
          type: integer
          description: The type of this unspent's address (P2SH, P2WSH, etc...)
          example: 0
        index:
          type: integer
          description: A monotonic counter used when creating new addresses
        redeemScript:
          type: string
          description: The Script program used to cryptographically verify spending this unspent
          example: 522102f1e990044d2a8be43d5b500bbdcb36277b97a4b07e01c5101ae8ec1568bfd6532103dab7dc82f2fc8c28200c1bdeca9c4cf181e0ca257395829cbd599395048afb57210205422e711827d8356f2fb75334d863941dd7eb45bd5788fa231dc5fa755135b653ae
        witnessScript:
          type: string
          description: The segwit Script program used to cryptographically verify spending this unspent
          example: 52210351311cd81144e6cbdba561d24dfc22644cb02d053339d4beace03231b3be4f372103a8d0c1a375b9ee1a2411f9f8e18373be7f228b18260f63bbfca48809170ed08b2103c3bd8bd074657bbe9ee6714b31a4a54b6fd5b5cda0e1030122f9bf46b5034f6b53ae
        isSegwit:
          type: boolean
    UnspentId:
      type: string
      description: The id of the unspent in the form <txid>:<tx_index>
      example: 003f688cc349f1fca8ac5ffa21671ca911b6ef351085c60733ed8c2ebf162cb8:2
    UnstakeIntent:
      title: UnstakeIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - unstake
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent'
    UnstakeIntent1:
      title: UnstakeIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - unstake
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent1'
    UnstakeIntent2:
      title: Generic Unstake
      allOf:
        - $ref: '#/components/schemas/BaseStakeIntent2'
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - unstake
          required:
            - intentType
    UnstakingDisclaimerAttributes:
      type: object
      properties:
        info:
          description: Disclaimer info
          type: string
        transactionsNeeded:
          description: The number of transactions needed for an unstaking request.
          type: integer
    UnstakingPermissionAttributes:
      type: object
      properties:
        enabled:
          description: If the wallet has unstaking request submission permission.
          type: string
        disabledReason:
          description: The reason that unstaking request submission has been disabled.
          type: string
    UnsupportedTokenRecipientEntryItem:
      title: UnsupportedTokenRecipientEntryItem
      type: object
      properties:
        tokenContractAddress:
          $ref: '#/components/schemas/optionalString'
        decimals:
          $ref: '#/components/schemas/optionalNumber'
    UpdateBitgoChallenge:
      title: UpdateBitgoChallenge
      type: object
      properties:
        verifiers:
          type: object
          properties:
            adminSignature:
              type: string
              description: The admin signature is a hex string. Users should verify that the admin signature matches for the range proof challenge.
              minLength: 1
          required:
            - adminSignature
      required:
        - verifiers
    UpdateCommentRequest:
      type: object
      properties:
        comment:
          type: string
          description: The new comment for the transfer.
    UpdateEnterprise:
      type: object
      properties:
        legalIdentifiers:
          $ref: '#/components/schemas/PlatformLegalIdentifiers'
        approvalsRequired:
          type: integer
          minimum: 1
          description: How many Enterprise Admins are required for action to fire
        distributedCustody:
          $ref: '#/components/schemas/DistributedCustodyUpdateEnterprise'
        usersViewAllWallets:
          type: boolean
          description: Allow users to view all wallets
    UpdateEnterpriseChallenge:
      title: UpdateEnterpriseChallenge
      type: object
      properties:
        ntilde:
          type: string
          description: Range proof challenge value.
          minLength: 1
        h1:
          type: string
          description: Range proof challenge value.
          minLength: 1
        h2:
          type: string
          description: Range proof challenge value.
          minLength: 1
        verifiers:
          type: object
          properties:
            adminSignature:
              type: string
              description: The admin signature is a hex string. Users should verify that the admin signature matches for the range proof challenge.
              minLength: 1
          required:
            - adminSignature
        paillierBlumProof:
          allOf:
            - $ref: '#/components/schemas/PaillierBlumProof'
          description: The paillierBlumProof value is only required when creating the initial config.
        ntildeProof:
          allOf:
            - $ref: '#/components/schemas/NtildeProof'
          description: The ntildeProof value is only required when creating the initial config.
      required:
        - ntilde
        - h1
        - h2
        - verifiers
    UpdatePinnedWalletsResponse:
      title: UpdatePinnedWalletsResponse
      type: object
      properties:
        pinnedWallets:
          $ref: '#/components/schemas/PinnedWallets'
      required:
        - pinnedWallets
    UpdateRemovePolicyRule:
      type: object
      properties:
        coin:
          allOf:
            - $ref: '#/components/schemas/Coin'
          description: |
            Policy rules of types `allTx`, `coinAddressWhitelist`, `coinAddressBlacklist` and `webhook` are recommended to
            be used without setting a coin so that they will apply to all coins and tokens that could be in a wallet. If
            your policy rule is of one of these types and has a coin set on it, you also need to set the coin in the body.
            This is necessary because the id alone may not be sufficient for finding the correct rule to update or delete.
        id:
          type: string
          description: The id of the rule. The combination of id and coin must be unique among rules in the policy.
        type:
          $ref: '#/components/schemas/PolicyRuleTriggers'
        condition:
          $ref: '#/components/schemas/PolicyRuleUpdateConditions'
        action:
          $ref: '#/components/schemas/PolicyRuleActions'
        lockDate:
          type: string
          description: The time at which this rule becomes immutable
          format: date-time
      required:
        - id
        - type
        - action
    UpdateSendLabel:
      type: object
      properties:
        label:
          type: string
          maxLength: 250
          description: A human-readable mapping to an address
      required:
        - label
    UpdateWallet:
      type: object
      properties:
        approvalsRequired:
          $ref: '#/components/schemas/ApprovalsRequired'
        buildDefaults:
          $ref: '#/components/schemas/WalletBuildDefaults'
        disableTransactionNotifications:
          type: boolean
        label:
          $ref: '#/components/schemas/WalletLabel'
        customChangeKeySignatures:
          $ref: '#/components/schemas/CustomChangeKeySignatures'
        coinSpecific:
          $ref: '#/components/schemas/WalletUpdateCoinSpecific'
    UpdateWalletShareResponse:
      title: UpdateWalletShareResponse
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/WalletShareState'
          description: New state of the wallet share after update
        changed:
          type: boolean
          description: Whether the wallet share was changed
      required:
        - state
        - changed
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        isActive:
          type: boolean
        isFrozen:
          type: boolean
        freezeReason:
          type: string
          example: Frozen due to suspicious activity
        name:
          $ref: '#/components/schemas/Name'
        username:
          $ref: '#/components/schemas/Email'
        email:
          type: object
          properties:
            email:
              $ref: '#/components/schemas/Email'
            verified:
              type: boolean
              example: true
        phone:
          type: object
          properties:
            phone:
              type: string
              example: 408-718-6885
            verified:
              type: boolean
              example: true
        country:
          type: string
          example: USA
        state:
          type: string
          example: New York
        kycStatus:
          type: string
          example: approved
          description: user's overall KYC status
          enum:
            - approved
            - pending
            - rejected
            - unverified
    User2:
      title: User
      allOf:
        - type: object
          properties:
            agreements:
              allOf:
                - $ref: '#/components/schemas/Agreements'
              description: The agreements the user has accepted
            allowedCoins:
              type: array
              items:
                type: string
                description: The coins the user is allowed to use
            bitgoEmployee:
              type: boolean
              description: Whether the user is a BitGo employee
            currency:
              allOf:
                - $ref: '#/components/schemas/Currency1'
              description: The user's preferred currency
            disableReset2FA:
              type: boolean
              description: Whether the user has disabled 2FA reset
            organizations:
              type: array
              items:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      type: string
                      enum:
                        - admin
                  role:
                    $ref: '#/components/schemas/OrganizationRole'
                  id:
                    type: string
                  name:
                    type: string
                required:
                  - permissions
                  - role
                description: The organizations the user is a member of
            featureFlags:
              type: array
              items:
                type: string
                description: Any feature flags the user has enabled
            forceResetPassword:
              type: boolean
              description: Whether the user has forced a password reset
            identity:
              allOf:
                - $ref: '#/components/schemas/Identity'
              description: The user's identity information
            otpDevices:
              type: array
              items:
                type: object
                properties:
                  createDate:
                    type: string
                    format: date-time
                    title: ISO Date String
                  id:
                    type: string
                  backupPhone:
                    type: string
                  label:
                    type: string
                  lastValidatedDate:
                    type: string
                    format: date-time
                    title: ISO Date String
                  phone:
                    type: string
                  registeredKey:
                    $ref: '#/components/schemas/U2FDetails'
                  type:
                    $ref: '#/components/schemas/OtpType'
                  verified:
                    type: boolean
                  scopes:
                    type: array
                    items:
                      type: string
                      enum:
                        - wallet_hot
                  extensions:
                    type: object
                    additionalProperties:
                      type: boolean
                  prfSalt:
                    type: string
                  isPasskey:
                    type: boolean
                required:
                  - createDate
                  - id
                description: The user's devices that can be used for OTP authentication
            phone:
              allOf:
                - $ref: '#/components/schemas/Phone'
              description: The user's phone number
            timezone:
              type: string
              description: The user's timezone
            apps: {}
            country:
              type: string
              description: The country of the user
              example: USA
            ecdhKeychain:
              nullable: true
              type: string
              description: The user's ECDH keychain
            isActive:
              type: boolean
              description: Whether the user is active
            isFrozen:
              type: boolean
              description: Whether the user is frozen
            freezeReason:
              type: string
              description: The reason the user is frozen if they are frozen
              example: Frozen due to suspicious activity
            freeze:
              type: object
              description: Freeze object that will hold the start time and expiration time of a user's freeze. By default the freeze is infinite, and this field will eventually override the isFrozen boolean field
              properties:
                time:
                  type: string
                  format: date-time
                  title: ISO Date String
                expires:
                  type: string
                  format: date-time
                  title: ISO Date String
            lastLogin:
              type: string
              description: The last login time of the user
              format: date-time
              title: ISO Date String
            locale:
              type: string
              description: The user's locale
            pgpKey:
              type: string
              description: The user's PGP key
            rateLimits: {}
            referrer:
              allOf:
                - $ref: '#/components/schemas/Referrer'
              description: The referrer of the user
            signupDomain:
              type: string
              description: The signup domain of the user
            state:
              type: string
              description: The state of the user
              example: New York
            sourceVerificationRequired:
              type: boolean
              description: Whether source verification is required for the user
            sourceVerificationRequiredForReadOnlyAccess:
              type: boolean
              description: Whether source verification is required for read-only access
            recoveryCodeSet:
              type: object
              description: The recovery code set for the user
              properties:
                id:
                  type: string
                  description: The ID of the recovery code set
                allCodesUsed:
                  type: boolean
                  description: Whether all recovery codes have been used
              required:
                - id
                - allCodesUsed
            createTime:
              type: string
            passwordUpdatedAt:
              type: string
              format: date-time
              title: ISO Date String
          required:
            - agreements
            - allowedCoins
            - bitgoEmployee
            - currency
            - disableReset2FA
            - organizations
            - featureFlags
            - forceResetPassword
            - identity
            - otpDevices
            - phone
            - timezone
        - $ref: '#/components/schemas/UserRequiredFields'
    UserKycState:
      type: string
      enum:
        - approved
        - flagged
        - flagged_retry_allowed
        - inreview
        - pending
        - rejected
        - unverified
    UserKycState1:
      title: UserKycState
      type: string
      enum:
        - unverified
        - pending
        - approved
        - rejected
        - qrscanned
        - inreview
        - flagged
        - flagged_retry_allowed
    UserRequiredFields:
      title: UserRequiredFields
      type: object
      description: Fields that will always be populated in accordance with the defined codec If you find other fields that will provably always be populated on a given user (even for legacy users created long ago), that field can be moved to UserRequiredFields
      properties:
        id:
          type: string
          description: The unique identifier for the user
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        username:
          type: string
          description: The username of the user
          example: user@email.com
          format: email
        name:
          allOf:
            - $ref: '#/components/schemas/Name1'
          description: The name of the user
        enterprises:
          type: array
          items:
            type: object
            properties:
              permissions:
                type: array
                items:
                  type: string
                  enum:
                    - admin
                    - auditor
                  description: 'This type represents the permissions that can be assigned to a user when adding them to an enterprise 1. ''admin'': Add/remove users, Create wallets, Manage enterprise policies, Add Bank Accounts, Receive invitations to wallets 2. ''auditor'': View audit logs across the enterprise, Receive invitations to wallets'
              id:
                type: string
              beneficialOwner:
                type: boolean
              primaryContact:
                type: string
              kycState:
                $ref: '#/components/schemas/KycState'
              bitgoOrg:
                type: string
              name:
                type: string
            required:
              - permissions
            description: The enterprise(s) the user is a member of
        email:
          allOf:
            - $ref: '#/components/schemas/Email1'
          description: The email address of the user
      required:
        - id
        - username
        - name
        - enterprises
        - email
    UserSharingKey:
      type: object
      required:
        - email
      properties:
        email:
          $ref: '#/components/schemas/Email'
    UserVerificationElements:
      title: UserVerificationElements
      type: object
      properties:
        AccountInfo:
          type: object
          properties:
            UserId:
              type: string
            Balance:
              $ref: '#/components/schemas/BalancesCodec'
          required:
            - UserId
            - Balance
        ProofInfo:
          type: object
          properties:
            UserMerklePath:
              type: array
              items:
                type: string
            UserMerklePosition:
              type: number
            BottomProof:
              $ref: '#/components/schemas/LowerProof'
            MiddleProof:
              $ref: '#/components/schemas/LowerProof'
            TopProof:
              $ref: '#/components/schemas/TopProof'
          required:
            - UserMerklePath
            - UserMerklePosition
            - BottomProof
            - MiddleProof
            - TopProof
      required:
        - AccountInfo
        - ProofInfo
    UtxoAddress:
      title: Utxo Address
      type: object
      properties:
        redeemScript:
          type: string
        witnessScript:
          type: string
    UtxoFeeInfo:
      title: UTXO
      type: object
      description: feeInfo (UTXO)
      properties:
        size:
          type: integer
          description: Estimated size of the transaction in bytes
          example: 776
        fee:
          type: integer
          description: Estimated fee in base unit for the transaction
          example: 38800
        feeRate:
          allOf:
            - $ref: '#/components/schemas/IntegerOrString'
            - example: 10000
          description: |
            Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).
        payGoFee:
          type: integer
          description: BitGo fee of the transaction (in base units)
          example: 0
        payGoFeeString:
          type: integer
          description: BitGo fee of the transaction (in base units) represented as a String
          example: '0'
    UtxoTransactionFormat:
      type: string
      description: |-
        [UTXO only] Format of the returned transaction hex serialization.
        `legacy` for serialized transaction in custom bitcoinjs-lib format. `psbt` for BIP174 serialized transaction
      enum:
        - legacy
        - psbt
        - psbt-lite
      default: legacy
      example: psbt
    UtxoTxInfo:
      title: UTXO
      type: object
      description: txInfo (UTXO)
      properties:
        changeAddresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressString3'
        nOutputs:
          type: integer
          description: Number of outputs
          example: 2
        nP2SHInputs:
          type: integer
          example: 0
        nSegwitInputs:
          type: integer
          example: 1
        unspents:
          type: array
          items:
            $ref: '#/components/schemas/Unspent'
        walletAddressDetails:
          $ref: '#/components/schemas/Address2'
    UtxoWallet:
      title: Utxo Wallet
      type: object
      properties:
        customChangeWalletId:
          type: string
        customChangeAddressType:
          type: string
        sendQueueInferredScriptTypes:
          type: array
          items:
            type: string
    V1AllocationGetOutput:
      title: V1AllocationGetOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the allocation/deallocation. This is a UUID that uniquely identifies the allocation record.
          title: uuid
        amount:
          allOf:
            - $ref: '#/components/schemas/PositiveAllocationAmount'
          description: The amount of the allocation/deallocation. Contains both the currency identifier and the quantity in base units.
        connectionId:
          type: string
          description: The unique identifier of the connection this allocation is for. This identifies a connection between a client and partner.
          title: uuid
        clientExternalId:
          type: string
          description: External identifier provided by the client when creating the allocation/deallocation. Used for idempotence and correlation with client systems.
          minLength: 1
        partnerExternalId:
          type: string
          description: External identifier of the allocation/deallocation in the partner system. May be populated when partners provide their own identifier for the allocation.
          minLength: 1
        initiatedBy:
          type: string
          description: The identifier of the user that initiated the allocation/deallocation. Represents the user ID from the BitGo platform.
          minLength: 1
        notes:
          type: string
          description: Optional notes provided by the client when creating the allocation/deallocation. Can contain additional context or information about the purpose of the allocation.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the allocation/deallocation was created. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the allocation/deallocation was last updated. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        retriable:
          type: boolean
          description: Indicates whether or not the allocation/deallocation is retriable. When true, clients may retry the operation if it did not complete successfully. Retry can be performed by re-sending the same allocation request that was originally sent.
        reason:
          nullable: true
          type: string
          minLength: 1
          description: The reason that the allocation/deallocation is not cleared. Provides a descriptive explanation for why the allocation is in the reserved state. Will not be defined if the allocation is cleared.
        status:
          allOf:
            - $ref: '#/components/schemas/AllocationStatus'
          description: 'Status of the allocation/deallocation. Possible values: - reserved: The amount for allocation/deallocation is reserved but operation has not completed. This is a temporary state awaiting final resolution. - cleared: Terminal state; the amount for allocation/deallocation is cleared and funds have been successfully allocated. This indicates a successful operation. - released: Terminal state; the amount for allocation/deallocation is released and funds have been returned. This indicates the operation failed, either because balance was insufficient for allocation/deallocation, or that the partner rejected the request to allocate/deallocate.'
        type:
          allOf:
            - $ref: '#/components/schemas/AllocationType'
          description: 'The type of the entity. Possible values: - allocation: Represents an allocation of funds to a connection. This moves funds from a client''s BitGo account to make them available for the specified connection. - deallocation: Represents a deallocation of funds from a connection. This moves funds from a connection back to the client''s BitGo account.'
      required:
        - id
        - amount
        - connectionId
        - clientExternalId
        - initiatedBy
        - createdAt
        - updatedAt
        - retriable
        - reason
        - status
        - type
    V1AllocationGetPayload:
      title: V1AllocationGetPayload
      type: object
      properties:
        allocation:
          $ref: '#/components/schemas/V1AllocationGetOutput'
      required:
        - allocation
    V1AllocationsClearedPostPayload:
      title: V1AllocationsClearedPostPayload
      type: object
      properties:
        allocation:
          allOf:
            - $ref: '#/components/schemas/V1ClearedAllocation'
          description: The allocation record in its cleared state. This contains all allocation details with a status of 'cleared', indicating the allocation was successfully completed.
      required:
        - allocation
    V1AllocationsGetPayload:
      title: V1AllocationsGetPayload
      type: object
      properties:
        allocations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The unique identifier of the allocation/deallocation. This is a UUID that uniquely identifies the allocation record.
                title: uuid
              amount:
                allOf:
                  - $ref: '#/components/schemas/PositiveAllocationAmount'
                description: The amount of the allocation/deallocation. Contains both the currency identifier and the quantity in base units.
              connectionId:
                type: string
                description: The unique identifier of the connection this allocation is for. This identifies a connection between a client and partner.
                title: uuid
              clientExternalId:
                type: string
                description: External identifier provided by the client when creating the allocation/deallocation. Used for idempotence and correlation with client systems.
                minLength: 1
              partnerExternalId:
                type: string
                description: External identifier of the allocation/deallocation in the partner system. May be populated when partners provide their own identifier for the allocation.
                minLength: 1
              initiatedBy:
                type: string
                description: The identifier of the user that initiated the allocation/deallocation. Represents the user ID from the BitGo platform.
                minLength: 1
              notes:
                type: string
                description: Optional notes provided by the client when creating the allocation/deallocation. Can contain additional context or information about the purpose of the allocation.
                minLength: 1
              createdAt:
                type: string
                description: The date and time when the allocation/deallocation was created. Represented as an ISO 8601 formatted date string.
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                description: The date and time when the allocation/deallocation was last updated. Represented as an ISO 8601 formatted date string.
                format: date-time
                title: ISO Date String
              retriable:
                type: boolean
                description: Indicates whether or not the allocation/deallocation is retriable. When true, clients may retry the operation if it did not complete successfully. Retry can be performed by re-sending the same allocation request that was originally sent.
              reason:
                nullable: true
                type: string
                minLength: 1
                description: The reason that the allocation/deallocation is not cleared. Provides a descriptive explanation for why the allocation is in the reserved state. Will not be defined if the allocation is cleared.
              status:
                allOf:
                  - $ref: '#/components/schemas/AllocationStatus'
                description: 'Status of the allocation/deallocation. Possible values: - reserved: The amount for allocation/deallocation is reserved but operation has not completed. This is a temporary state awaiting final resolution. - cleared: Terminal state; the amount for allocation/deallocation is cleared and funds have been successfully allocated. This indicates a successful operation. - released: Terminal state; the amount for allocation/deallocation is released and funds have been returned. This indicates the operation failed, either because balance was insufficient for allocation/deallocation, or that the partner rejected the request to allocate/deallocate.'
              type:
                allOf:
                  - $ref: '#/components/schemas/AllocationType'
                description: 'The type of the entity. Possible values: - allocation: Represents an allocation of funds to a connection. This moves funds from a client''s BitGo account to make them available for the specified connection. - deallocation: Represents a deallocation of funds from a connection. This moves funds from a connection back to the client''s BitGo account.'
            required:
              - id
              - amount
              - connectionId
              - clientExternalId
              - initiatedBy
              - createdAt
              - updatedAt
              - retriable
              - reason
              - status
              - type
            description: Array of allocation records matching the query criteria. The array may be empty if no allocations match the query criteria.
      required:
        - allocations
    V1AllocationsReleasedPayload:
      title: V1AllocationsReleasedPayload
      type: object
      properties:
        allocation:
          allOf:
            - $ref: '#/components/schemas/V1ReleasedAllocation'
          description: The allocation record in its released state. This contains all allocation details with a status of 'released', indicating the allocation was not completed and funds were returned. The reason field will explain why the allocation was released.
      required:
        - allocation
    V1AllocationsReleasedWithErrorPostPayload:
      title: V1AllocationsReleasedWithErrorPostPayload
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/V1AllocationsReleasedPayload'
        - $ref: '#/components/schemas/V1ErrorPayload'
    V1AssignedDisputesWithClosureOutput:
      title: V1AssignedDisputesWithClosureOutput
      type: array
      items:
        allOf:
          - type: object
            properties:
              settledInSettlementId:
                type: string
                title: uuid
            required:
              - settledInSettlementId
          - $ref: '#/components/schemas/V1ClosedDisputeWithClosureOutput'
    V1BlockListResponse:
      title: V1BlockListResponse
      type: object
      description: codec for global listing http response
      properties:
        id:
          type: string
          title: uuid
        ownerListingId:
          type: string
          title: uuid
        blockedListingId:
          type: string
          title: uuid
        blockedGlobalListingId:
          type: string
          title: uuid
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
      required:
        - id
        - ownerListingId
        - blockedListingId
        - blockedGlobalListingId
        - createdAt
    V1BlockListWithListingArrayResponse:
      title: V1BlockListWithListingArrayResponse
      type: object
      properties:
        blockList:
          $ref: '#/components/schemas/V1BlockListsWithListingResponse'
      required:
        - blockList
    V1BlockListsWithListingResponse:
      title: V1BlockListsWithListingResponse
      type: array
      items:
        allOf:
          - type: object
            properties:
              blockedListing:
                $ref: '#/components/schemas/V1ListingResponse'
            required:
              - blockedListing
          - $ref: '#/components/schemas/V1BlockListResponse'
    V1ClearedAllocation:
      title: V1ClearedAllocation
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the allocation/deallocation. This is a UUID that uniquely identifies the allocation record.
          title: uuid
        amount:
          allOf:
            - $ref: '#/components/schemas/PositiveAllocationAmount'
          description: The amount of the allocation/deallocation. Contains both the currency identifier and the quantity in base units.
        connectionId:
          type: string
          description: The unique identifier of the connection this allocation is for. This identifies a connection between a client and partner.
          title: uuid
        clientExternalId:
          type: string
          description: External identifier provided by the client when creating the allocation/deallocation. Used for idempotence and correlation with client systems.
          minLength: 1
        partnerExternalId:
          type: string
          description: External identifier of the allocation/deallocation in the partner system. May be populated when partners provide their own identifier for the allocation.
          minLength: 1
        initiatedBy:
          type: string
          description: The identifier of the user that initiated the allocation/deallocation. Represents the user ID from the BitGo platform.
          minLength: 1
        notes:
          type: string
          description: Optional notes provided by the client when creating the allocation/deallocation. Can contain additional context or information about the purpose of the allocation.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the allocation/deallocation was created. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the allocation/deallocation was last updated. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        retriable:
          type: boolean
          enum:
            - false
          description: Indicates whether or not the allocation/deallocation is retriable. When true, clients may retry the operation if it did not complete successfully. Retry can be performed by re-sending the same allocation request that was originally sent.
        status:
          type: string
          enum:
            - cleared
          description: 'Status of the allocation/deallocation. Possible values: - reserved: The amount for allocation/deallocation is reserved but operation has not completed. This is a temporary state awaiting final resolution. - cleared: Terminal state; the amount for allocation/deallocation is cleared and funds have been successfully allocated. This indicates a successful operation. - released: Terminal state; the amount for allocation/deallocation is released and funds have been returned. This indicates the operation failed, either because balance was insufficient for allocation/deallocation, or that the partner rejected the request to allocate/deallocate.'
      required:
        - id
        - amount
        - connectionId
        - clientExternalId
        - initiatedBy
        - createdAt
        - updatedAt
        - retriable
        - status
    V1ClientAllocationsSigningGetPayload:
      title: V1ClientAllocationsSigningGetPayload
      type: object
      properties:
        payload:
          type: string
          description: 'Payload string to sign based on the provided request parameters. This string: - Contains a JSON representation of the allocation request parameters. - Should be signed using the client''s private key. - The resulting signature should be included in the subsequent allocation creation request. - Helps ensure that allocation requests are authenticated and tamper-proof.'
      required:
        - payload
    V1ClientBalancesGetPayload:
      title: V1ClientBalancesGetPayload
      type: object
      properties:
        clientId:
          type: string
          description: Unique identifier of the client whose balances are being returned. This UUID corresponds to your organization within the BitGo system.
          title: uuid
        balances:
          allOf:
            - $ref: '#/components/schemas/AccountBalanceRecord'
          description: A record of account balances indexed by currency code. Each key in this record is a currency identifier (e.g., "ofcbtc", "ofceth", "ofcusdc"), and the corresponding value is an AccountBalance object containing the available and held amounts for that currency in base units.
        networkBalances:
          allOf:
            - $ref: '#/components/schemas/NetworkAccountBalanceRecordForClient'
          description: 'Detailed information about balances across all your partner connections. This record contains: - Keys: Connection IDs that uniquely identify each connection - Values: Detailed information about the connection and its balances'
      required:
        - clientId
        - balances
        - networkBalances
    V1ClientConnectionsSigningGetPayload:
      title: V1ClientConnectionsSigningGetPayload
      type: object
      properties:
        payload:
          type: string
      required:
        - payload
    V1ClientDeallocationsSigningGetPayload:
      title: V1ClientDeallocationsSigningGetPayload
      type: object
      properties:
        payload:
          type: string
          description: The payload string that should be signed. This string should be cryptographically signed by the client and included in the subsequent deallocation request along with the signature.
      required:
        - payload
    V1ClientDisputeClosurePayload:
      title: V1ClientDisputeClosurePayload
      type: object
      properties:
        disputeClosure:
          $ref: '#/components/schemas/DisputeClosure'
      required:
        - disputeClosure
    V1ClientGetSettlementOkPayload:
      title: V1ClientGetSettlementOkPayload
      type: object
      properties:
        settlement:
          allOf:
            - $ref: '#/components/schemas/V1SettlementOutput'
          description: The complete settlement object.
        settlementTransfers:
          allOf:
            - $ref: '#/components/schemas/MaskedV1SettlementTransfersOutput'
          description: The settlement transfers associated with the settlement.
        settlingDisputes:
          allOf:
            - $ref: '#/components/schemas/V1AssignedDisputesWithClosureOutput'
          description: The disputes that are being settled as part of this settlement.
        settlementDisputes:
          allOf:
            - $ref: '#/components/schemas/V1DisputesWithClosureOutput'
          description: The disputes that were raised on this settlement.
      required:
        - settlement
        - settlementTransfers
        - settlingDisputes
        - settlementDisputes
    V1ClientGetSettlementTransfersOkPayload:
      title: V1ClientGetSettlementTransfersOkPayload
      type: object
      properties:
        settlementTransfers:
          $ref: '#/components/schemas/MaskedV1SettlementTransfersOutput'
      required:
        - settlementTransfers
    V1ClientsOutput:
      title: V1ClientsOutput
      type: object
      description: Output representation of a OES client. Contains all client properties with ISO-formatted date strings for timestamps.
      properties:
        id:
          type: string
          description: The id of the client.
          title: uuid
        enterpriseId:
          type: string
          description: The enterprise ID that this client is associated with.
          minLength: 1
        trustOrg:
          allOf:
            - $ref: '#/components/schemas/TrustOrg'
          description: The trust organization that this client is associated with.
        walletId:
          type: string
          description: The Go Account ID that the client is associated with
          minLength: 1
        createdAt:
          type: string
          description: The timestamp when the client was created. (ISO 8601 format)
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The timestamp when the client was last updated. (ISO 8601 format)
          format: date-time
          title: ISO Date String
        balanceAlertLastSent:
          type: string
          description: Last time a balance alert was sent. Typically will be undefined.
      required:
        - id
        - enterpriseId
        - trustOrg
        - walletId
        - createdAt
        - updatedAt
    V1ClientsPostOkPayload:
      title: V1ClientsPostOkPayload
      type: object
      properties:
        client:
          allOf:
            - $ref: '#/components/schemas/V1ClientsOutput'
          description: The complete client object that was successfully created.
      required:
        - client
    V1ClosedDisputeWithClosureOutput:
      title: V1ClosedDisputeWithClosureOutput
      allOf:
        - type: object
          properties:
            disputeClosureId:
              type: string
              title: uuid
            disputeClosure:
              $ref: '#/components/schemas/DisputeClosureOutput'
          required:
            - disputeClosureId
            - disputeClosure
        - $ref: '#/components/schemas/V1DisputeOutput'
    V1CompleteSettlementOutput:
      title: V1CompleteSettlementOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the settlement. This is a UUID that uniquely identifies the settlement record.
          title: uuid
        partnerId:
          type: string
          description: The unique identifier of the partner the settlement is associated with. This is a UUID that uniquely identifies the partner.
          title: uuid
        externalId:
          type: string
          description: External identifier provided by the partner when creating the settlement.
          minLength: 1
        status:
          type: string
          enum:
            - completed
        settlementType:
          allOf:
            - $ref: '#/components/schemas/SettlementTypes'
          description: 'The type of settlement. Possible values are: - onchain: The settlement is on-chain. - offchain: The settlement is off-chain.'
        reconciled:
          type: boolean
          description: Whether or not the settlement is reconciled against trade data. Currently there are no reconciled settlements. This field is always false.
        initiatedBy:
          type: string
          description: Id of the user which initiated the settlement.
          minLength: 1
        notes:
          type: string
          description: The notes associated with the settlement. This is a free-form text field that can contain any additional information about the settlement.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the settlement was created. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the settlement was last updated. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        finalizedAt:
          type: string
          format: date-time
          title: ISO Date String
        rtId:
          type: string
          description: Routed transaction id associated with the settlement. This is a UUID that uniquely identifies the routed transaction. This field is only populated for on-chain settlements for partners with automation enabled.
        lossSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if loss settlement SLA is close to being breached. Only relevant for on-chain settlements.
        gainSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if gain settlement SLA is close to being breached. Only relevant for on-chain settlements.
        cutoffAt:
          type: string
          description: The date and time of the newest trade being settled in the partner system. This is a timestamp in ISO 8601 format. This field is only populated for dispute enabled partners.
          format: date-time
          title: ISO Date String
        disputed:
          type: boolean
          description: Whether or not a dispute was raised on this settlement.
      required:
        - id
        - partnerId
        - externalId
        - status
        - settlementType
        - reconciled
        - initiatedBy
        - createdAt
        - updatedAt
        - finalizedAt
        - lossSLAAlertSent
        - gainSLAAlertSent
    V1ConnectionListResponse:
      title: V1ConnectionListResponse
      type: object
      description: codec for connection list http response
      properties:
        connections:
          type: array
          items:
            type: object
            description: codec for connection http response
            properties:
              id:
                type: string
                title: uuid
              type:
                $ref: '#/components/schemas/ConnectionType'
              status:
                $ref: '#/components/schemas/ConnectionStatus'
              label:
                type: string
                minLength: 1
              description:
                type: string
                minLength: 1
              createdBy:
                type: string
                minLength: 1
              updatedBy:
                type: string
                minLength: 1
              createdAt:
                type: string
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                format: date-time
                title: ISO Date String
              linkedConnectionId:
                type: string
                title: uuid
              hidden:
                type: boolean
              requestRemindersSent:
                type: number
              requestReminderLastSent:
                type: string
                format: date-time
                title: ISO Date String
              evaluationId:
                type: string
                minLength: 1
            required:
              - id
              - type
              - status
              - label
              - createdBy
              - updatedBy
              - createdAt
              - updatedAt
              - hidden
      required:
        - connections
    V1ConnectionOutput:
      title: V1ConnectionOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the connection. This UUID uniquely identifies the connection between a client and partner.
          title: uuid
        name:
          type: string
          description: A user-friendly name for the connection. This is a descriptive label provided by the client for this particular connection.
          minLength: 1
        clientId:
          type: string
          description: The unique identifier of the client associated with this connection. This UUID uniquely identifies the client organization within the BitGo system.
          title: uuid
        partnerId:
          type: string
          description: The unique identifier of the partner associated with this connection. This UUID uniquely identifies the partner organization within the BitGo system.
          title: uuid
        networkAccountId:
          type: string
          description: The unique identifier of the network account associated with this connection. This references the account where allocated funds are held for this connection.
          title: uuid
        createdAt:
          type: string
          description: The date and time when the connection was created. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the connection was last updated. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        active:
          type: boolean
          description: Indicates whether the connection is active. When false, the connection is deactivated and no operations (like allocations) can be performed on it. When true, the connection is active and operations can be performed on it.
        proof:
          type: string
          description: The cryptographic proof associated with the connection. This is used for verifying the authenticity of the connection. Derived from the payload and signature submitted when the connection was created.
          minLength: 1
        nonce:
          type: string
          description: A nonce value used in the connection cryptographic operations. This provides additional security for connection operations.
          minLength: 1
        partnersConnectionId:
          nullable: true
          type: string
          minLength: 1
          description: The partner's identifier for this connection. This is the identifier used by the partner in their system to refer to this connection. Will be null if the connection hasn't been initialized by the partner.
        partnersClientId:
          nullable: true
          type: string
          minLength: 1
          description: The partner's identifier for the client. This is the identifier used by the partner in their system to refer to the client. Will be null if the connection hasn't been initialized by the partner.
        initialized:
          type: boolean
          description: Indicates whether the connection has been initialized by the partner. When true, the partner has established this connection on their side. When false, the connection is pending initialization by the partner.
      required:
        - id
        - name
        - clientId
        - partnerId
        - networkAccountId
        - createdAt
        - updatedAt
        - active
        - proof
        - nonce
        - partnersConnectionId
        - partnersClientId
        - initialized
    V1ConnectionPayload:
      title: V1ConnectionPayload
      type: object
      description: API response payload containing a single connection. This structure wraps the connection data for API responses.
      properties:
        connection:
          allOf:
            - $ref: '#/components/schemas/V1ConnectionOutput'
          description: The connection details. Contains all information about a specific client-partner connection.
      required:
        - connection
    V1ConnectionResponse:
      title: V1ConnectionResponse
      type: object
      description: codec for connection http response
      properties:
        id:
          type: string
          title: uuid
        type:
          $ref: '#/components/schemas/ConnectionType'
        status:
          $ref: '#/components/schemas/ConnectionStatus'
        label:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        createdBy:
          type: string
          minLength: 1
        updatedBy:
          type: string
          minLength: 1
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          format: date-time
          title: ISO Date String
        linkedConnectionId:
          type: string
          title: uuid
        hidden:
          type: boolean
        requestRemindersSent:
          type: number
        requestReminderLastSent:
          type: string
          format: date-time
          title: ISO Date String
        evaluationId:
          type: string
          minLength: 1
      required:
        - id
        - type
        - status
        - label
        - createdBy
        - updatedBy
        - createdAt
        - updatedAt
        - hidden
    V1ConnectionWithOwnerAndTargetListResponse:
      title: V1ConnectionWithOwnerAndTargetListResponse
      type: object
      properties:
        connections:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  ownerListingEntry:
                    $ref: '#/components/schemas/V1ListingEntryWithListingResponse'
                  targetListingEntry:
                    $ref: '#/components/schemas/V1ListingEntryWithListingResponse'
                required:
                  - ownerListingEntry
                  - targetListingEntry
              - $ref: '#/components/schemas/V1ConnectionResponse'
        totalCount:
          type: number
      required:
        - connections
    V1ConnectionWithOwnerListResponse:
      title: V1ConnectionWithOwnerListResponse
      type: object
      properties:
        connections:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  ownerListingEntry:
                    $ref: '#/components/schemas/V1ListingEntryWithListingResponse'
                required:
                  - ownerListingEntry
              - $ref: '#/components/schemas/V1ConnectionResponse'
      required:
        - connections
    V1ConnectionsGetOkPayload:
      title: V1ConnectionsGetOkPayload
      type: object
      properties:
        connections:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The unique identifier of the connection. This UUID uniquely identifies the connection between a client and partner.
                title: uuid
              name:
                type: string
                description: A user-friendly name for the connection. This is a descriptive label provided by the client for this particular connection.
                minLength: 1
              clientId:
                type: string
                description: The unique identifier of the client associated with this connection. This UUID uniquely identifies the client organization within the BitGo system.
                title: uuid
              partnerId:
                type: string
                description: The unique identifier of the partner associated with this connection. This UUID uniquely identifies the partner organization within the BitGo system.
                title: uuid
              networkAccountId:
                type: string
                description: The unique identifier of the network account associated with this connection. This references the account where allocated funds are held for this connection.
                title: uuid
              createdAt:
                type: string
                description: The date and time when the connection was created. Represented as an ISO 8601 formatted date string.
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                description: The date and time when the connection was last updated. Represented as an ISO 8601 formatted date string.
                format: date-time
                title: ISO Date String
              active:
                type: boolean
                description: Indicates whether the connection is active. When false, the connection is deactivated and no operations (like allocations) can be performed on it. When true, the connection is active and operations can be performed on it.
              proof:
                type: string
                description: The cryptographic proof associated with the connection. This is used for verifying the authenticity of the connection. Derived from the payload and signature submitted when the connection was created.
                minLength: 1
              nonce:
                type: string
                description: A nonce value used in the connection cryptographic operations. This provides additional security for connection operations.
                minLength: 1
              partnersConnectionId:
                nullable: true
                type: string
                minLength: 1
                description: The partner's identifier for this connection. This is the identifier used by the partner in their system to refer to this connection. Will be null if the connection hasn't been initialized by the partner.
              partnersClientId:
                nullable: true
                type: string
                minLength: 1
                description: The partner's identifier for the client. This is the identifier used by the partner in their system to refer to the client. Will be null if the connection hasn't been initialized by the partner.
              initialized:
                type: boolean
                description: Indicates whether the connection has been initialized by the partner. When true, the partner has established this connection on their side. When false, the connection is pending initialization by the partner.
            required:
              - id
              - name
              - clientId
              - partnerId
              - networkAccountId
              - createdAt
              - updatedAt
              - active
              - proof
              - nonce
              - partnersConnectionId
              - partnersClientId
              - initialized
      required:
        - connections
    V1CreateBankAccountResponse:
      title: V1CreateBankAccountResponse
      allOf:
        - $ref: '#/components/schemas/SingleBankAccountResponse'
      description: codec for create bank account http response
    V1DeallocationClearedPostPayload:
      title: V1DeallocationClearedPostPayload
      type: object
      properties:
        deallocation:
          allOf:
            - $ref: '#/components/schemas/V1ClearedAllocation'
          description: The deallocation record in its cleared state. This contains all deallocation details with a status of 'cleared', indicating the allocation was successfully completed.
      required:
        - deallocation
    V1DeallocationReleasedPayload:
      title: V1DeallocationReleasedPayload
      type: object
      properties:
        deallocation:
          allOf:
            - $ref: '#/components/schemas/V1ReleasedAllocation'
          description: The deallocation record in its released state. This contains all deallocation details with a status of 'released', indicating the allocation was not completed and funds were returned. The reason field will explain why the deallocation was released.
      required:
        - deallocation
    V1DeallocationReleasedWithErrorPostPayload:
      title: V1DeallocationReleasedWithErrorPostPayload
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/V1DeallocationReleasedPayload'
        - $ref: '#/components/schemas/V1ErrorPayload'
    V1DeleteBankAccountResponse:
      title: V1DeleteBankAccountResponse
      allOf:
        - $ref: '#/components/schemas/SingleBankAccountResponse'
      description: codec for delete bank account http response
    V1DirectoryListingEntryWithConnectionsListResponse:
      title: V1DirectoryListingEntryWithConnectionsListResponse
      type: object
      properties:
        listingEntries:
          type: array
          items:
            allOf:
              - type: object
                properties: {}
              - $ref: '#/components/schemas/V1ListingEntryWithListingResponse'
              - $ref: '#/components/schemas/V1ConnectionWithOwnerAndTargetListResponse'
      required:
        - listingEntries
    V1DisputeOutput:
      title: V1DisputeOutput
      type: object
      properties:
        id:
          type: string
          title: uuid
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          format: date-time
          title: ISO Date String
        connectionId:
          type: string
          title: uuid
        disputedSettlementId:
          type: string
          title: uuid
        userId:
          type: string
          minLength: 1
        expectedTransfers:
          $ref: '#/components/schemas/ExpectedTransfersOutput'
        retracted:
          type: boolean
        settledInSettlementId:
          type: string
          title: uuid
        reason:
          type: string
          minLength: 1
        retractedBy:
          type: string
          minLength: 1
        retractedAt:
          type: string
          format: date-time
          title: ISO Date String
        disputeClosureId:
          type: string
          title: uuid
        retractedReason:
          type: string
          minLength: 1
      required:
        - id
        - createdAt
        - updatedAt
        - connectionId
        - disputedSettlementId
        - userId
        - expectedTransfers
        - retracted
    V1DisputePayload:
      title: V1DisputePayload
      type: object
      properties:
        dispute:
          $ref: '#/components/schemas/V1DisputeOutput'
      required:
        - dispute
    V1DisputesWithClosureOutput:
      title: V1DisputesWithClosureOutput
      type: array
      items:
        allOf:
          - type: object
            properties:
              disputeClosure:
                $ref: '#/components/schemas/DisputeClosureOutput'
          - $ref: '#/components/schemas/V1DisputeOutput'
    V1DisputesWithClosureWithTransfersOutput:
      title: V1DisputesWithClosureWithTransfersOutput
      type: object
      properties:
        disputes:
          $ref: '#/components/schemas/V1DisputesWithClosureOutput'
      required:
        - disputes
    V1EnterpriseSupportedCurrenciesResponse:
      title: V1EnterpriseSupportedCurrenciesResponse
      type: object
      properties:
        supportedCurrencies:
          allOf:
            - $ref: '#/components/schemas/V1SupportedCurrencies'
          description: Record where the keys represent either partner IDs. The values are arrays of currency metadata objects that describe the currencies supported by that organization.
        domain:
          type: string
          description: The domain name of the API server that processed the request. Will always be 'bitgo-network'.
          minLength: 1
      required:
        - supportedCurrencies
        - domain
    V1ErrorPayload:
      title: V1ErrorPayload
      type: object
      properties:
        error:
          type: string
      required:
        - error
    V1ErrorResponse:
      title: V1ErrorResponse
      type: object
      properties:
        errorName:
          type: string
        error:
          type: string
      required:
        - errorName
        - error
    V1ExtDepositsPayload:
      title: V1ExtDepositsPayload
      type: object
      properties:
        deposits:
          allOf:
            - $ref: '#/components/schemas/ExtDepositsResp'
          description: Array of deposit records that were created or retrieved.
      required:
        - deposits
    V1FailedSettlementOutput:
      title: V1FailedSettlementOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the settlement. This is a UUID that uniquely identifies the settlement record.
          title: uuid
        partnerId:
          type: string
          description: The unique identifier of the partner the settlement is associated with. This is a UUID that uniquely identifies the partner.
          title: uuid
        externalId:
          type: string
          description: External identifier provided by the partner when creating the settlement.
          minLength: 1
        reason:
          type: string
          minLength: 1
        status:
          type: string
          enum:
            - failed
        settlementType:
          allOf:
            - $ref: '#/components/schemas/SettlementTypes'
          description: 'The type of settlement. Possible values are: - onchain: The settlement is on-chain. - offchain: The settlement is off-chain.'
        reconciled:
          type: boolean
          description: Whether or not the settlement is reconciled against trade data. Currently there are no reconciled settlements. This field is always false.
        initiatedBy:
          type: string
          description: Id of the user which initiated the settlement.
          minLength: 1
        notes:
          type: string
          description: The notes associated with the settlement. This is a free-form text field that can contain any additional information about the settlement.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the settlement was created. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the settlement was last updated. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        rtId:
          type: string
          description: Routed transaction id associated with the settlement. This is a UUID that uniquely identifies the routed transaction. This field is only populated for on-chain settlements for partners with automation enabled.
        lossSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if loss settlement SLA is close to being breached. Only relevant for on-chain settlements.
        gainSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if gain settlement SLA is close to being breached. Only relevant for on-chain settlements.
        cutoffAt:
          type: string
          description: The date and time of the newest trade being settled in the partner system. This is a timestamp in ISO 8601 format. This field is only populated for dispute enabled partners.
          format: date-time
          title: ISO Date String
        disputed:
          type: boolean
          description: Whether or not a dispute was raised on this settlement.
      required:
        - id
        - partnerId
        - externalId
        - reason
        - status
        - settlementType
        - reconciled
        - initiatedBy
        - createdAt
        - updatedAt
        - lossSLAAlertSent
        - gainSLAAlertSent
    V1GetBankAccountResponse:
      title: V1GetBankAccountResponse
      allOf:
        - $ref: '#/components/schemas/SingleBankAccountResponse'
      description: codec for get bank account http response
    V1GetBankAccountsResponse:
      title: V1GetBankAccountsResponse
      type: object
      description: codec for get bank accounts http response
      properties:
        bankAccounts:
          $ref: '#/components/schemas/BankAccountsArrayResponse'
      required:
        - bankAccounts
    V1GetDepositBankAccountsResponse:
      title: V1GetDepositBankAccountsResponse
      type: object
      description: codec for get deposit bank accounts http response
      properties:
        memoId:
          type: string
          minLength: 1
        bankAccounts:
          $ref: '#/components/schemas/BankAccountsArrayResponse'
      required:
        - memoId
        - bankAccounts
    V1GetSettlementOkPayload:
      title: V1GetSettlementOkPayload
      type: object
      properties:
        settlement:
          allOf:
            - $ref: '#/components/schemas/V1SettlementOutput'
          description: The complete settlement object.
        settlementTransfers:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The unique identifier of the settlement transfer. This is a UUID that uniquely identifies the settlement transfer record.
                title: uuid
              createdAt:
                type: string
                description: The date and time when the settlement transfer was created. Represented as an ISO 8601 formatted date string.
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                description: The date and time when the settlement transfer was last updated. Represented as an ISO 8601 formatted date string.
                format: date-time
                title: ISO Date String
              currency:
                type: string
                description: The currency involved in the settlement movement.
                minLength: 1
              settlementId:
                type: string
                description: The unique identifier of the settlement the settlement transfer is associated with. This is a UUID that uniquely identifies the settlement.
                title: uuid
              disputeClosureId:
                type: string
                description: The unique identifier of the dispute closure the settlement transfer was created from. This is a UUID that uniquely identifies dispute closure if the transfer was created as a result of closing a dispute.
                title: uuid
              quantity:
                allOf:
                  - $ref: '#/components/schemas/NonZeroBigAmount'
                description: The amount of currency being transferred in the settlement transfer. This is a non-zero value represented as a string. If the value is positive, that means funds were moved from the source account to the destination account. If the value is negative, that means funds were moved from the destination account to the source account.
              txIds:
                type: array
                items:
                  type: string
                  minLength: 1
                  description: The transaction IDs associated with the settlement transfer. Only populated once the transfer is completed.
              status:
                allOf:
                  - $ref: '#/components/schemas/SettlementTransferStatus'
                description: 'The status of the settlement transfer. Possible values and implications are: - pending: The transfer is pending and has not yet been processed. - pending_onchain: The transfer is pending on-chain movement (only relevant to on-chain settlements). - onchain_initiated: The transfer has been initiated on-chain (only relevant to on-chain settlements). - onchain_failed: The on-chain transfer has failed (only relevant to on-chain settlements). - completed: The transfer has been completed successfully. - failed: The transfer has failed. - rejected: The transfer has been rejected. - disputed: The transfer is disputed.'
              sourceTradingAccountId:
                type: string
                description: The go account id of the source party.
                minLength: 1
              sourceNetworkAccountId:
                type: string
                description: The network account id of the source party.
                title: uuid
              destinationTradingAccountId:
                type: string
                description: The go account id of the destination party.
                minLength: 1
              destinationNetworkAccountId:
                type: string
                description: The network account id of the destination party.
                title: uuid
            required:
              - id
              - createdAt
              - updatedAt
              - currency
              - settlementId
              - quantity
              - txIds
              - status
              - sourceTradingAccountId
              - destinationTradingAccountId
              - destinationNetworkAccountId
            description: The settlement transfers associated with the settlement.
        settlingDisputes:
          allOf:
            - $ref: '#/components/schemas/V1AssignedDisputesWithClosureOutput'
          description: The disputes that are being settled as part of this settlement.
        settlementDisputes:
          allOf:
            - $ref: '#/components/schemas/V1DisputesWithClosureOutput'
          description: The disputes that were raised on this settlement.
      required:
        - settlement
        - settlementTransfers
        - settlingDisputes
        - settlementDisputes
    V1GlobalListingResponse:
      title: V1GlobalListingResponse
      type: object
      description: codec for global listing http response
      properties:
        id:
          type: string
          title: uuid
        enterpriseId:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        owner:
          type: string
          minLength: 1
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          format: date-time
          title: ISO Date String
      required:
        - id
        - enterpriseId
        - name
        - owner
        - createdAt
        - updatedAt
    V1GlobalListingWithListingEntries:
      title: V1GlobalListingWithListingEntries
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/V1GlobalListingResponse'
        - $ref: '#/components/schemas/V1ListingEntryListResponse'
    V1ListSettlementsOkPayload:
      title: V1ListSettlementsOkPayload
      type: object
      properties:
        settlements:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/V1PendingSettlementOutput'
              - $ref: '#/components/schemas/V1FailedSettlementOutput'
              - $ref: '#/components/schemas/V1CompleteSettlementOutput'
              - $ref: '#/components/schemas/V1RejectedSettlementOutput'
      required:
        - settlements
    V1ListingEntryListResponse:
      title: V1ListingEntryListResponse
      type: object
      description: codec for listing entry list http response
      properties:
        listingEntries:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                title: uuid
              walletId:
                type: string
                minLength: 1
              coin:
                type: string
                minLength: 1
              type:
                $ref: '#/components/schemas/EntryType'
              description:
                type: string
                minLength: 1
              discoverable:
                type: boolean
              featured:
                type: boolean
              createdAt:
                type: string
                format: date-time
                title: ISO Date String
              updatedAt:
                type: string
                format: date-time
                title: ISO Date String
            required:
              - id
              - walletId
              - coin
              - type
              - discoverable
              - featured
              - createdAt
              - updatedAt
      required:
        - listingEntries
    V1ListingEntryResponse:
      title: V1ListingEntryResponse
      type: object
      properties:
        id:
          type: string
          title: uuid
        walletId:
          type: string
          minLength: 1
        coin:
          type: string
          minLength: 1
        type:
          $ref: '#/components/schemas/EntryType'
        description:
          type: string
          minLength: 1
        discoverable:
          type: boolean
        featured:
          type: boolean
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          format: date-time
          title: ISO Date String
      required:
        - id
        - walletId
        - coin
        - type
        - discoverable
        - featured
        - createdAt
        - updatedAt
    V1ListingEntryWithConnectionsListResponse:
      title: V1ListingEntryWithConnectionsListResponse
      type: object
      properties:
        listingEntries:
          type: array
          items:
            allOf:
              - type: object
                properties: {}
              - $ref: '#/components/schemas/V1ListingEntryWithListingResponse'
              - $ref: '#/components/schemas/V1ConnectionWithOwnerListResponse'
      required:
        - listingEntries
    V1ListingEntryWithListingResponse:
      title: V1ListingEntryWithListingResponse
      allOf:
        - type: object
          properties:
            listing:
              $ref: '#/components/schemas/V1ListingResponse'
          required:
            - listing
        - $ref: '#/components/schemas/V1ListingEntryResponse'
    V1ListingResponse:
      title: V1ListingResponse
      type: object
      description: codec for listing http response
      properties:
        id:
          type: string
          title: uuid
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        editable:
          type: boolean
          description: True, if the name is editable.
      required:
        - id
        - name
        - editable
    V1ListingUpdateResponse:
      title: V1ListingUpdateResponse
      type: object
      properties:
        id:
          type: string
          title: uuid
        enterpriseId:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        owner:
          type: string
          minLength: 1
        createdAt:
          type: string
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          format: date-time
          title: ISO Date String
        globalListing:
          type: object
          description: codec for global listing http response
          properties:
            createdAt:
              type: string
              format: date-time
              title: ISO Date String
            description:
              type: string
              minLength: 1
            enterpriseId:
              type: string
              minLength: 1
            id:
              type: string
              title: uuid
            name:
              type: string
              minLength: 1
            owner:
              type: string
              minLength: 1
            updatedAt:
              type: string
              format: date-time
              title: ISO Date String
          required:
            - createdAt
            - enterpriseId
            - id
            - name
            - owner
            - updatedAt
      required:
        - id
        - name
        - owner
        - createdAt
        - updatedAt
    V1PartnerAccountBalanceRecordOutput:
      title: V1PartnerAccountBalanceRecordOutput
      type: object
      additionalProperties:
        type: object
        properties:
          held:
            allOf:
              - $ref: '#/components/schemas/NonNegativeBigAmount'
            description: Amount of the specified currency held (encumbered) in the account. The amount is represented as a non-negative integer or decimal string depending on partner configuration.
          available:
            allOf:
              - $ref: '#/components/schemas/NonNegativeBigAmount'
            description: Amount of the specified currency available in the account. The amount is represented as a non-negative integer or decimal string depending on partner configuration.
        required:
          - held
          - available
      description: A record of account balances for a partner, indexed by the partner's currency codes. Each key in this record is a currency identifier in the partner's naming convention, and the corresponding value contains the available and held amounts for that currency. Note that currency codes here may differ from BitGo's internal currency codes, as they are mapped to match the partner's expected currency identifiers.
    V1PartnerBalancesGetPayload:
      title: V1PartnerBalancesGetPayload
      type: object
      properties:
        networkBalances:
          allOf:
            - $ref: '#/components/schemas/V1PartnerNetworkAccountBalanceRecordOutput'
          description: 'Detailed information about balances across all client connections to this partner. This record contains: - Keys: Connection IDs that uniquely identify each connection. - Values: Detailed information about the connection and its balances. This provides a comprehensive view of client funds allocated to each connection and their current availability.'
        balances:
          allOf:
            - $ref: '#/components/schemas/V1PartnerAccountBalanceRecordOutput'
          description: 'Information on the balances for the partner''s own BitGo account. This object, when present, contains: - Keys: Currency identifiers (e.g., "BTC", "ETH", "USDC") in the partner''s currency naming convention - Values: Balance information in base units including available and held amounts for each currency This allows partners to see their own BitGo account balances alongside client connection balances, providing a complete view of their financial position within the BitGo system. Note: This field may be omitted if the partner doesn''t have permission to view their own BitGo account balances.'
      required:
        - networkBalances
    V1PartnerExtDepositsSigningPayload:
      title: V1PartnerExtDepositsSigningPayload
      type: object
      properties:
        payload:
          type: string
          description: String payload that should be signed with the partner's private key. This signed payload should be included when submitting deposit information.
      required:
        - payload
    V1PartnerIncompleteSettlementOrErrorPayload:
      title: V1PartnerIncompleteSettlementOrErrorPayload
      oneOf:
        - $ref: '#/components/schemas/V1PartnerSettlementIncompletePayload'
        - $ref: '#/components/schemas/V1ErrorPayload'
    V1PartnerNetworkAccountBalanceRecordOutput:
      title: V1PartnerNetworkAccountBalanceRecordOutput
      type: object
      additionalProperties:
        type: object
        properties:
          clientId:
            type: string
            description: Unique identifier of the client associated with this connection. This UUID uniquely identifies the client organization within the BitGo system that has allocated funds to this connection.
            title: uuid
          partnerId:
            type: string
            description: Unique identifier of the partner associated with this connection. This UUID uniquely identifies your partner organization within the BitGo system.
            title: uuid
          partnersConnectionId:
            type: string
            description: External identifier of the connection as known by your partner system. This is your own identifier for this connection, which you can use to correlate with your internal systems.
            minLength: 1
          balances:
            allOf:
              - $ref: '#/components/schemas/V1PartnerAccountBalanceRecordOutput'
            description: 'The balances for this connection, indexed by currency code. This object contains: - Keys: Currency identifiers in the partner''s naming convention. - Values: Balance information in base units, including available and held amounts. These balances represent funds that have been allocated by the client to this specific connection and are available for operations by the partner.'
        required:
          - clientId
          - partnerId
          - partnersConnectionId
          - balances
      description: A record of network account balances for a partner, indexed by connection ID. Each key in this record is a connection ID, and the corresponding value contains details about the connection and its balances across different currencies.
    V1PartnerSettlementIncompletePayload:
      title: V1PartnerSettlementIncompletePayload
      type: object
      properties:
        settlement:
          oneOf:
            - $ref: '#/components/schemas/V1PendingSettlementOutput'
            - $ref: '#/components/schemas/V1FailedSettlementOutput'
            - $ref: '#/components/schemas/V1RejectedSettlementOutput'
      required:
        - settlement
    V1PartnerSettlementOkPayload:
      title: V1PartnerSettlementOkPayload
      type: object
      properties:
        settlement:
          $ref: '#/components/schemas/V1CompleteSettlementOutput'
      required:
        - settlement
    V1PartnerSettlementsSigningGetPayload:
      title: V1PartnerSettlementsSigningGetPayload
      type: object
      properties:
        payload:
          type: string
      required:
        - payload
    V1PartnerTradeSigningGetPayload:
      title: V1PartnerTradeSigningGetPayload
      type: object
      properties:
        payload:
          type: string
      required:
        - payload
    V1PartnerUpdateAllocationResponse:
      title: V1PartnerUpdateAllocationResponse
      type: object
      properties:
        allocationId:
          type: string
          description: The unique identifier of the allocation to update. This UUID uniquely identifies the allocation record.
          title: uuid
        amount:
          allOf:
            - $ref: '#/components/schemas/PositivePartnerCurrencyAmount'
          description: The currency/quantity the allocation was made in. This is a base unit amount. The exact base units depend on the currency (e.g., satoshis for BTC, wei for ETH).
        clientId:
          type: string
          description: The unique identifier of the client associated with the allocation. This UUID uniquely identifies the client within the BitGo system.
          title: uuid
        connectionId:
          type: string
          description: The unique identifier of the connection associated with the allocation. This UUID uniquely identifies the connection between a client and a partner.
          title: uuid
        partnersClientId:
          type: string
          description: The unique identifier of the client in the partner system. This value uniquely identifies the client within the partner's system.
          minLength: 1
        partnersConnectionId:
          type: string
          description: The unique identifier of the connection in the partner system. This value uniquely identifies the connection between a client and a partner in the partner's system.
          minLength: 1
        partnersAllocationId:
          type: string
          description: The unique identifier of the allocation in the partner system. This value uniquely identifies the allocation record within the partner's system.
          minLength: 1
      required:
        - allocationId
        - amount
        - clientId
        - connectionId
        - partnersClientId
        - partnersConnectionId
        - partnersAllocationId
    V1PartnerUpdateDeallocationResponse:
      title: V1PartnerUpdateDeallocationResponse
      type: object
      properties:
        deallocationId:
          type: string
          description: The unique identifier of the deallocation to update. This UUID uniquely identifies the deallocation record.
          title: uuid
        amount:
          allOf:
            - $ref: '#/components/schemas/PositivePartnerCurrencyAmount'
          description: The currency/quantity that was submitted for deallocation. This is a base unit amount. The exact base units depend on the currency (e.g., satoshis for BTC, wei for ETH).
        clientId:
          type: string
          description: The unique identifier of the client which initiated the deallocation. This UUID uniquely identifies the client within the BitGo system.
          title: uuid
        connectionId:
          type: string
          description: The unique identifier of the connection to deallocate from. This UUID uniquely identifies the connection between a client and a partner.
          title: uuid
        partnersClientId:
          type: string
          description: The unique identifier of the client in the partner system. This value uniquely identifies the client within the partner's system.
          minLength: 1
        partnersConnectionId:
          type: string
          description: The unique identifier of the connection in the partner system. This value uniquely identifies the connection between a client and a partner in the partner's system.
          minLength: 1
        partnersDeallocationId:
          type: string
          description: The unique identifier of the deallocation in the partner system. This value uniquely identifies the deallocation record within the partner's system.
          minLength: 1
      required:
        - deallocationId
        - amount
        - clientId
        - connectionId
        - partnersClientId
        - partnersConnectionId
        - partnersDeallocationId
    V1PartnersGetOkPayload:
      title: V1PartnersGetOkPayload
      type: object
      properties:
        partners:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier for the partner.
                title: uuid
              name:
                type: string
                description: Display name of the partner.
                minLength: 1
              institutionId:
                type: string
                description: Optional identifier linking the partner to an institution in external systems.
              institutionIdentifier:
                type: string
                description: Optional string identifier for the institution.
              connectionKeySchema:
                allOf:
                  - $ref: '#/components/schemas/PartnerConnectionKeySchema'
                description: Schema defining which connection request schema is required for this partner. Can be 'token', 'tokenAndSignature', 'apiKeyAndSecret', or 'clearloop'.
              active:
                type: boolean
                description: Boolean flag indicating whether the partner is currently active in the system.
              settlementTransactionRouteId:
                type: string
                description: Optional identifier for the settlement transaction route associated with this partner.
              publicKey:
                type: string
                description: Optional RSA public key used for secure communication with the partner.
              enterpriseId:
                type: string
                description: Enterprise ID associated with this partner, if any.
              clientDisputeWindowMinutes:
                type: number
                description: Time window in minutes during which clients can dispute transactions.
              topUpWindowMinutes:
                type: number
                description: Time window in minutes after which dispute window ends for processing top-up operations.
              trustOrg:
                allOf:
                  - $ref: '#/components/schemas/TrustOrg'
                description: Identifier for the trust organization this partner belongs to. Used for filtering and categorization of partners.
              stablePartner:
                type: boolean
                description: Flag indicating whether the partner has demonstrated operational stability. Used when partner is initially launched to demonstrate that the partner is still in beta and not yet stable.
            required:
              - id
              - name
              - connectionKeySchema
              - active
              - trustOrg
              - stablePartner
            description: Array of partner objects with limited properties and stability indicators.
      required:
        - partners
    V1PartnersOutput:
      title: V1PartnersOutput
      type: object
      properties:
        id:
          type: string
          title: uuid
        enterpriseId:
          type: string
          minLength: 1
        trustOrg:
          $ref: '#/components/schemas/TrustOrg'
        institutionId:
          type: string
        institutionIdentifier:
          type: string
        name:
          type: string
          minLength: 1
        connectionKeySchema:
          $ref: '#/components/schemas/PartnerConnectionKeySchema'
        createdAt:
          type: string
          description: Timestamp when the partner was created in the system.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: Timestamp of the most recent update to the partner record.
          format: date-time
          title: ISO Date String
        clientId:
          type: string
          title: uuid
        broker:
          type: boolean
        active:
          type: boolean
        settlementTransactionRouteId:
          type: string
        clientDisputeWindowMinutes:
          type: number
        topUpWindowMinutes:
          type: number
        publicKey:
          type: string
          description: Optional RSA public key associated with the partner. This key is used for secure communication and encrypting connection keys. If not supplied, encryption is not required for the partner.
      required:
        - id
        - enterpriseId
        - trustOrg
        - name
        - connectionKeySchema
        - createdAt
        - updatedAt
        - clientId
        - broker
        - active
    V1PartnersPostOkPayload:
      title: V1PartnersPostOkPayload
      type: object
      properties:
        partner:
          allOf:
            - $ref: '#/components/schemas/V1PartnersOutput'
          description: The complete partner object that was successfully created.
      required:
        - partner
    V1PendingApproval:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        enterprise:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: The Id of the associated enterprise
        walletId:
          type: string
          example: 1G47mSr3oANXMafVrR8UC4pzV7FEAzo3r9
          description: The base address of the associated wallet
        creator:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: The Id of the User that created the Pending Approval
        createDate:
          type: string
          format: date-time
        info:
          type: object
          properties:
            type:
              type: string
              enum:
                - bitcoinAddressWhitelistRequest
                - userChangeRequest
                - policyRuleRequest
                - dailyLimitPolicyRequest
                - transactionRequest
                - tagUpdateRequest
                - updateEnterpriseRequest
                - updateApprovalsRequiredRequest
            updateEnterpriseRequest:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - add
                    - remove
                permissions:
                  type: array
                  items:
                    $ref: '#/components/schemas/EnterprisePermission'
                userId:
                  allOf:
                    - $ref: '#/components/schemas/Id'
                  description: The Id of the User to be added to or removed from the Enterprise
                email:
                  allOf:
                    - $ref: '#/components/schemas/Email'
                  description: E-Mail address of newly added users
            updateApprovalsRequiredRequest:
              type: object
              properties:
                requestedApprovalsRequired:
                  type: number
                  minimum: 1
                  description: the number of approvalsRequired that should be changed to
        state:
          type: string
          enum:
            - pending
            - approved
            - rejected
        walletUserIds:
          type: array
          items:
            $ref: '#/components/schemas/Id'
          description: an array of all the Users on the Wallet who need to see this Pending Approval
        approvalsRequired:
          type: number
          minimum: 1
        resolvers:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
              date:
                type: string
              resolutionType:
                type: string
                enum:
                  - pending
                  - approved
                  - rejected
              signatures:
                type: array
                items:
                  type: string
              videoApprover:
                type: string
              videoLink:
                type: string
              videoException:
                type: string
    V1PendingSettlementOutput:
      title: V1PendingSettlementOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the settlement. This is a UUID that uniquely identifies the settlement record.
          title: uuid
        partnerId:
          type: string
          description: The unique identifier of the partner the settlement is associated with. This is a UUID that uniquely identifies the partner.
          title: uuid
        externalId:
          type: string
          description: External identifier provided by the partner when creating the settlement.
          minLength: 1
        status:
          type: string
          enum:
            - pending
        settlementType:
          allOf:
            - $ref: '#/components/schemas/SettlementTypes'
          description: 'The type of settlement. Possible values are: - onchain: The settlement is on-chain. - offchain: The settlement is off-chain.'
        reconciled:
          type: boolean
          description: Whether or not the settlement is reconciled against trade data. Currently there are no reconciled settlements. This field is always false.
        initiatedBy:
          type: string
          description: Id of the user which initiated the settlement.
          minLength: 1
        notes:
          type: string
          description: The notes associated with the settlement. This is a free-form text field that can contain any additional information about the settlement.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the settlement was created. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the settlement was last updated. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        rtId:
          type: string
          description: Routed transaction id associated with the settlement. This is a UUID that uniquely identifies the routed transaction. This field is only populated for on-chain settlements for partners with automation enabled.
        lossSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if loss settlement SLA is close to being breached. Only relevant for on-chain settlements.
        gainSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if gain settlement SLA is close to being breached. Only relevant for on-chain settlements.
        cutoffAt:
          type: string
          description: The date and time of the newest trade being settled in the partner system. This is a timestamp in ISO 8601 format. This field is only populated for dispute enabled partners.
          format: date-time
          title: ISO Date String
        disputed:
          type: boolean
          description: Whether or not a dispute was raised on this settlement.
      required:
        - id
        - partnerId
        - externalId
        - status
        - settlementType
        - reconciled
        - initiatedBy
        - createdAt
        - updatedAt
        - lossSLAAlertSent
        - gainSLAAlertSent
    V1PendingSettlementPayload:
      title: V1PendingSettlementPayload
      type: object
      properties:
        settlement:
          $ref: '#/components/schemas/V1PendingSettlementOutput'
      required:
        - settlement
    V1RejectedSettlementOutput:
      title: V1RejectedSettlementOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the settlement. This is a UUID that uniquely identifies the settlement record.
          title: uuid
        partnerId:
          type: string
          description: The unique identifier of the partner the settlement is associated with. This is a UUID that uniquely identifies the partner.
          title: uuid
        externalId:
          type: string
          description: External identifier provided by the partner when creating the settlement.
          minLength: 1
        reason:
          type: string
          minLength: 1
        status:
          type: string
          enum:
            - rejected
        settlementType:
          allOf:
            - $ref: '#/components/schemas/SettlementTypes'
          description: 'The type of settlement. Possible values are: - onchain: The settlement is on-chain. - offchain: The settlement is off-chain.'
        reconciled:
          type: boolean
          description: Whether or not the settlement is reconciled against trade data. Currently there are no reconciled settlements. This field is always false.
        initiatedBy:
          type: string
          description: Id of the user which initiated the settlement.
          minLength: 1
        notes:
          type: string
          description: The notes associated with the settlement. This is a free-form text field that can contain any additional information about the settlement.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the settlement was created. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the settlement was last updated. This is a timestamp in ISO 8601 format.
          format: date-time
          title: ISO Date String
        finalizedAt:
          type: string
          format: date-time
          title: ISO Date String
        rtId:
          type: string
          description: Routed transaction id associated with the settlement. This is a UUID that uniquely identifies the routed transaction. This field is only populated for on-chain settlements for partners with automation enabled.
        lossSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if loss settlement SLA is close to being breached. Only relevant for on-chain settlements.
        gainSLAAlertSent:
          type: boolean
          description: Whether or not an alert has been sent if gain settlement SLA is close to being breached. Only relevant for on-chain settlements.
        cutoffAt:
          type: string
          description: The date and time of the newest trade being settled in the partner system. This is a timestamp in ISO 8601 format. This field is only populated for dispute enabled partners.
          format: date-time
          title: ISO Date String
        disputed:
          type: boolean
          description: Whether or not a dispute was raised on this settlement.
      required:
        - id
        - partnerId
        - externalId
        - reason
        - status
        - settlementType
        - reconciled
        - initiatedBy
        - createdAt
        - updatedAt
        - finalizedAt
        - lossSLAAlertSent
        - gainSLAAlertSent
    V1ReleasedAllocation:
      title: V1ReleasedAllocation
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the allocation/deallocation. This is a UUID that uniquely identifies the allocation record.
          title: uuid
        amount:
          allOf:
            - $ref: '#/components/schemas/PositiveAllocationAmount'
          description: The amount of the allocation/deallocation. Contains both the currency identifier and the quantity in base units.
        connectionId:
          type: string
          description: The unique identifier of the connection this allocation is for. This identifies a connection between a client and partner.
          title: uuid
        clientExternalId:
          type: string
          description: External identifier provided by the client when creating the allocation/deallocation. Used for idempotence and correlation with client systems.
          minLength: 1
        partnerExternalId:
          type: string
          description: External identifier of the allocation/deallocation in the partner system. May be populated when partners provide their own identifier for the allocation.
          minLength: 1
        initiatedBy:
          type: string
          description: The identifier of the user that initiated the allocation/deallocation. Represents the user ID from the BitGo platform.
          minLength: 1
        notes:
          type: string
          description: Optional notes provided by the client when creating the allocation/deallocation. Can contain additional context or information about the purpose of the allocation.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the allocation/deallocation was created. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the allocation/deallocation was last updated. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        retriable:
          type: boolean
          enum:
            - false
          description: Indicates whether or not the allocation/deallocation is retriable. When true, clients may retry the operation if it did not complete successfully. Retry can be performed by re-sending the same allocation request that was originally sent.
        status:
          type: string
          enum:
            - released
          description: 'Status of the allocation/deallocation. Possible values: - reserved: The amount for allocation/deallocation is reserved but operation has not completed. This is a temporary state awaiting final resolution. - cleared: Terminal state; the amount for allocation/deallocation is cleared and funds have been successfully allocated. This indicates a successful operation. - released: Terminal state; the amount for allocation/deallocation is released and funds have been returned. This indicates the operation failed, either because balance was insufficient for allocation/deallocation, or that the partner rejected the request to allocate/deallocate.'
        reason:
          type: string
          description: The reason that the allocation/deallocation is not cleared. Provides a descriptive explanation for why the allocation is in the reserved state. Will not be defined if the allocation is cleared.
          minLength: 1
      required:
        - id
        - amount
        - connectionId
        - clientExternalId
        - initiatedBy
        - createdAt
        - updatedAt
        - retriable
        - status
        - reason
    V1ReservedAllocationOrErrorPayload:
      title: V1ReservedAllocationOrErrorPayload
      oneOf:
        - $ref: '#/components/schemas/V1ErrorPayload'
        - $ref: '#/components/schemas/V1ReservedRetriableAllocationsPostPayload'
    V1ReservedAllocationOutput:
      title: V1ReservedAllocationOutput
      oneOf:
        - $ref: '#/components/schemas/V1ReservedRetriableAllocationOutput'
        - $ref: '#/components/schemas/V1ReservedNonRetriableAllocationOutput'
    V1ReservedDeallocationOrErrorPayload:
      title: V1ReservedDeallocationOrErrorPayload
      oneOf:
        - $ref: '#/components/schemas/V1ErrorPayload'
        - $ref: '#/components/schemas/V1ReservedRetriableDeallocationOutput'
    V1ReservedDeallocationsPostPayload:
      title: V1ReservedDeallocationsPostPayload
      type: object
      description: Response payload for a deallocation in the reserved state. Returned when a deallocation request has been accepted but is still being processed.
      properties:
        deallocation:
          allOf:
            - $ref: '#/components/schemas/V1ReservedAllocationOutput'
          description: The deallocation record in its reserved state. This contains all deallocation details with a status of 'reserved', which could be either retriable or non-retriable based on the retriable field.
      required:
        - deallocation
    V1ReservedNonRetriableAllocationOutput:
      title: V1ReservedNonRetriableAllocationOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the allocation/deallocation. This is a UUID that uniquely identifies the allocation record.
          title: uuid
        amount:
          allOf:
            - $ref: '#/components/schemas/PositiveAllocationAmount'
          description: The amount of the allocation/deallocation. Contains both the currency identifier and the quantity in base units.
        connectionId:
          type: string
          description: The unique identifier of the connection this allocation is for. This identifies a connection between a client and partner.
          title: uuid
        clientExternalId:
          type: string
          description: External identifier provided by the client when creating the allocation/deallocation. Used for idempotence and correlation with client systems.
          minLength: 1
        partnerExternalId:
          type: string
          description: External identifier of the allocation/deallocation in the partner system. May be populated when partners provide their own identifier for the allocation.
          minLength: 1
        initiatedBy:
          type: string
          description: The identifier of the user that initiated the allocation/deallocation. Represents the user ID from the BitGo platform.
          minLength: 1
        notes:
          type: string
          description: Optional notes provided by the client when creating the allocation/deallocation. Can contain additional context or information about the purpose of the allocation.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the allocation/deallocation was created. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the allocation/deallocation was last updated. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        retriable:
          type: boolean
          enum:
            - false
          description: Indicates whether or not the allocation/deallocation is retriable. When true, clients may retry the operation if it did not complete successfully. Retry can be performed by re-sending the same allocation request that was originally sent.
        reason:
          type: string
          description: The reason that the allocation/deallocation is not cleared. Provides a descriptive explanation for why the allocation is in the reserved state. Will not be defined if the allocation is cleared.
          minLength: 1
        status:
          type: string
          enum:
            - reserved
          description: 'Status of the allocation/deallocation. Possible values: - reserved: The amount for allocation/deallocation is reserved but operation has not completed. This is a temporary state awaiting final resolution. - cleared: Terminal state; the amount for allocation/deallocation is cleared and funds have been successfully allocated. This indicates a successful operation. - released: Terminal state; the amount for allocation/deallocation is released and funds have been returned. This indicates the operation failed, either because balance was insufficient for allocation/deallocation, or that the partner rejected the request to allocate/deallocate.'
      required:
        - id
        - amount
        - connectionId
        - clientExternalId
        - initiatedBy
        - createdAt
        - updatedAt
        - retriable
        - reason
        - status
    V1ReservedNonRetriableAllocationsPostPayload:
      title: V1ReservedNonRetriableAllocationsPostPayload
      type: object
      description: Response payload for an allocation that is in a reserved state but is not retriable. This represents a pending allocation that is being processed asynchronously.
      properties:
        allocation:
          allOf:
            - $ref: '#/components/schemas/V1ReservedNonRetriableAllocationOutput'
          description: The allocation record in its reserved, non-retriable state. This contains all allocation details with a status of 'reserved' and retriable=false, indicating the allocation is being processed asynchronously and does not require a retry to progress.
      required:
        - allocation
    V1ReservedRetriableAllocationOutput:
      title: V1ReservedRetriableAllocationOutput
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the allocation/deallocation. This is a UUID that uniquely identifies the allocation record.
          title: uuid
        amount:
          allOf:
            - $ref: '#/components/schemas/PositiveAllocationAmount'
          description: The amount of the allocation/deallocation. Contains both the currency identifier and the quantity in base units.
        connectionId:
          type: string
          description: The unique identifier of the connection this allocation is for. This identifies a connection between a client and partner.
          title: uuid
        clientExternalId:
          type: string
          description: External identifier provided by the client when creating the allocation/deallocation. Used for idempotence and correlation with client systems.
          minLength: 1
        partnerExternalId:
          type: string
          description: External identifier of the allocation/deallocation in the partner system. May be populated when partners provide their own identifier for the allocation.
          minLength: 1
        initiatedBy:
          type: string
          description: The identifier of the user that initiated the allocation/deallocation. Represents the user ID from the BitGo platform.
          minLength: 1
        notes:
          type: string
          description: Optional notes provided by the client when creating the allocation/deallocation. Can contain additional context or information about the purpose of the allocation.
          minLength: 1
        createdAt:
          type: string
          description: The date and time when the allocation/deallocation was created. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        updatedAt:
          type: string
          description: The date and time when the allocation/deallocation was last updated. Represented as an ISO 8601 formatted date string.
          format: date-time
          title: ISO Date String
        retriable:
          type: boolean
          enum:
            - true
          description: Indicates whether or not the allocation/deallocation is retriable. When true, clients may retry the operation if it did not complete successfully. Retry can be performed by re-sending the same allocation request that was originally sent.
        reason:
          type: string
          description: The reason that the allocation/deallocation is not cleared. Provides a descriptive explanation for why the allocation is in the reserved state. Will not be defined if the allocation is cleared.
          minLength: 1
        status:
          type: string
          enum:
            - reserved
          description: 'Status of the allocation/deallocation. Possible values: - reserved: The amount for allocation/deallocation is reserved but operation has not completed. This is a temporary state awaiting final resolution. - cleared: Terminal state; the amount for allocation/deallocation is cleared and funds have been successfully allocated. This indicates a successful operation. - released: Terminal state; the amount for allocation/deallocation is released and funds have been returned. This indicates the operation failed, either because balance was insufficient for allocation/deallocation, or that the partner rejected the request to allocate/deallocate.'
      required:
        - id
        - amount
        - connectionId
        - clientExternalId
        - initiatedBy
        - createdAt
        - updatedAt
        - retriable
        - reason
        - status
    V1ReservedRetriableAllocationsPostPayload:
      title: V1ReservedRetriableAllocationsPostPayload
      type: object
      properties:
        allocation:
          allOf:
            - $ref: '#/components/schemas/V1ReservedRetriableAllocationOutput'
          description: The allocation record in its reserved, retriable state. This contains all allocation details with a status of 'reserved' and retriable=true, indicating a temporary issue that clients should retry.
      required:
        - allocation
    V1ReservedRetriableDeallocationOutput:
      title: V1ReservedRetriableDeallocationOutput
      type: object
      properties:
        deallocation:
          allOf:
            - $ref: '#/components/schemas/V1ReservedRetriableAllocationOutput'
          description: The retriable reserved deallocation details. Contains information about the deallocation that is in the reserved state (pending) and can be retried if needed.
      required:
        - deallocation
    V1SettlementOutput:
      title: V1SettlementOutput
      oneOf:
        - $ref: '#/components/schemas/V1PendingSettlementOutput'
        - $ref: '#/components/schemas/V1FailedSettlementOutput'
        - $ref: '#/components/schemas/V1CompleteSettlementOutput'
        - $ref: '#/components/schemas/V1RejectedSettlementOutput'
    V1SettlementPayload:
      title: V1SettlementPayload
      type: object
      properties:
        settlement:
          $ref: '#/components/schemas/V1SettlementOutput'
      required:
        - settlement
    V1SupportedCurrencies:
      title: V1SupportedCurrencies
      type: object
      additionalProperties:
        type: array
        items:
          allOf:
            - type: object
              properties: {}
            - $ref: '#/components/schemas/BNMetadata'
    V1UpdateBankAccountResponse:
      title: V1UpdateBankAccountResponse
      allOf:
        - $ref: '#/components/schemas/SingleBankAccountResponse'
      description: codec for update bank account http response
    V2PartnerSettlementOkPayload:
      title: V2PartnerSettlementOkPayload
      type: object
      properties:
        settlement:
          allOf:
            - $ref: '#/components/schemas/V2PendingSettlement'
          description: The initiated settlement object in it's pending state.
      required:
        - settlement
    V2PendingSettlement:
      title: V2PendingSettlement
      allOf:
        - type: object
          properties:
            cutoffAt:
              type: string
              description: The datetime provided by the partner representing the timestamp of the most recent trade being settled.
              format: date-time
              title: ISO Date String
            settlingDisputes:
              allOf:
                - $ref: '#/components/schemas/V1AssignedDisputesWithClosureOutput'
              description: Array of disputes that were closed and not yet assigned at the time the request was first received. These disputes are assigned to the settlement and their associated adjustedSettlementTransfers will be executed with this settlement regardless of whether or not the associated client(s) dispute.
          required:
            - cutoffAt
            - settlingDisputes
        - $ref: '#/components/schemas/V1PendingSettlementOutput'
    ValidValues:
      type: array
      description: A list of valid values, only values from this list will be accepted.
      items:
        anyOf:
          - $ref: '#/components/schemas/GreaterThanValue'
          - $ref: '#/components/schemas/GreaterThanOrEqualToValue'
          - $ref: '#/components/schemas/LessThanValue'
          - $ref: '#/components/schemas/LessThanOrEqualToValue'
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/GeneralError'
        - type: object
          properties:
            failedValidations:
              type: object
    VariableFee:
      title: VariableFee
      type: object
      properties:
        type:
          type: string
          enum:
            - variable
        percent:
          type: string
          minLength: 1
        minimum:
          type: string
          minLength: 1
      required:
        - type
        - percent
        - minimum
    VelocityAmountConditionParameter:
      title: Amount
      type: object
      description: The withdrawable amount within the time window.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - amount
          example: amount
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Amount
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The amount that can be spent within the time window
        type:
          type: string
          description: The type of acceptable values for this condition parameter.
          enum:
            - NON_NEGATIVE_NUMBER
          example: NON_NEGATIVE_NUMBER
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
    VelocityCoinConditionParameter:
      title: Unit
      type: object
      description: The unit of currency the amount is denoted in, can be a cryptocurrency or a fiat currency.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - coin
          example: coin
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Unit
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The unit the amount is denoted in, can be a coin or a fiat currency
        type:
          type: string
          description: The type of acceptable values for this condition parameter.
          enum:
            - COIN_OR_USD
          example: COIN_OR_USD
        required:
          type: string
          description: A value must always be provided, i.e. the parameter is required.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'false'
    VerificationState:
      title: VerificationState
      allOf:
        - $ref: '#/components/schemas/VerificationStateEnum'
    VerificationStateEnum:
      type: string
      enum:
        - approved
        - rejected
        - pending
        - removed
        - revise
    VerifiedKycState:
      type: string
      enum:
        - approved
        - pending
        - rejected
    VerifiedKycState1:
      title: VerifiedKycState
      type: string
      enum:
        - approved
        - rejected
        - pending
    VerifyWebhookNotificationResponse:
      title: VerifyWebhookNotificationResponse
      type: object
      properties:
        webhookId:
          type: string
        isValid:
          type: boolean
      required:
        - webhookId
        - isValid
    VetStakingIntent:
      title: VET Staking Intent
      allOf:
        - type: object
          properties:
            amount:
              $ref: '#/components/schemas/Amount'
            stakingContractAddress:
              type: string
              minLength: 1
            nftTokenId:
              $ref: '#/components/schemas/optionalString'
          required:
            - amount
            - stakingContractAddress
        - $ref: '#/components/schemas/StakeIntent'
    VideoApprovers:
      type: array
      items:
        $ref: '#/components/schemas/Id'
      description: |
        A list of public ids of users that should do the video id verification for the transaction that is being sent or initiated.
      minItems: 1
    VideoIdUserState:
      title: VideoIdUserState
      type: string
      enum:
        - awaitingApproval
        - awaitingAcceptance
        - pendingSchedule
        - pendingInitialId
        - underReview
        - approved
        - rejected
        - archived
    VideoIdWaived:
      example: true
      description: Whether the customer has waived the need for Video ID on low risk withdrawals.
      type: boolean
    ViewAllWallets:
      example: true
      description: All users on the enterprise can view all enterprise wallets, even if they are not viewers on the wallet itself
      type: boolean
    VoteDelegationIntent:
      title: Vote Delegation Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - voteDelegation
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent'
    Wallet:
      title: Wallet
      type: object
      properties:
        allowBackupKeySigning:
          type: boolean
        approvalsRequired:
          type: number
          example: 1
          minimum: 1
        coin:
          $ref: '#/components/schemas/CoinString'
        coinSpecific:
          $ref: '#/components/schemas/WalletSubdocument'
        deleted:
          type: boolean
        disableTransactionNotifications:
          type: boolean
        hasLargeNumberOfAddresses:
          type: boolean
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        isCold:
          type: boolean
        label:
          type: string
          example: My Wallet
        startDate:
          type: string
          description: Wallet creation time
          format: date-time
          title: ISO Date String
        admin:
          type: object
          properties:
            policy:
              $ref: '#/components/schemas/Policy'
        billingEnterprise:
          type: string
        buildDefaults:
          type: object
          properties:
            minFeeRate:
              type: number
              description: (UTXO only) Wallet-level minimum fee rate that must be greater than or equal to the default of 1000 satoshis/kvByte. Per transaction, you can override "minFeeRate" with the "feeRate" parameter.
              example: 12000
              minimum: 1000
        clientFlags:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: boolean
        config:
          type: object
          properties:
            nodeId: {}
        custodialWalletId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        customChangeKeySignatures:
          type: object
          properties:
            user:
              type: string
            backup:
              type: string
            bitgo:
              type: string
        customerWalletId:
          type: string
        enterprise:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        organization:
          type: string
        bitgoOrg:
          type: string
        freeze:
          type: object
          properties:
            time:
              type: string
              format: date-time
              title: ISO Date String
            expires:
              type: string
              format: date-time
              title: ISO Date String
        instantProvider:
          type: string
        keys:
          type: array
          example:
            - 585951a5df8380e0e304a553
            - 585951a5df8380e0e30d645c
            - 585951a5df8380e0e30b6147
          items:
            type: string
        keySignatures:
          type: object
          properties:
            backupPub:
              type: string
            bitgoPub:
              type: string
        m:
          type: number
          description: Number of signatures required. This value must be 2 for hot wallets, 1 for **ofc** wallets, and not specified for custodial wallets.
          example: 2
        migratedFrom:
          type: string
        multisigType:
          $ref: '#/components/schemas/MultiSigType'
        multisigTypeVersion:
          $ref: '#/components/schemas/MultisigTypeVersion'
        'n':
          type: number
          description: Number of keys provided. This value must be 3 for hot wallets, 1 for **ofc** wallets, and not specified for custodial wallets.
          example: 3
        recoverable:
          type: boolean
        tags:
          type: array
          items:
            type: string
        type:
          allOf:
            - $ref: '#/components/schemas/WalletType'
          description: The type describes who owns the keys to the wallet and how they are stored. "cold" wallets are wallets where the private key of the user key is stored exclusively outside of BitGo's system. "custodial" means that this wallet is a cold wallet where BitGo owns the keys. Only customers of the BitGo Trust can create this kind of wallet. "custodialPaired" means that this is a hot wallet that is owned by the customer but it will be linked to a cold (custodial) wallet where BitGo owns the keys. This option is only available to customers of BitGo Inc. BitGo stores an encrypted private key for the user key of "hot" wallets. "trading" wallets are trading accounts where the coin is "ofc". "distributedCustody" means You manage one key and another key agent manages the second key. BitGo manages the third key
        subType:
          $ref: '#/components/schemas/WalletSubType'
        balanceString:
          type: string
          description: The cleared balance of the address in base units (e.g. Satoshis). Guaranteed to not lose precision. The is only returned if the `expandBalance` query parameter is set to `true`.
        balance:
          type: number
          description: The cleared balance of the address in base units (e.g. Satoshis). The is only returned if the `expandBalance` query parameter is set to `true`.
        confirmedBalanceString:
          type: string
          description: The total balance of confirmed transactions in base units (e.g. Satoshis). The is only returned if the `expandBalance` query parameter is set to `true`. Guaranteed to not lose precision.
        confirmedBalance:
          type: number
          description: The total balance of confirmed transactions in base units (e.g. Satoshis). The is only returned if the `expandBalance` query parameter is set to `true`.
        spendableBalanceString:
          type: string
          description: The total balance in base units (e.g. Satoshis) which may be used as inputs for creating new transactions in string representation. Guaranteed to not lose precision. The is only returned if the `expandBalance` query parameter is set to `true`.
        spendableBalance:
          type: number
          description: The total balance in base units (e.g. Satoshis) which may be used as inputs for creating new transactions in string representation. The is only returned if the `expandBalance` query parameter is set to `true`.
        stakingBalanceString:
          type: string
          description: The staked balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
        rewardBalanceString:
          type: string
          description: The staking reward balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
        offchain:
          allOf:
            - $ref: '#/components/schemas/OffChainWalletBalance'
          description: Lightning Balances
        users:
          type: array
          items:
            type: object
            properties:
              needsRecovery:
                type: boolean
              permissions:
                type: array
                items:
                  type: string
                  enum:
                    - admin
                    - spend
                    - view
                    - freeze
                    - trade
                  description: 'This type represents the permissions that can be assigned to a user when adding them to a wallet 1. ''admin'': add/remove wallet policies, add/remove wallet users, approve/reject wallet pending approvals, withdraw assets from wallet, generate new receive addresses, view all balances and transactions 2. ''spend'': withdraw assets from wallet, generate new receive addresses, view all balances and transactions 3. ''view'': generate new receive addresses, view all balances and transactions 4. ''freeze'': 5. ''trade'': trade on a wallet - applicable only for trading wallets'
              recoverable:
                type: boolean
              user:
                type: string
            required:
              - permissions
        walletFlags:
          type: array
          items:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/WalletFlag'
              value:
                type: string
            required:
              - name
              - value
        receiveAddress:
          $ref: '#/components/schemas/WalletAddress'
      required:
        - allowBackupKeySigning
        - approvalsRequired
        - coin
        - coinSpecific
        - deleted
        - disableTransactionNotifications
        - hasLargeNumberOfAddresses
        - id
        - isCold
        - label
        - startDate
    Wallet1:
      type: object
      properties:
        admin:
          type: object
          properties:
            policy:
              $ref: '#/components/schemas/Policy1'
        allowBackupKeySigning:
          type: boolean
        approvalsRequired:
          $ref: '#/components/schemas/ApprovalsRequired'
        balanceString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: Total balance in base units (e.g. Satoshis)
        buildDefaults:
          $ref: '#/components/schemas/WalletBuildDefaults'
        coin:
          $ref: '#/components/schemas/Coin'
        coinSpecific:
          $ref: '#/components/schemas/WalletCoinSpecific'
        custodialWallet:
          type: object
          description: The associated custodial wallet object
        custodialWalletId:
          $ref: '#/components/schemas/Id'
        deleted:
          type: boolean
        disableTransactionNotifications:
          type: boolean
        enterprise:
          $ref: '#/components/schemas/Id'
        freeze:
          type: object
          properties:
            time:
              type: string
              format: dateTime
            expires:
              type: string
              format: dateTime
        id:
          $ref: '#/components/schemas/Id'
        isCold:
          type: boolean
        keys:
          $ref: '#/components/schemas/Keys'
        label:
          $ref: '#/components/schemas/WalletLabel'
        m:
          $ref: '#/components/schemas/NumSignatures'
        'n':
          $ref: '#/components/schemas/NumKeychains'
        nodeId:
          $ref: '#/components/schemas/Id'
        receiveAddress:
          $ref: '#/components/schemas/Address2'
        recoverable:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        spendableBalanceString:
          allOf:
            - $ref: '#/components/schemas/IntegerString'
          description: Spendable balance in base units (e.g. Satoshis)
        unspentCount:
          type: number
          example: 100
          description: Number of unspent outputs present in the wallet
        startDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
          description: Wallet creation time
        type:
          $ref: '#/components/schemas/WalletTypePublic'
        users:
          type: array
          items:
            $ref: '#/components/schemas/WalletUser'
        customChangeKeySignatures:
          $ref: '#/components/schemas/CustomChangeKeySignatures'
        multisigType:
          $ref: '#/components/schemas/WalletMultisigType'
        multisigTypeVersion:
          $ref: '#/components/schemas/MultisigTypeVersion1'
      required:
        - approvalsRequired
        - coin
        - deleted
        - disableTransactionNotifications
        - id
        - label
    WalletAddress:
      title: WalletAddress
      allOf:
        - type: object
          properties:
            coin:
              $ref: '#/components/schemas/CoinString'
            wallet:
              type: string
            chain:
              $ref: '#/components/schemas/AddressChain'
            index:
              type: number
          required:
            - coin
            - wallet
            - chain
            - index
        - $ref: '#/components/schemas/BaseWalletAddress'
    WalletAddressUnion:
      title: WalletAddressUnion
      oneOf:
        - $ref: '#/components/schemas/WalletAddress'
        - $ref: '#/components/schemas/LightningWalletAddress'
    WalletAdminAction:
      title: Require wallet-admin approval
      type: object
      description: Requires approval from one or more wallet admin.
      required:
        - name
        - label
        - description
        - status
        - adminOnly
        - parameters
      properties:
        name:
          type: string
          description: The name of the action.
          enum:
            - approvals.customer.walletAdmin
          example: approvals.customer.walletAdmin
        label:
          type: string
          description: A label for the action which can be shown to an end user.
          example: Wallet Admin
        description:
          type: string
          description: A description for the action which can be shown to an end user.
          example: Require approval from wallet admins
        status:
          type: string
          description: |
            Status of the action. Indicates if the Actions is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The action is available for use.
            * `INACTIVE` - The action is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        adminOnly:
          type: boolean
          description: true, if this is an internal action, false otherwise.
          example: false
        parameters:
          type: array
          description: A list of Parameters to control how the action behaves.
          items:
            anyOf:
              - $ref: '#/components/schemas/MinRequireActionParameter'
    WalletAdminActionRequest:
      title: Require Require approval from wallet admins
      type: object
      description: Require Require approval from wallet admins.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the associated Action.
          enum:
            - approvals.customer.walletAdmin
          example: approvals.customer.walletAdmin
        parameters:
          type: object
          description: Required data needed to configure the Action.
          required:
            - minRequired
          properties:
            minRequired:
              type: string
              description: Number of required approvals
              example: '1'
        operator:
          $ref: '#/components/schemas/OperatorType'
    WalletAllCondition:
      title: Wallet all
      type: object
      description: Wallet-all condition for the all-wallets scope.
      required:
        - name
        - label
        - description
        - status
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - wallet.all
          example: wallet.all
        label:
          type: string
          description: A label for the condition which can be shown to an end user.
          example: Wallet All
        description:
          type: string
          description: A description for the condition which can be shown to an end user.
          example: For all Wallets
        status:
          type: string
          description: |
            Status of the condition. Indicates if the condition is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The condition is available for use.
            * `INACTIVE` - The condition is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
    WalletAllFilteringCondition:
      title: All wallets
      type: object
      description: Filter by all wallets.
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - wallet.all
          example: wallet.all
    WalletBuildDefaults:
      type: object
      properties:
        minFeeRate:
          type: integer
          minimum: 1000
          nullable: true
          example: 12000
          description: |
            (BTC only) The minimum fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte. Must be greater than or equal to the default of 1000 satoshis/kvByte.

            Note: The you can override `minFeeRate` on a per transaction basis with the `feeRate` parameter.
        maxFeeRate:
          type: integer
          minimum: 1000
          nullable: true
          example: 18000
          description: |
            (BTC only) The maximum fee rate (in base units) per kilobyte (or virtual kilobyte). For example, satoshis per kvByte. The `maxFeeRate` limits the fee rate generated by both `feeMultiplier` and `numBlocks`.

            Note: The you can override `maxFeeRate` on a per transaction basis with the `feeRate` parameter.
        feeMultiplier:
          type: number
          minimum: 1
          nullable: true
          example: 1.2
          description: |
            (UTXO only) Custom multiplier to the `feeRate`. The resulting fee rate is limited by the `maxFeeRate`. For replace-by-fee (RBF) transactions (that include `rbfTxIds`), the `feeMultiplier` must be greater than 1, since it's an absolute fee multiplier to the transaction being replaced.

            Note: The `maxFeeRate` limits the fee rate generated by `feeMultiplier`.
        changeAddressType:
          $ref: '#/components/schemas/DefaultChangeAddressType'
        txFormat:
          type: string
          example: psbt
          enum:
            - legacy
            - psbt
            - psbt-lite
          description: |
            (UTXO only) The default transaction format to use for this wallet. Per transaction, you can override the default with the `txFormat` parameter.
    WalletCoinSpecific:
      oneOf:
        - title: Wallet
          type: object
          properties:
            creationFailure:
              type: array
              items:
                $ref: '#/components/schemas/TxId'
              description: Includes list of fail initialization txids
            pendingChainInitialization:
              type: boolean
              description: Whether the wallet needs to be initialized on the chain
        - $ref: '#/components/schemas/WalletCoinSpecificCosmos'
        - $ref: '#/components/schemas/WalletCoinSpecificXlm'
    WalletCoinSpecificCosmos:
      title: ATOM
      type: object
      properties:
        rootAddress:
          type: string
          description: Wallet address to send or receive assets.
          example: cosmos1uvrgkp82dmeks368d7g2ejzm3axhapzveh5uek
        lastChainIndex:
          type: number
          description: Index of last address that was derived.
          example: 1
        lastMemoId:
          type: string
          description: A running counter of the last known memo id. The first one is 0.
          example: '0'
        pendingEcdsaTssInitialization:
          type: boolean
          description: If true, this wallet cannot sign transactions or messages as the enterprise has not finished MPC setup.
          example: false
      required:
        - rootAddress
        - lastMemoId
    WalletCoinSpecificXlm:
      title: XLM
      type: object
      properties:
        rootAddress:
          type: string
          description: Root address of the wallet
          example: GCTTCPH4IIDK7P72FFAEJ3ZFN6WDHJH6GGMRPHPM56ZWGIQ7B3XTIJAM
        stellarUsername:
          type: string
          description: Username for the user's Stellar address
          example: foo_bar@baz.com
        homeDomain:
          type: string
          description: Home domain of a Stellar account
          example: bitgo.com
        stellarAddress:
          type: string
          description: Email-like address associated to a Stellar account
          example: foo_bar@baz.com*bitgo.com
    WalletConsolidateUnspentsResponse:
      type: object
      properties:
        txHex:
          oneOf:
            - $ref: '#/components/schemas/TxHex'
            - $ref: '#/components/schemas/PsbtHex'
        txInfo:
          $ref: '#/components/schemas/UtxoTxInfo'
        feeInfo:
          $ref: '#/components/schemas/UtxoFeeInfo'
    WalletCountResponse:
      title: WalletCountResponse
      type: object
      properties:
        count:
          type: number
          description: The number of wallets that match the query.
          minimum: 0
      required:
        - count
    WalletCreateCoinSpecific:
      type: object
      properties:
        xlm:
          $ref: '#/components/schemas/WalletCreateCoinSpecificXlm'
        txlm:
          $ref: '#/components/schemas/WalletCreateCoinSpecificXlm'
        lnbtc:
          $ref: '#/components/schemas/WalletCreateCoinSpecificLnbtc'
        tlnbtc:
          $ref: '#/components/schemas/WalletCreateCoinSpecificLnbtc'
    WalletCreateCoinSpecificLnbtc:
      type: object
      properties:
        keys:
          allOf:
            - $ref: '#/components/schemas/Keys'
          example:
            - 585951a5df8380e0e304a553
            - 585951a5df8380e0e30d645c
          description: Lightning wallet only. Array of two key IDs for 'userAuthKey' and 'nodeAuthKey'.
    WalletCreateCoinSpecificXlm:
      type: object
      properties:
        stellarUsername:
          type: string
          description: Username for the user's Stellar address. It's case insensitive, and it can't be changed after it's set.
          pattern: ^[a-zA-Z0-9-_.+@]+$
          example: foo_bar@baz.com
    WalletCrossChainUnspentResponse:
      title: WalletCrossChainUnspentResponse
      type: array
      items:
        type: object
        properties:
          unspent:
            type: object
            properties:
              outputID:
                type: number
                description: Type ID for this output.
                example: 7
              amount:
                type: string
                description: Amount as a BigNumber string.
                example: '2000000'
              txid:
                type: string
                description: Transaction ID of this unspent.
                example: 2WW4Z9R9jdUSR1uheJ1rGuLUNXjipXESGknGWrkqx7KUU1YKV5
              threshold:
                type: number
                description: Number of signatures required to unlock UTXO.
                example: 1
              addresses:
                type: array
                example:
                  - C-fuji167u3leuup654jdea3euggkhh82ta53jer3ttf4
                  - C-fuji19vy09dn76mvt55r0x2d3ch2jrr8z6lgp80vzlj
                  - C-fuji1idynny22nx91z7mujpwadmjy930yjqa040zdjh0w
                items:
                  type: string
                  description: Addresses tied to the UTXO for the signatures.
              outputidx:
                type: string
                description: Index of the output in the transaction.
                example: '1'
              locktime:
                type: string
                description: Time that the UTXO is unlocked.
                example: '0'
            required:
              - outputID
              - amount
              - txid
              - threshold
              - addresses
              - outputidx
              - locktime
          sourceChain:
            type: string
            description: The source chain
          destinationChain:
            type: string
            description: The destination chain
          fromWallet:
            type: string
            description: Public ID of the wallet (in the source chain) that created the cross-chain output.
            example: 6386565affdf48cb812ca1f0ed49a621
          toWallet:
            type: string
            description: Public ID of the wallet (in the destination chain) that's the target recipient of the cross-chain transfer.
            example: 6386565affdf48cb812ca1f0ed49a621
          toAddress:
            type: string
            description: Addresses (in the destination chain) that are target recipients of the cross-chain transfer.
            example: '0x125c4451c870f753265b0b1af3cf6ab88ffe4657'
        required:
          - unspent
          - sourceChain
          - destinationChain
          - fromWallet
          - toWallet
          - toAddress
    WalletCustomAddress:
      type: string
      example: ivxzn3bdn4uo
      description: A custom address can be provided for EOS wallets. It must be exactly 12 alphanumeric characters.
    WalletFlag:
      title: WalletFlag
      type: string
      enum:
        - isStaking
        - lightning
        - musigKp
        - trackingInscriptions
        - rbf
        - coldWalletStaking
        - tokenizationToken
        - oneClickStaking
        - solOfcStaking
        - suiOfcStaking
        - enableWalletConnect
        - enableSolCustomTx
    WalletId:
      type: string
      example: 59cd72485007a239fb00282ed480da1f
    WalletIdNonEmptyString:
      title: WalletIdNonEmptyString
      type: string
      example: 59cd72485007a239fb00282ed480da1f
      minLength: 1
      pattern: ^[0-9a-f]{32}$
    WalletIdParameter:
      type: object
      description: The Wallet Id parameter determines on which Wallets this condition will trigger.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - walletId
          example: walletId
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Wallet Id
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: he Wallet Ids
        type:
          type: string
          description: The type of acceptable values for this condition parameter.
          enum:
            - BITGO_WALLET_ID
          example: BITGO_WALLET_ID
        required:
          type: string
          description: This Conditions parameter must always be provided.
          enum:
            - ALWAYS
          example: ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'true'
    WalletIdString:
      title: WalletIdString
      type: string
      example: 59cd72485007a239fb00282ed480da1f
      pattern: ^[0-9a-f]{32}$
    WalletIdsCondition:
      title: Wallet ID
      type: object
      description: Wallet ID condition for the all-wallets scope.
      required:
        - name
        - label
        - description
        - status
        - parameters
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - wallet.ids
          example: wallet.ids
        label:
          type: string
          description: A label for the condition which can be shown to an end user.
          example: Wallet Id
        description:
          type: string
          description: A description for the condition which can be shown to an end user.
          example: The Wallet Ids
        status:
          type: string
          description: |
            Status of the condition. Indicates if the condition is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The condition is available for use.
            * `INACTIVE` - The condition is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        parameters:
          type: array
          description: A list of Parameters to control how the condition behaves.
          items:
            allOf:
              - $ref: '#/components/schemas/WalletIdParameter'
    WalletIdsFilteringCondition:
      title: Wallet ID
      type: object
      description: Filter by wallet ID.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - wallet.ids
          example: wallet.ids
        parameters:
          type: object
          description: Required data needed to evaluate the Filtering Condition.
          required:
            - walletId
          properties:
            walletId:
              type: array
              items:
                type: string
                description: The Wallet Ids this Filtering Condition will match.
    WalletLabel:
      type: string
      example: My Wallet
    WalletLimit:
      type: object
      properties:
        coin:
          $ref: '#/components/schemas/Coin'
        limit:
          type: integer
        count:
          type: integer
          minimum: 0
        isCustodial:
          type: boolean
          enum:
            - true
      required:
        - coin
        - count
    WalletLimitsResponse:
      type: array
      items:
        $ref: '#/components/schemas/WalletLimit'
    WalletListResponse:
      title: WalletListResponse
      type: object
      properties:
        coin:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        wallets:
          type: array
          items:
            type: object
            properties:
              allowBackupKeySigning:
                type: boolean
              approvalsRequired:
                type: number
                example: 1
                minimum: 1
              coin:
                $ref: '#/components/schemas/CoinString'
              coinSpecific:
                $ref: '#/components/schemas/WalletSubdocument'
              deleted:
                type: boolean
              disableTransactionNotifications:
                type: boolean
              hasLargeNumberOfAddresses:
                type: boolean
              id:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              isCold:
                type: boolean
              label:
                type: string
                example: My Wallet
              startDate:
                type: string
                description: Wallet creation time
                format: date-time
                title: ISO Date String
              admin:
                type: object
                properties:
                  policy:
                    $ref: '#/components/schemas/Policy'
              billingEnterprise:
                type: string
              buildDefaults:
                type: object
                properties:
                  minFeeRate:
                    type: number
                    description: (UTXO only) Wallet-level minimum fee rate that must be greater than or equal to the default of 1000 satoshis/kvByte. Per transaction, you can override "minFeeRate" with the "feeRate" parameter.
                    example: 12000
                    minimum: 1000
              clientFlags:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: boolean
              config:
                type: object
                properties:
                  nodeId: {}
              custodialWalletId:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              customChangeKeySignatures:
                type: object
                properties:
                  user:
                    type: string
                  backup:
                    type: string
                  bitgo:
                    type: string
              customerWalletId:
                type: string
              enterprise:
                type: string
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              organization:
                type: string
              bitgoOrg:
                type: string
              freeze:
                type: object
                properties:
                  time:
                    type: string
                    format: date-time
                    title: ISO Date String
                  expires:
                    type: string
                    format: date-time
                    title: ISO Date String
              instantProvider:
                type: string
              keys:
                type: array
                example:
                  - 585951a5df8380e0e304a553
                  - 585951a5df8380e0e30d645c
                  - 585951a5df8380e0e30b6147
                items:
                  type: string
              keySignatures:
                type: object
                properties:
                  backupPub:
                    type: string
                  bitgoPub:
                    type: string
              m:
                type: number
                description: Number of signatures required. This value must be 2 for hot wallets, 1 for **ofc** wallets, and not specified for custodial wallets.
                example: 2
              migratedFrom:
                type: string
              multisigType:
                $ref: '#/components/schemas/MultiSigType'
              multisigTypeVersion:
                $ref: '#/components/schemas/MultisigTypeVersion'
              'n':
                type: number
                description: Number of keys provided. This value must be 3 for hot wallets, 1 for **ofc** wallets, and not specified for custodial wallets.
                example: 3
              recoverable:
                type: boolean
              tags:
                type: array
                items:
                  type: string
              type:
                allOf:
                  - $ref: '#/components/schemas/WalletType'
                description: The type describes who owns the keys to the wallet and how they are stored. "cold" wallets are wallets where the private key of the user key is stored exclusively outside of BitGo's system. "custodial" means that this wallet is a cold wallet where BitGo owns the keys. Only customers of the BitGo Trust can create this kind of wallet. "custodialPaired" means that this is a hot wallet that is owned by the customer but it will be linked to a cold (custodial) wallet where BitGo owns the keys. This option is only available to customers of BitGo Inc. BitGo stores an encrypted private key for the user key of "hot" wallets. "trading" wallets are trading accounts where the coin is "ofc". "distributedCustody" means You manage one key and another key agent manages the second key. BitGo manages the third key
              subType:
                $ref: '#/components/schemas/WalletSubType'
              balanceString:
                type: string
                description: The cleared balance of the address in base units (e.g. Satoshis). Guaranteed to not lose precision. The is only returned if the `expandBalance` query parameter is set to `true`.
              balance:
                type: number
                description: The cleared balance of the address in base units (e.g. Satoshis). The is only returned if the `expandBalance` query parameter is set to `true`.
              confirmedBalanceString:
                type: string
                description: The total balance of confirmed transactions in base units (e.g. Satoshis). The is only returned if the `expandBalance` query parameter is set to `true`. Guaranteed to not lose precision.
              confirmedBalance:
                type: number
                description: The total balance of confirmed transactions in base units (e.g. Satoshis). The is only returned if the `expandBalance` query parameter is set to `true`.
              spendableBalanceString:
                type: string
                description: The total balance in base units (e.g. Satoshis) which may be used as inputs for creating new transactions in string representation. Guaranteed to not lose precision. The is only returned if the `expandBalance` query parameter is set to `true`.
              spendableBalance:
                type: number
                description: The total balance in base units (e.g. Satoshis) which may be used as inputs for creating new transactions in string representation. The is only returned if the `expandBalance` query parameter is set to `true`.
              stakingBalanceString:
                type: string
                description: The staked balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
              rewardBalanceString:
                type: string
                description: The staking reward balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
              offchain:
                allOf:
                  - $ref: '#/components/schemas/OffChainWalletBalance'
                description: Lightning Balances
              users:
                type: array
                items:
                  type: object
                  properties:
                    needsRecovery:
                      type: boolean
                    permissions:
                      type: array
                      items:
                        type: string
                        enum:
                          - admin
                          - spend
                          - view
                          - freeze
                          - trade
                        description: 'This type represents the permissions that can be assigned to a user when adding them to a wallet 1. ''admin'': add/remove wallet policies, add/remove wallet users, approve/reject wallet pending approvals, withdraw assets from wallet, generate new receive addresses, view all balances and transactions 2. ''spend'': withdraw assets from wallet, generate new receive addresses, view all balances and transactions 3. ''view'': generate new receive addresses, view all balances and transactions 4. ''freeze'': 5. ''trade'': trade on a wallet - applicable only for trading wallets'
                    recoverable:
                      type: boolean
                    user:
                      type: string
                  required:
                    - permissions
              walletFlags:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      $ref: '#/components/schemas/WalletFlag'
                    value:
                      type: string
                  required:
                    - name
                    - value
              receiveAddress:
                $ref: '#/components/schemas/WalletAddress'
            required:
              - allowBackupKeySigning
              - approvalsRequired
              - coin
              - coinSpecific
              - deleted
              - disableTransactionNotifications
              - hasLargeNumberOfAddresses
              - id
              - isCold
              - label
              - startDate
        nextBatchPrevId:
          type: string
          description: When a result set is truncated, this field returns the id of the last object in the previous batch. To get the next batch of results, pass this value via the "prevId" query parameter.
          example: 585951a5df8380e0e3063e9f
          format: uuid
        totalCount:
          type: number
      required:
        - wallets
    WalletMPCv2MigrationStatus:
      title: WalletMPCv2MigrationStatus
      type: object
      properties:
        canMigrateToMPCv2:
          type: boolean
        disabledReason:
          type: string
      required:
        - canMigrateToMPCv2
    WalletMaximumSpendable:
      type: object
      properties:
        coin:
          $ref: '#/components/schemas/Coin'
        maximumSpendable:
          type: string
          example: '19948310'
    WalletMultisigType:
      type: string
      enum:
        - onchain
        - tss
        - blsdkg
    WalletPermission:
      type: string
      description: |
        Comma-separated list of privileges for a wallet. Includes:

              - `admin` - Can manage wallet policies and users and approve or reject pending approvals.
              - `freeze` - Can freeze a wallet, disabling all withdrawals.
              - `spend` - Can initiate withdrawals and generate new receive addresses.
              - `trade` - Can initiate trades from a Go Account (`trading` wallet type).
              - `view` - Can view balances and transactions.

        Permissions don't overlap. Required parameter if 'reshare' is false.
      enum:
        - admin
        - spend
        - trade
        - view
      example: spend,view
    WalletPermissionAttributes:
      type: object
      properties:
        hasEnoughAdmins:
          description: True, if the wallet has enough admins to create a staking request.
          type: boolean
        numberOfRequiredAdmin:
          description: The number of admins required to create a hot staking request.
          type: integer
        useValidatorList:
          description: Boolean flag to control wether to show dropdown list of validator or not
          type: boolean
        skipAddressValidation:
          description: Boolean flag to control wether perform validator address validation or not
          type: boolean
    WalletRecoveryIntent:
      title: Wallet Recovery Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - walletRecovery
          required:
            - intentType
        - $ref: '#/components/schemas/BaseIntent'
    WalletRecoveryIntent1:
      title: Wallet Recovery
      type: object
      properties:
        intentType:
          type: string
        sequenceId:
          type: string
          description: |
            A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because BitGo only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly. It is the responsibility of the caller to keep track of this ID.
          example: abc123
        comment:
          type: string
          description: The `comment` is only visible to users on the wallet and is not shared publicly.
      required:
        - intentType
    WalletShare:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        coin:
          $ref: '#/components/schemas/Coin'
        wallet:
          $ref: '#/components/schemas/Id'
        walletLabel:
          $ref: '#/components/schemas/WalletLabel'
        fromUser:
          $ref: '#/components/schemas/Id'
        toUser:
          $ref: '#/components/schemas/Coin'
        permission:
          type: string
          description: |
            Comma-separated list of privileges for a wallet. Includes:

              - `admin` - Can manage wallet policies and users and approve or reject pending approvals.
              - `freeze` - Can freeze a wallet, disabling all withdrawals.
              - `spend` - Can initiate withdrawals and generate new receive addresses.
              - `trade` - Can initiate trades from a Go Account (`trading` wallet type).
              - `view` - Can view balances and transactions.

            Permissions don't overlap. Required parameter if 'reshare' is false.
          enum:
            - admin
            - spend
            - trade
            - view
          example: spend,view
        message:
          type: string
          description: User readable message to display to the share recipient
        state:
          $ref: '#/components/schemas/PlatformWalletShareState'
        enterprise:
          $ref: '#/components/schemas/Id'
        pendingApprovalId:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: Only set if this wallet share is currently pending approval
        keychain:
          description: Only set if this wallet share has an associated keychain
          type: object
          properties:
            pub:
              description: Sharing user's root public key
              type: string
            encryptedPrv:
              description: Sharing user's private key encrypted under their wallet passphrase
              type: string
            fromPubKey:
              description: Sharing user's derived public key which will be used to calculate the wallet sharing secret.
              type: string
            toPubKey:
              description: Shared-to user's derived public key which will be used to calculate the wallet sharing secret.
              type: string
            path:
              description: BIP32 HD path of the derived public keys (fromPubKey and toPubKey)
              example: m/1234/1/1
              type: string
      required:
        - id
        - coin
        - wallet
        - walletLabel
        - fromUser
        - toUser
        - permissions
        - message
        - state
        - enterprise
    WalletShare1:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        coin:
          $ref: '#/components/schemas/Coin'
        wallet:
          $ref: '#/components/schemas/Id'
        walletLabel:
          $ref: '#/components/schemas/WalletLabel'
        fromUser:
          $ref: '#/components/schemas/Id'
        toUser:
          $ref: '#/components/schemas/Coin'
        permission:
          type: string
          description: |
            Comma-separated list of privileges for a wallet. Includes:

              - `admin` - Can manage wallet policies and users and approve or reject pending approvals.
              - `freeze` - Can freeze a wallet, disabling all withdrawals.
              - `spend` - Can initiate withdrawals and generate new receive addresses.
              - `trade` - Can initiate trades from a Go Account (`trading` wallet type).
              - `view` - Can view balances and transactions.

            Permissions don't overlap. Required parameter if 'reshare' is false.
          enum:
            - admin
            - spend
            - trade
            - view
          example: spend,view
        message:
          type: string
          description: User readable message to display to the share recipient
        state:
          $ref: '#/components/schemas/WalletShareState1'
        enterprise:
          $ref: '#/components/schemas/Id'
        pendingApprovalId:
          allOf:
            - $ref: '#/components/schemas/Id'
          description: Only set if this wallet share is currently pending approval
        keychain:
          description: Only set if this wallet share has an associated keychain
          type: object
          properties:
            pub:
              description: Sharing user's root public key
              type: string
            encryptedPrv:
              description: Sharing user's private key encrypted under their wallet passphrase
              type: string
            fromPubKey:
              description: Sharing user's derived public key which will be used to calculate the wallet sharing secret.
              type: string
            toPubKey:
              description: Shared-to user's derived public key which will be used to calculate the wallet sharing secret.
              type: string
            path:
              description: BIP32 HD path of the derived public keys (fromPubKey and toPubKey)
              example: m/1234/1/1
              type: string
      required:
        - id
        - coin
        - wallet
        - walletLabel
        - fromUser
        - toUser
        - permissions
        - message
        - state
        - enterprise
    WalletShareKeychain:
      type: object
      description: Key passed to the receiving user, included if the wallet was shared with spend permission
      properties:
        pub:
          description: One of wallet pub (onchain), commonPub (BLS) or commonKeychain (MPC)
          type: string
        encryptedPrv:
          description: Private key of the user sharing the wallet encrypted under their wallet passphrase
          type: string
        fromPubKey:
          description: Derived public key of the user sharing the wallet
          type: string
        toPubKey:
          description: Derived public key of the user receiving the share
          type: string
        path:
          description: BIP32 HD path of the derived public keys (fromPubKey and toPubKey)
          example: m/1234/1/1
          type: string
    WalletShareState:
      title: WalletShareState
      type: string
      enum:
        - pendingapproval
        - active
        - accepted
        - canceled
        - rejected
      description: The state of wallet share object
      example: active
    WalletShareState1:
      type: string
      example: active
      enum:
        - pendingapproval
        - active
        - accepted
        - canceled
        - rejected
    WalletSharesCountSchema:
      title: WalletSharesCountSchema
      type: object
      additionalProperties:
        type: object
        properties:
          walletSharesCount:
            type: number
        required:
          - walletSharesCount
    WalletStakingDisclaimerAttributes:
      type: object
      properties:
        stakingDisclaimerAttributes:
          $ref: '#/components/schemas/StakingDisclaimerAttributes'
        unstakingDisclaimerAttributes:
          $ref: '#/components/schemas/UnstakingDisclaimerAttributes'
    WalletStakingPermissionAttributes:
      type: object
      properties:
        walletPermissionAttributes:
          $ref: '#/components/schemas/WalletPermissionAttributes'
        stakingPermissionAttributes:
          $ref: '#/components/schemas/StakingPermissionAttributes'
        unstakingPermissionAttributes:
          $ref: '#/components/schemas/UnstakingPermissionAttributes'
    WalletStakingStateAttributes:
      type: object
      properties:
        spendableAttributes:
          $ref: '#/components/schemas/DotWalletStakingSpendableAttributes'
        permissionAttributes:
          $ref: '#/components/schemas/WalletStakingPermissionAttributes'
        disclaimerAttributes:
          $ref: '#/components/schemas/WalletStakingDisclaimerAttributes'
    WalletSubType:
      title: WalletSubType
      type: string
      enum:
        - distributedCustody
        - pairedCustodial
        - custodialHot
        - custodialCold
        - lightningCustody
        - lightningSelfCustody
        - onPrem
    WalletSubdocument:
      title: WalletSubdocument
      oneOf:
        - $ref: '#/components/schemas/AdaWallet'
        - $ref: '#/components/schemas/AlgorandWallet'
        - $ref: '#/components/schemas/AtomWallet'
        - $ref: '#/components/schemas/AvaxPWallet'
        - $ref: '#/components/schemas/UtxoWallet'
        - $ref: '#/components/schemas/CasperWallet'
        - $ref: '#/components/schemas/DotWallet'
        - $ref: '#/components/schemas/EosWallet'
        - $ref: '#/components/schemas/EthereumWallet'
        - $ref: '#/components/schemas/Ethereum2Wallet'
        - $ref: '#/components/schemas/FiatWallet'
        - $ref: '#/components/schemas/HederaWallet'
        - $ref: '#/components/schemas/NearWallet'
        - $ref: '#/components/schemas/Offchain'
        - $ref: '#/components/schemas/StacksWallet'
        - $ref: '#/components/schemas/TestcoinWallet'
        - $ref: '#/components/schemas/TonWallet'
        - $ref: '#/components/schemas/TronWallet'
        - $ref: '#/components/schemas/StellarWallet'
        - $ref: '#/components/schemas/XRPWallet'
        - $ref: '#/components/schemas/TezosWallet'
        - $ref: '#/components/schemas/SolWallet'
        - $ref: '#/components/schemas/LightningCoinWallet'
    WalletType:
      title: WalletType
      type: string
      enum:
        - backing
        - cold
        - custodial
        - custodialPaired
        - hot
        - trading
    WalletTypeCondition:
      title: Wallet type
      type: object
      description: Wallet-type condition for the all-wallets scope.
      required:
        - name
        - label
        - description
        - status
        - parameters
      properties:
        name:
          type: string
          description: The name of the condition.
          enum:
            - wallet.type
          example: wallet.type
        label:
          type: string
          description: A label for the condition which can be shown to an end user.
          example: Wallet Type
        description:
          type: string
          description: A description for the condition which can be shown to an end user.
          example: Allows creating a condition based on the Wallet Type
        status:
          type: string
          description: |
            Status of the condition. Indicates if the condition is usable `ACTIVE` or not `INACTIVE`.

            * `ACTIVE` - The condition is available for use.
            * `INACTIVE` - The condition is NOT available for use.
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        parameters:
          type: array
          description: A list of Parameters to control how the condition behaves.
          items:
            allOf:
              - $ref: '#/components/schemas/WalletTypeParameter'
    WalletTypeFilteringCondition:
      title: Wallet type
      type: object
      description: Filter by wallet type.
      required:
        - name
        - parameters
      properties:
        name:
          type: string
          description: Name of the condition.
          enum:
            - wallet.type
          example: wallet.type
        parameters:
          type: object
          description: Required data needed to evaluate the Filtering Condition.
          required:
            - walletType
          properties:
            walletType:
              type: array
              items:
                type: string
                enum:
                  - hot
                  - custodial
    WalletTypeParameter:
      type: object
      description: The Wallet Type parameter determines on what type of Wallet this condition will trigger.
      required:
        - name
        - label
        - description
        - type
        - required
        - allowMultiple
        - values
      properties:
        name:
          type: string
          description: The name of the condition parameter.
          enum:
            - walletType
          example: walletType
        label:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: Type
        description:
          type: string
          description: A description for the condition parameter which can be shown to an end user.
          example: The Wallet Type
        type:
          type: string
          description: This Conditions parameter has a set of defined values.
          enum:
            - ENUMERATED
        required:
          type: string
          description: This Conditions parameter must always be provided.
          enum:
            - ALWAYS
        allowMultiple:
          type: boolean
          description: true, if multiple values can be provided, i.e. as a list of values. When false only one value can be provided, i.e. a list with more than one element will be rejected.
          example: 'true'
        values:
          type: array
          description: A list of valid values, only values from this list will be accepted.
          items:
            anyOf:
              - $ref: '#/components/schemas/CustodialValue'
              - $ref: '#/components/schemas/HotValue'
              - $ref: '#/components/schemas/ColdValue'
              - $ref: '#/components/schemas/TradingValue'
              - $ref: '#/components/schemas/CustodialPairedValue'
              - $ref: '#/components/schemas/BackingValue'
    WalletTypePublic:
      type: string
      description: The type describes who owns the keys to the wallet and how they are stored. `cold` wallets are wallets where the private key of the user key is stored exclusively outside of BitGo's system. `custodial` means that this wallet is a cold wallet where BitGo owns the keys. Only customers of the BitGo Trust can create this kind of wallet. `custodialPaired` means that this is a hot wallet that is owned by the customer but it will be linked to a cold (custodial) wallet where BitGo owns the keys. This option is only available to customers of BitGo Inc. BitGo stores an encrypted private key for the user key of `hot` wallets. `trading` wallets are trading accounts where the coin is `ofc`. `distributedCustody` means You manage one key and another key agent manages the second key. BitGo manages the third key
      enum:
        - cold
        - custodial
        - custodialPaired
        - hot
        - trading
        - distributedCustody
    WalletUnspentsResponse:
      title: WalletUnspentsResponse
      type: object
      properties:
        unspents:
          type: array
          items:
            type: object
            properties:
              chain:
                type: number
                description: The chain of the UTXO
              index:
                type: number
                description: The index of the UTXO
              redeemScript:
                type: string
                description: The redeem script of the UTXO
              witnessScript:
                type: string
                description: The witness script of the UTXO
              id:
                type: string
                description: The ID of the UTXO
              address:
                type: string
                description: The address of the UTXO
              value:
                type: number
                description: The value of the UTXO
              blockHeight:
                type: number
                description: The block this Unspent was created in
              coinbase:
                type: boolean
                description: True if this unspent came from the coinbase transaction
        nextBatchPrevId:
          type: string
          description: The ID from where the results can continue
        coin:
          $ref: '#/components/schemas/CoinString'
        bumpFee:
          type: string
          description: fee bump
          format: number
      required:
        - unspents
    WalletUpdateCoinSpecific:
      type: object
      properties:
        eth:
          $ref: '#/components/schemas/WalletUpdateCoinSpecificEth'
        teth:
          $ref: '#/components/schemas/WalletUpdateCoinSpecificEth'
    WalletUpdateCoinSpecificEth:
      type: object
      properties:
        deployForwardersManually:
          type: boolean
        flushForwardersManually:
          type: boolean
    WalletUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/Id'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/WalletPermission'
      example:
        user: 55e8a1a5df8380e0e30e20c6
        permissions:
          - admin
          - view
          - spend
    WalletValue:
      title: Wallet
      type: object
      description: Applies to a specific wallet.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - wallet
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Wallet
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: Only spending from the transferring wallet will be included
    WalletWebhookType:
      title: WalletWebhookType
      type: string
      enum:
        - txRequest
        - txRequestTransaction
        - transfer
        - transaction
        - transactionRemoved
        - transactionExpire
        - pendingapproval
        - block
        - admin
        - address_confirmation
        - lowFee
        - circuitBreaker
        - lowFeeAddressBalance
        - transaction_finality_on_l1
        - fundsDeposited
    WalletsResponse:
      type: object
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/Wallet1'
        nextBatchPrevId:
          $ref: '#/components/schemas/NextBatchPrevId'
        totalCount:
          type: integer
      required:
        - wallets
    WalletsWithCoinResponse:
      allOf:
        - $ref: '#/components/schemas/WalletsResponse'
        - type: object
          properties:
            coin:
              $ref: '#/components/schemas/Coin'
          required:
            - coin
    WalrusStakingIntent:
      title: Walrus Stake Intent
      allOf:
        - type: object
          properties:
            sharedStakingObjectId:
              type: string
          required:
            - sharedStakingObjectId
        - $ref: '#/components/schemas/SuiStakingIntent'
    WalrusUndelegateIntent:
      title: Walrus Undelegate Intent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - undelegate
            stakedSuiObjectId:
              type: string
            sharedStakingObjectId:
              type: string
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
          required:
            - intentType
            - stakedSuiObjectId
            - sharedStakingObjectId
        - $ref: '#/components/schemas/BaseStakeIntent'
    WalrusWithdrawIntent:
      title: Walrus Withdraw Intent
      allOf:
        - type: object
          properties:
            sharedStakingObjectId:
              type: string
          required:
            - sharedStakingObjectId
        - $ref: '#/components/schemas/SuiUnstakingIntent'
    WctStakingDelegation:
      title: WCT
      allOf:
        - $ref: '#/components/schemas/StakingDelegation'
      type: object
      properties:
        subType:
          description: The staking type.
          type: string
          enum:
            - WCT_STAKE
    WctStakingRequest:
      title: WCT
      allOf:
        - $ref: '#/components/schemas/StakingRequest'
      type: object
      properties:
        delegations:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/WctStakingDelegation'
        transactions:
          type: array
          minItems: 1
          maxItems: 500
          items:
            $ref: '#/components/schemas/StakingTransaction'
        amount:
          description: Amount to stake in base units.
          type: string
        subType:
          description: The staking type.
          type: string
          enum:
            - WCT_STAKE
    WctStakingRequestPOSTBody:
      title: WCT stake
      allOf:
        - $ref: '#/components/schemas/StakingRequestPOSTBody'
      type: object
      properties:
        amount:
          description: Amount to stake in base units.
          type: string
          example: '1000000000000000000'
        type:
          description: Staking Request type = 'STAKE'.
          type: string
          example: STAKE
        validator:
          description: The validator address.
          type: string
        duration:
          description: The staking duration.
          type: string
        subType:
          description: The staking type.
          type: string
          enum:
            - WCT_STAKE
          default: WCT_STAKE
      required:
        - amount
        - type
    WctUnStakingRequestPOSTBody:
      title: WCT unstake
      allOf:
        - $ref: '#/components/schemas/UnStakingRequestPOSTBody'
      type: object
      properties:
        type:
          description: Staking Request type = 'UNSTAKE'.
          type: string
          example: UNSTAKE
        delegationId:
          description: The delegation ID representing the delegation to unstake.
          type: string
        amount:
          description: Amount to unstake in base units.
          type: string
          example: '1000000000000000000'
      required:
        - type
        - delegationId
    WebSocketSubscription:
      oneOf:
        - $ref: '#/components/schemas/OrderBooksRequest'
        - $ref: '#/components/schemas/TradeOrdersRequest'
    Webhook:
      title: Webhook
      type: object
      properties:
        id:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        created:
          type: string
          example: 2021-01-01T00:00:00.000Z
          format: date-time
          title: ISO Date String
        coin:
          type: string
          description: A cryptocurrency or token ticker symbol.
          example: btc
        url:
          type: string
          example: https://your.server.com/webhook
          format: uri
        version:
          type: number
          description: 2 for coins running on API v2.
          example: 2
        scope:
          $ref: '#/components/schemas/WebhookScope'
        state:
          $ref: '#/components/schemas/WebhookState'
        successiveFailedAttempts:
          type: number
          example: 0
        listenToFailureStates:
          type: boolean
          description: Whether or not to listen to failed transactions on chain.
        label:
          type: string
          description: Label of the new webhook.
        walletId:
          type: string
        enterpriseId:
          type: string
        organizationId:
          type: string
          example: 59cd72485007a239fb00282ed480da1f
          pattern: ^[0-9a-f]{32}$
        userId:
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/WebhookType'
          description: Event type to listen to.
        numConfirmations:
          type: number
          example: 6
        lastAttempt:
          type: string
          example: 2021-01-01T00:00:00.000Z
          format: date-time
          title: ISO Date String
        failingSince:
          type: string
          example: 2021-01-01T00:00:00.000Z
          format: date-time
          title: ISO Date String
        allToken:
          type: boolean
        txRequestStates:
          type: array
          items:
            type: string
            enum:
              - pendingApproval
              - canceled
              - rejected
              - initialized
              - pendingDelivery
              - delivered
              - pendingUserSignature
              - pendingUserCommitment
              - pendingUserRShare
              - pendingUserGShare
              - readyToSend
              - signed
              - failed
            description: If present, only transaction request state changes from the list will trigger notifications. If not present, all transaction request state changes will trigger notifications.
        txRequestTransactionStates:
          type: array
          items:
            type: string
            enum:
              - initialized
              - pendingSignature
              - eddsaPendingCommitment
              - eddsaPendingRShare
              - eddsaPendingGShare
              - ecdsaMPCv2Round1
              - ecdsaMPCv2Round2
              - ecdsaMPCv2Round3
              - readyToCombineShares
              - signed
              - held
              - delivered
              - invalidSignature
              - rejected
            description: If present, only transaction request transaction state changes from the list will trigger notifications. If not present, all transaction request transaction state changes will trigger notifications.
      required:
        - id
        - created
        - coin
        - url
        - version
        - scope
        - state
        - successiveFailedAttempts
        - listenToFailureStates
    Webhook1:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        label:
          type: string
          example: Test Webhook
        created:
          $ref: '#/components/schemas/DateTime'
        coin:
          $ref: '#/components/schemas/Coin'
        type:
          $ref: '#/components/schemas/WebhookTypeWallet'
        url:
          type: string
          format: uri
          example: https://your.server.com/webhook
        version:
          type: integer
          example: 2
          description: 2 for coins running on API v2.
        numConfirmations:
          type: integer
          example: 6
        state:
          type: string
          description: If `active`, indicates the webhook can trigger and send to the URL. If `suspended`, indicates the webhook can't trigger.
          enum:
            - active
            - suspended
          example: active
        lastAttempt:
          $ref: '#/components/schemas/DateTime'
        failingSince:
          $ref: '#/components/schemas/DateTime'
        successiveFailedAttempts:
          type: integer
          example: 0
        walletId:
          type: string
        allowBlockedHosts:
          type: boolean
        allToken:
          type: boolean
        txRequestStates:
          type: array
          items:
            $ref: '#/components/schemas/TransactionRequestState1'
          description: If present, only transaction request state changes from the list will trigger notifications. If not present, all transaction request state changes will trigger notifications.
        txRequestTransactionStates:
          type: array
          items:
            $ref: '#/components/schemas/TransactionState1'
          description: If present, only transaction request transaction state changes from the list will trigger notifications. If not present, all transaction request transaction state changes will trigger notifications.
        identityStatus:
          type: array
          items:
            $ref: '#/components/schemas/IdentityStatus'
          description: If present, only identity status changes from the list will trigger notifications. If not present, all identity status changes will trigger notifications.
        userKycState:
          type: array
          items:
            $ref: '#/components/schemas/VerifiedKycState'
          description: If present, only user kyc state changes from the list will trigger notifications. If not present, all kyc state changes will trigger notifications.
        enterpriseKycState:
          type: array
          items:
            $ref: '#/components/schemas/VerifiedKycState'
          description: 'If present, only enterprise kyc state changes from the list will trigger notifications. If not present, all kyc state changes will trigger notifications.      '
      required:
        - url
    WebhookNotification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/WebhookTypeWallet'
        wallet:
          $ref: '#/components/schemas/Id'
        enterprise:
          $ref: '#/components/schemas/Id'
        organization:
          $ref: '#/components/schemas/Id'
        bankAccount:
          $ref: '#/components/schemas/Id'
        url:
          type: string
          format: uri
          example: https://your.server.com/webhook
        hash:
          type: string
          example: 1311768467294899700
          description: A transaction hash for transactions, or a block hash for block notifications.
        coin:
          $ref: '#/components/schemas/Coin'
        transfer:
          $ref: '#/components/schemas/Id'
        state:
          type: string
          description: If `failed`, webhook notification failed to connect with the target URL. If `new`, webhook notification was newly generated, in response to an event. If `pending`, webhook notification is awaiting processing by the webhook worker. If `processed`, webhook notification successfully sent to target URL. If `unconfirmed`, webhook notification is awaiting confirmation on the blockchain.
          enum:
            - failed
            - new
            - pending
            - processed
            - unconfirmed
          example: new
        simulation:
          type: boolean
          example: false
        retries:
          type: integer
          example: 0
          description: The number of retries that have been attempted for this webhook notification.
        webhook:
          $ref: '#/components/schemas/Id'
        updateAt:
          $ref: '#/components/schemas/DateTime'
        nextAttempt:
          $ref: '#/components/schemas/DateTime'
        version:
          type: integer
          example: 2
        idempotencyKey:
          type: string
          description: A unique id that can be used to de-duplicate notifications.
    WebhookNotificationState:
      title: WebhookNotificationState
      type: string
      enum:
        - unconfirmed
        - new
        - pending
        - processed
        - failed
    WebhookRuleCondition:
      title: WebhookRuleCondition
      type: object
      properties:
        url:
          type: string
          description: The url to query for the webhook
      required:
        - url
    WebhookScope:
      title: WebhookScope
      type: string
      enum:
        - wallet
        - enterprise
        - organization
    WebhookState:
      title: WebhookState
      type: string
      enum:
        - active
        - suspended
      description: If 'active', indicates the webhook can trigger and send to the URL. If 'suspended', indicates the webhook can't trigger.
      example: active
    WebhookType:
      title: WebhookType
      type: string
      enum:
        - txRequest
        - txRequestTransaction
        - transfer
        - transaction
        - transactionRemoved
        - transactionExpire
        - pendingapproval
        - block
        - admin
        - address_confirmation
        - lowFee
        - circuitBreaker
        - lowFeeAddressBalance
        - wallet_confirmation
        - bankAccount
        - userKycState
        - enterpriseKycState
        - identityStatus
        - accessToken
        - accountCreated
        - contractSigned
        - fundsDeposited
        - kycResult
        - policyBalanceChange
        - transaction_finality_on_l1
    WebhookTypeBlock:
      type: string
      enum:
        - block
        - wallet_confirmation
      example: block
    WebhookTypeWallet:
      type: string
      enum:
        - txRequest
        - txRequestTransaction
        - transfer
        - transaction
        - transactionRemoved
        - transactionExpire
        - pendingapproval
        - address_confirmation
        - lowFee
        - block
        - admin
        - circuitBreaker
        - transaction_finality_on_l1
        - lowFeeAddressBalance
      example: transfer
      description: Event type to listen to.
    WhitelistedAddressValue:
      title: Whitelisted
      type: object
      description: The destination is whitelisted.
      required:
        - value
        - label
        - description
      properties:
        value:
          type: string
          enum:
            - whitelistedAddress
          description: The actual value.
        label:
          type: string
          description: A label for the condition parameter Value which can be shown to an end user.
          example: Whitelisted address
        description:
          type: string
          description: A description for the condition parameter Value which can be shown to an end user.
          example: The destination is whitelisted
    WireWithdrawalCoinSpecific:
      title: WireWithdrawalCoinSpecific
      type: object
      properties:
        transactionType:
          type: string
          description: Type of transaction
          example: WITHDRAWAL
        settlementFeeString:
          type: string
          description: Settlement fee amount
          example: '0'
        referenceType:
          type: string
          description: Reference type for the transaction
          example: withdraw
        referenceValue:
          type: string
          description: Reference value for the transaction
          example: '146697'
        originalDestination:
          type: string
          description: Original destination identifier
          example: ab4efe649c63aa30
        fees:
          type: array
          items:
            type: object
            properties:
              amount:
                type: string
                description: Amount of the fee
                example: '-100'
              category:
                type: string
                description: Category of the fee
                example: bank
            description: Array of associated fees
    WireWithdrawalConfirmationAction:
      title: WireWithdrawalConfirmationAction
      type: string
      enum:
        - approve
        - reject
    WireWithdrawalsPaginatedResponse:
      title: WireWithdrawalsPaginatedResponse
      type: object
      properties:
        transfers:
          type: array
          items:
            type: object
            properties:
              entries:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: The address associated with this transfer entry
                      example: 6680ad9d5650cdf891898f13b8016ef2
                    wallet:
                      type: string
                      description: The wallet identifier associated with this entry
                      example: 6680ad9d5650cdf891898f13b8016ef2
                    valueString:
                      type: string
                      description: The transfer amount represented
                      example: '-1000'
                    isPayGo:
                      type: boolean
                      description: Indicates if this is a PayGo transaction
                      example: false
                    backingFeeString:
                      type: string
                      description: The backing fee amount
                      example: '-100'
                    token:
                      type: string
                      description: The token identifier used in the transfer
                      example: ofcusd
                  required:
                    - address
                  description: List of transfer entries containing transaction details
              id:
                type: string
                description: Unique identifier for the transfer
                example: 67abcb899639d543ee979ed327dd5f5d
              coin:
                allOf:
                  - $ref: '#/components/schemas/CoinString'
                description: Coin type for the transfer
                example: ofcusd
              wallet:
                type: string
                description: Wallet identifier
                example: 6680ad9d5650cdf891898f13b8016ef2
              walletType:
                type: string
                enum:
                  - backing
                  - cold
                  - custodial
                  - custodialPaired
                  - hot
                  - trading
                description: Type of wallet
                example: trading
              enterprise:
                type: string
                description: Enterprise identifier
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              organization:
                type: string
                description: Organization identifier
                example: 59cd72485007a239fb00282ed480da1f
                pattern: ^[0-9a-f]{32}$
              txid:
                type: string
                description: Transaction ID
                example: 266b937f2e92e5bbb6973f1317b286a7240157ffbc2743f220ab16336391d1ad
              txidType:
                type: string
                description: Type of transaction ID
                example: transactionHash
              height:
                type: number
                description: Block height
                example: 0
              heightId:
                type: string
                description: Combined height and transfer ID
                example: 000000000-67abcb899639d543ee979ed327dd5f5d
              date:
                type: string
                description: Timestamp of the transfer
                example: '2025-02-13T21:18:07.220Z'
                format: date-time
                title: ISO Date String
              type:
                allOf:
                  - $ref: '#/components/schemas/TransferType1'
                description: Type of transfer
                example: send
              subType:
                type: string
                description: Subtype of transfer
                example: ofc_withdrawal
              value:
                type: number
                description: Numeric value of the transfer
                example: -1000
              valueString:
                type: string
                description: String representation of the transfer value
                example: '-1000'
              intendedValueString:
                type: string
                description: Intended value of the transfer
                example: '-1100'
              baseValue:
                type: number
                description: Base value of the transfer
                example: -1000
              baseValueString:
                type: string
                description: String representation of the base value
                example: '-1000'
              baseValueWithoutFees:
                type: number
                description: Base value without fees
                example: -1000
              baseValueWithoutFeesString:
                type: string
                description: String representation of base value without fees
                example: '-1000'
              feeString:
                nullable: true
                type: string
                description: Fee amount
                example: 'null'
              payGoFee:
                type: number
                description: PayGo fee amount
                example: 0
              payGoFeeString:
                type: string
                description: PayGo fee amount as string
                example: '0'
              usd:
                type: number
                description: USD value of the transfer
                example: -10
              usdRate:
                type: number
                description: USD exchange rate
                example: 1
              state:
                allOf:
                  - $ref: '#/components/schemas/TransferState1'
                description: Current state of the transfer
                example: confirmed
              instant:
                type: boolean
                description: Whether the transfer is instant
                example: false
              isReward:
                type: boolean
                description: Whether the transfer is a reward
                example: false
              isUnlock:
                type: boolean
                description: Whether the transfer is an unlock
                example: false
              isFee:
                type: boolean
                description: Whether the transfer is a fee
                example: false
              senderInformationVerified:
                type: boolean
                description: Whether sender information is verified
                example: false
              tags:
                type: array
                items:
                  type: string
                  description: List of associated tags
              history:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      description: Timestamp of the historical event
                      example: '2025-02-13T21:18:07.220Z'
                      format: date-time
                      title: ISO Date String
                    action:
                      allOf:
                        - $ref: '#/components/schemas/TransferAction'
                      description: Type of action
                      example: confirmed
                    comment:
                      nullable: true
                      type: string
                      description: comment associated with the action
                      example: 'null'
                    user:
                      type: string
                      description: User who performed the action
                      example: 60524c9aee8800002a3c3b3b7d6afe5f
                  required:
                    - date
                    - action
                  description: List of historical events
              signedDate:
                type: string
                description: Timestamp when the transfer was signed
                example: '2025-02-11T22:13:30.024Z'
                format: date-time
                title: ISO Date String
              coinSpecific:
                allOf:
                  - $ref: '#/components/schemas/WireWithdrawalCoinSpecific'
                description: Coin-specific details
              usersNotified:
                type: boolean
                description: Whether users have been notified
                example: true
              metadata:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      description: Key identifying the metadata type
                      example: onChainTxId
                    value:
                      type: string
                      description: Value associated with the metadata
                      example: 3d59f68ebbb3675b36b300b9c46efbdd2a7a9e0be24481677d38ca17c18047a8
                  required:
                    - key
                    - value
                  description: Additional metadata
              confirmedTime:
                type: string
                description: Timestamp when the transfer was confirmed
                example: '2025-02-13T21:18:07.220Z'
                format: date-time
                title: ISO Date String
              unconfirmedTime:
                type: string
                description: Timestamp when the transfer became unconfirmed
                example: '2025-02-11T22:13:26.827Z'
                format: date-time
                title: ISO Date String
              signedTime:
                type: string
                description: Timestamp when the transfer was signed
                example: '2025-02-11T22:13:30.024Z'
                format: date-time
                title: ISO Date String
              createdTime:
                type: string
                description: Timestamp when the transfer was created
                example: '2025-02-11T22:13:29.032Z'
                format: date-time
                title: ISO Date String
            required:
              - entries
              - id
              - coin
              - wallet
              - date
              - type
              - valueString
              - state
              - history
            description: List of wire withdrawal transfers
        nextBatchPrevId:
          type: string
          description: ID for fetching the next batch of results
          example: 000000000-67abcb899639d543ee979ed327dd5f5d
      required:
        - transfers
    WithdrawIntent:
      title: WithdrawIntent
      allOf:
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - claim
            amount:
              type: object
              properties:
                symbol:
                  type: string
                value:
                  type: string
              required:
                - symbol
                - value
          required:
            - intentType
        - $ref: '#/components/schemas/BaseStakeIntent'
    WithdrawIntent2:
      title: Generic claim unstake
      allOf:
        - $ref: '#/components/schemas/BaseStakeIntent2'
        - type: object
          properties:
            intentType:
              type: string
              enum:
                - claim
          required:
            - intentType
    XRPAddress:
      title: XRP Address
      type: object
      properties:
        nonceTracker:
          type: object
          properties:
            detectedMissingNonces:
              type: array
              items:
                type: object
                properties:
                  nonce:
                    type: number
                  isNonceLocked:
                    type: boolean
                  nonceLockExpireTime:
                    type: string
                    format: date
                    title: Date String
                required:
                  - nonce
                  - isNonceLocked
            detectedMissingNoncesData:
              type: array
              items:
                type: object
                properties:
                  nonce:
                    type: number
                  isNonceLocked:
                    type: boolean
                  nonceLockExpireTime:
                    type: string
                    format: date
                    title: Date String
                required:
                  - nonce
                  - isNonceLocked
          required:
            - detectedMissingNonces
            - detectedMissingNoncesData
      required:
        - nonceTracker
    XRPWallet:
      title: XRP Wallet
      type: object
      properties:
        rootAddress:
          type: string
        pendingChainInitialization:
          type: boolean
        creationFailure:
          type: array
          items:
            type: string
        trustedTokens:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/TrustedTokenState'
              - $ref: '#/components/schemas/Token'
      required:
        - rootAddress
        - pendingChainInitialization
        - creationFailure
    XlmFeeInfo:
      title: XLM
      type: object
      description: feeInfo (XLM)
      properties:
        height:
          type: integer
          description: Height of the ledger that provided the values
          example: 123456
        xlmBaseFee:
          type: string
          description: Base network fee per transaction operation
          example: '100'
        xlmBaseReserve:
          type: string
          description: Base reserve used to calculate the minimum balance required by the network
          example: '5000000'
    XlmTxInfo:
      title: XLM
      type: object
      description: txInfo (XLM)
      properties:
        fee:
          type: integer
          description: Network fee
          example: 100
        operations:
          type: array
          items:
            type: object
            properties:
              amount:
                type: string
                description: Amount in Lumens as string
                example: '10.5'
              asset:
                type: object
                properties:
                  code:
                    type: string
                    example: XLM
              destination:
                type: string
                example: GCNFRU774FPHLV3HAB6CR54XJYFYITOLU6KS2J5BNCLDPYN7I3DOMIPY
              type:
                type: string
                enum:
                  - payment
                  - createAccount
                example: payment
        sequence:
          type: string
          example: '35995558267060226'
        source:
          type: string
          example: GBSGOXQNPULNPBX7XTHXP2GDBOZMHPIZOOA7CQXYTLHYKF5J2JDCF7LT
    baseBalanceStrings:
      title: baseBalanceStrings
      type: object
      properties:
        balanceString:
          type: string
          description: String representation of the total balance of all wallets containing the given coin type. Guaranteed to not lose precision.
        confirmedBalanceString:
          type: string
          description: String representation of the total balance of confirmed transactions for all wallets containing the given coin type. Guaranteed to not lose precision.
        spendableBalanceString:
          type: string
          description: String representation of the total balance of all wallets containing the given coin which may be used as inputs for creating new transactions. Guaranteed to not lose precision.
        stakingBalanceString:
          type: string
          description: The staked balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
        rewardBalanceString:
          type: string
          description: The staking reward balance in base units. Guaranteed to not lose precision. The is only returned if the `includeStakingBalances` query parameter is set to `true`.
      required:
        - balanceString
        - confirmedBalanceString
        - spendableBalanceString
    forwardersBalanceResponse:
      title: forwardersBalanceResponse
      type: object
      properties:
        forwarders:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: The forwarder address.
              balance:
                type: string
                description: Current balance of the forwarder address.
            required:
              - address
              - balance
      required:
        - forwarders
    optionalBoolean:
      title: optionalBoolean
      type: boolean
    optionalNumber:
      title: optionalNumber
      type: number
    optionalString:
      title: optionalString
      type: string
    optionalStringArray:
      title: optionalStringArray
      type: array
      items:
        type: string
    optionalUnknownObject:
      title: optionalUnknownObject
      type: object
      additionalProperties: {}
    scopes:
      type: object
      description: Wrapper object for a list of scopes. Not paginated.
      properties:
        scopes:
          description: A list of scopes available on your Enterprise.
          type: array
          items:
            $ref: '#/components/schemas/AllWalletsScope'
    tokenBalances:
      title: tokenBalances
      type: object
      additionalProperties:
        allOf:
          - type: object
            properties:
              transferCount:
                type: number
                description: Number of transfers for the token.
              heldBalanceString:
                type: string
                description: The difference between the balanceString and the spendableBalanceString.
            required:
              - transferCount
          - $ref: '#/components/schemas/baseBalanceStrings'
x-tagGroups:
  - name: API reference
    tags:
      - Accounts
      - Address
      - Approval Requests
      - Audit log
      - Counterparties
      - Client Activation
      - Client Allocations & Deallocations
      - Client Balances
      - Client Settlements & Transfers
      - Enterprise
      - Enterprise Webhooks
      - Entity Validation
      - Express
      - Federation
      - Fiat
      - Key
      - Liabilities
      - Lightning
      - Margin
      - Market Data
      - Material
      - Onboarding
      - Order Book
      - Orders
      - Organization
      - Enterprise Management
      - Organization Management
      - Organization Search History
      - Organization Trades
      - Organization Transfers
      - Organization Webhooks
      - Partner Activation
      - Partner Allocations & Deallocations
      - Partner Balances
      - Partner Settlements & Transfers
      - Pending approval
      - Policy Builder
      - Products
      - User Management
      - Reports
      - Send label
      - Solvency
      - Stablecoin
      - Staking Request
      - Staking State Information
      - Staking History
      - Settlement Disputes
      - Settlement Onboarding
      - Settlement Signing
      - Settlements
      - Trade WebSocket
      - Transaction request
      - Transfer
      - User
      - Roles & Permissions
      - Wallet
      - Wallet Policy
      - Wallet share
      - Webhook
